"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/javascript-terminal-turtle";
exports.ids = ["vendor-chunks/javascript-terminal-turtle"];
exports.modules = {

/***/ "(ssr)/./node_modules/javascript-terminal-turtle/lib/terminal.js":
/*!*****************************************************************!*\
  !*** ./node_modules/javascript-terminal-turtle/lib/terminal.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("\n(function webpackUniversalModuleDefinition(root, factory) {\n    if (true) module.exports = factory();\n    else {}\n})(void 0, function() {\n    return /******/ function(modules) {\n        /******/ // The module cache\n        /******/ var installedModules = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_585__(moduleId) {\n            /******/ /******/ // Check if module is in cache\n            /******/ if (installedModules[moduleId]) {\n                /******/ return installedModules[moduleId].exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = installedModules[moduleId] = {\n                /******/ i: moduleId,\n                /******/ l: false,\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __nested_webpack_require_585__);\n            /******/ /******/ // Flag the module as loaded\n            /******/ module1.l = true;\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)\n        /******/ __nested_webpack_require_585__.m = modules;\n        /******/ /******/ // expose the module cache\n        /******/ __nested_webpack_require_585__.c = installedModules;\n        /******/ /******/ // define getter function for harmony exports\n        /******/ __nested_webpack_require_585__.d = function(exports1, name, getter) {\n            /******/ if (!__nested_webpack_require_585__.o(exports1, name)) {\n                /******/ Object.defineProperty(exports1, name, {\n                    enumerable: true,\n                    get: getter\n                });\n            /******/ }\n        /******/ };\n        /******/ /******/ // define __esModule on exports\n        /******/ __nested_webpack_require_585__.r = function(exports1) {\n            /******/ if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n                /******/ Object.defineProperty(exports1, Symbol.toStringTag, {\n                    value: \"Module\"\n                });\n            /******/ }\n            /******/ Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n        /******/ };\n        /******/ /******/ // create a fake namespace object\n        /******/ // mode & 1: value is a module id, require it\n        /******/ // mode & 2: merge all properties of value into the ns\n        /******/ // mode & 4: return value when already ns object\n        /******/ // mode & 8|1: behave like require\n        /******/ __nested_webpack_require_585__.t = function(value, mode) {\n            /******/ if (mode & 1) value = __nested_webpack_require_585__(value);\n            /******/ if (mode & 8) return value;\n            /******/ if (mode & 4 && typeof value === \"object\" && value && value.__esModule) return value;\n            /******/ var ns = Object.create(null);\n            /******/ __nested_webpack_require_585__.r(ns);\n            /******/ Object.defineProperty(ns, \"default\", {\n                enumerable: true,\n                value: value\n            });\n            /******/ if (mode & 2 && typeof value != \"string\") for(var key in value)__nested_webpack_require_585__.d(ns, key, (function(key) {\n                return value[key];\n            }).bind(null, key));\n            /******/ return ns;\n        /******/ };\n        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules\n        /******/ __nested_webpack_require_585__.n = function(module1) {\n            /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {\n                return module1[\"default\"];\n            } : /******/ function getModuleExports() {\n                return module1;\n            };\n            /******/ __nested_webpack_require_585__.d(getter, \"a\", getter);\n            /******/ return getter;\n        /******/ };\n        /******/ /******/ // Object.prototype.hasOwnProperty.call\n        /******/ __nested_webpack_require_585__.o = function(object, property) {\n            return Object.prototype.hasOwnProperty.call(object, property);\n        };\n        /******/ /******/ // __webpack_public_path__\n        /******/ __nested_webpack_require_585__.p = \"\";\n        /******/ /******/ /******/ // Load entry module and return exports\n        /******/ return __nested_webpack_require_585__(__nested_webpack_require_585__.s = 0);\n    /******/ }({\n        /***/ \"./node_modules/balanced-match/index.js\": /*!**********************************************!*\\\n  !*** ./node_modules/balanced-match/index.js ***!\n  \\**********************************************/ /*! no static exports found */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            module1.exports = balanced;\n            function balanced(a, b, str) {\n                if (a instanceof RegExp) a = maybeMatch(a, str);\n                if (b instanceof RegExp) b = maybeMatch(b, str);\n                var r = range(a, b, str);\n                return r && {\n                    start: r[0],\n                    end: r[1],\n                    pre: str.slice(0, r[0]),\n                    body: str.slice(r[0] + a.length, r[1]),\n                    post: str.slice(r[1] + b.length)\n                };\n            }\n            function maybeMatch(reg, str) {\n                var m = str.match(reg);\n                return m ? m[0] : null;\n            }\n            balanced.range = range;\n            function range(a, b, str) {\n                var begs, beg, left, right, result;\n                var ai = str.indexOf(a);\n                var bi = str.indexOf(b, ai + 1);\n                var i = ai;\n                if (ai >= 0 && bi > 0) {\n                    begs = [];\n                    left = str.length;\n                    while(i >= 0 && !result){\n                        if (i == ai) {\n                            begs.push(i);\n                            ai = str.indexOf(a, i + 1);\n                        } else if (begs.length == 1) {\n                            result = [\n                                begs.pop(),\n                                bi\n                            ];\n                        } else {\n                            beg = begs.pop();\n                            if (beg < left) {\n                                left = beg;\n                                right = bi;\n                            }\n                            bi = str.indexOf(b, i + 1);\n                        }\n                        i = ai < bi && ai >= 0 ? ai : bi;\n                    }\n                    if (begs.length) {\n                        result = [\n                            left,\n                            right\n                        ];\n                    }\n                }\n                return result;\n            }\n        /***/ },\n        /***/ \"./node_modules/brace-expansion/index.js\": /*!***********************************************!*\\\n  !*** ./node_modules/brace-expansion/index.js ***!\n  \\***********************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_7452__) {\n            var concatMap = __nested_webpack_require_7452__(/*! concat-map */ \"./node_modules/concat-map/index.js\");\n            var balanced = __nested_webpack_require_7452__(/*! balanced-match */ \"./node_modules/balanced-match/index.js\");\n            module1.exports = expandTop;\n            var escSlash = \"\\x00SLASH\" + Math.random() + \"\\x00\";\n            var escOpen = \"\\x00OPEN\" + Math.random() + \"\\x00\";\n            var escClose = \"\\x00CLOSE\" + Math.random() + \"\\x00\";\n            var escComma = \"\\x00COMMA\" + Math.random() + \"\\x00\";\n            var escPeriod = \"\\x00PERIOD\" + Math.random() + \"\\x00\";\n            function numeric(str) {\n                return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);\n            }\n            function escapeBraces(str) {\n                return str.split(\"\\\\\\\\\").join(escSlash).split(\"\\\\{\").join(escOpen).split(\"\\\\}\").join(escClose).split(\"\\\\,\").join(escComma).split(\"\\\\.\").join(escPeriod);\n            }\n            function unescapeBraces(str) {\n                return str.split(escSlash).join(\"\\\\\").split(escOpen).join(\"{\").split(escClose).join(\"}\").split(escComma).join(\",\").split(escPeriod).join(\".\");\n            }\n            // Basically just str.split(\",\"), but handling cases\n            // where we have nested braced sections, which should be\n            // treated as individual members, like {a,{b,c},d}\n            function parseCommaParts(str) {\n                if (!str) return [\n                    \"\"\n                ];\n                var parts = [];\n                var m = balanced(\"{\", \"}\", str);\n                if (!m) return str.split(\",\");\n                var pre = m.pre;\n                var body = m.body;\n                var post = m.post;\n                var p = pre.split(\",\");\n                p[p.length - 1] += \"{\" + body + \"}\";\n                var postParts = parseCommaParts(post);\n                if (post.length) {\n                    p[p.length - 1] += postParts.shift();\n                    p.push.apply(p, postParts);\n                }\n                parts.push.apply(parts, p);\n                return parts;\n            }\n            function expandTop(str) {\n                if (!str) return [];\n                // I don't know why Bash 4.3 does this, but it does.\n                // Anything starting with {} will have the first two bytes preserved\n                // but *only* at the top level, so {},a}b will not expand to anything,\n                // but a{},b}c will be expanded to [a}c,abc].\n                // One could argue that this is a bug in Bash, but since the goal of\n                // this module is to match Bash's rules, we escape a leading {}\n                if (str.substr(0, 2) === \"{}\") {\n                    str = \"\\\\{\\\\}\" + str.substr(2);\n                }\n                return expand(escapeBraces(str), true).map(unescapeBraces);\n            }\n            function identity(e) {\n                return e;\n            }\n            function embrace(str) {\n                return \"{\" + str + \"}\";\n            }\n            function isPadded(el) {\n                return /^-?0\\d/.test(el);\n            }\n            function lte(i, y) {\n                return i <= y;\n            }\n            function gte(i, y) {\n                return i >= y;\n            }\n            function expand(str, isTop) {\n                var expansions = [];\n                var m = balanced(\"{\", \"}\", str);\n                if (!m || /\\$$/.test(m.pre)) return [\n                    str\n                ];\n                var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n                var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n                var isSequence = isNumericSequence || isAlphaSequence;\n                var isOptions = m.body.indexOf(\",\") >= 0;\n                if (!isSequence && !isOptions) {\n                    // {a},b}\n                    if (m.post.match(/,.*\\}/)) {\n                        str = m.pre + \"{\" + m.body + escClose + m.post;\n                        return expand(str);\n                    }\n                    return [\n                        str\n                    ];\n                }\n                var n;\n                if (isSequence) {\n                    n = m.body.split(/\\.\\./);\n                } else {\n                    n = parseCommaParts(m.body);\n                    if (n.length === 1) {\n                        // x{{a,b}}y ==> x{a}y x{b}y\n                        n = expand(n[0], false).map(embrace);\n                        if (n.length === 1) {\n                            var post = m.post.length ? expand(m.post, false) : [\n                                \"\"\n                            ];\n                            return post.map(function(p) {\n                                return m.pre + n[0] + p;\n                            });\n                        }\n                    }\n                }\n                // at this point, n is the parts, and we know it's not a comma set\n                // with a single entry.\n                // no need to expand pre, since it is guaranteed to be free of brace-sets\n                var pre = m.pre;\n                var post = m.post.length ? expand(m.post, false) : [\n                    \"\"\n                ];\n                var N;\n                if (isSequence) {\n                    var x = numeric(n[0]);\n                    var y = numeric(n[1]);\n                    var width = Math.max(n[0].length, n[1].length);\n                    var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;\n                    var test = lte;\n                    var reverse = y < x;\n                    if (reverse) {\n                        incr *= -1;\n                        test = gte;\n                    }\n                    var pad = n.some(isPadded);\n                    N = [];\n                    for(var i = x; test(i, y); i += incr){\n                        var c;\n                        if (isAlphaSequence) {\n                            c = String.fromCharCode(i);\n                            if (c === \"\\\\\") c = \"\";\n                        } else {\n                            c = String(i);\n                            if (pad) {\n                                var need = width - c.length;\n                                if (need > 0) {\n                                    var z = new Array(need + 1).join(\"0\");\n                                    if (i < 0) c = \"-\" + z + c.slice(1);\n                                    else c = z + c;\n                                }\n                            }\n                        }\n                        N.push(c);\n                    }\n                } else {\n                    N = concatMap(n, function(el) {\n                        return expand(el, false);\n                    });\n                }\n                for(var j = 0; j < N.length; j++){\n                    for(var k = 0; k < post.length; k++){\n                        var expansion = pre + N[j] + post[k];\n                        if (!isTop || isSequence || expansion) expansions.push(expansion);\n                    }\n                }\n                return expansions;\n            }\n        /***/ },\n        /***/ \"./node_modules/concat-map/index.js\": /*!******************************************!*\\\n  !*** ./node_modules/concat-map/index.js ***!\n  \\******************************************/ /*! no static exports found */ /***/ function(module1, exports1) {\n            module1.exports = function(xs, fn) {\n                var res = [];\n                for(var i = 0; i < xs.length; i++){\n                    var x = fn(xs[i], i);\n                    if (isArray(x)) res.push.apply(res, x);\n                    else res.push(x);\n                }\n                return res;\n            };\n            var isArray = Array.isArray || function(xs) {\n                return Object.prototype.toString.call(xs) === \"[object Array]\";\n            };\n        /***/ },\n        /***/ \"./node_modules/get-options/index.js\": /*!*******************************************!*\\\n  !*** ./node_modules/get-options/index.js ***!\n  \\*******************************************/ /*! no static exports found */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            /**\n * Class used internally to represent individual options.\n * @internal\n */ class Option {\n                /**\n\t * Create a new Option instance.\n\t *\n\t * @param {String|Array} names - Comma-separated list of names.\n\t * @param {String|Array} params - Arguments which the option expects.\n\t * @example new Option(\"-l, --long-list, --length\", \"<num> <type>\")\n\t * @example new Option(\"-e, --exec\", \"[num] [type]\")\n\t * @constructor\n\t */ constructor(names, params = \"\"){\n                    this.shortNames = [];\n                    this.longNames = [];\n                    this.params = [];\n                    this.values = [];\n                    this.defineNames(names);\n                    this.defineParams(params);\n                }\n                /**\n\t * Describe the names used to refer to this option.\n\t * \n\t * @param {String|Array} input\n\t * @internal\n\t */ defineNames(input) {\n                    if (!Array.isArray(input)) input = String(input).split(/,/g);\n                    for (let name of input){\n                        name = name.trim();\n                        /^-([^\\s-])$/.test(name) ? this.shortNames.push(RegExp.lastParen) : this.longNames.push(name.replace(/^-+/, \"\"));\n                    }\n                }\n                /**\n\t * Describe the parameters this option accepts/expects.\n\t *\n\t * @param {String|Array} input\n\t * @internal\n\t */ defineParams(input) {\n                    input = Array.isArray(input) ? input.filter(Boolean).join(\" \") : String(input).trim().split(/\\s+/g);\n                    // Strip any enclosing brackets added for readability\n                    input = input.map((param)=>param.replace(/^<(.+?)>$|^\\[(.+?)\\]$|^\\((.+?)\\)$/gm, (...args)=>args.slice(1, 4).filter(Boolean).join(\"\")));\n                    for (const param of input){\n                        if (!param) continue;\n                        const [, name, pattern = \".+\"] = param.match(/^([^=]+)(?:=(.+)?)?$/);\n                        this.params.push({\n                            name,\n                            pattern\n                        });\n                        if (/\\.{3}$/.test(name)) this.variadic = true;\n                    }\n                }\n                /**\n\t * Pattern to match option when expressed in bundled short-form.\n\t *\n\t * @readonly\n\t * @return {String}\n\t */ get bundlePattern() {\n                    // Use a cached result if possible\n                    if (this._bundlePattern) return this._bundlePattern;\n                    const param = this.params.map((param)=>`(${param.pattern})?`).join(\"\");\n                    const names = 1 === this.shortNames.length ? this.shortNames[0] : `[${this.shortNames.join(\"\")}]`;\n                    return this._bundlePattern = names + param;\n                }\n                /**\n\t * Number of parameters this option expects/accepts.\n\t *\n\t * @readonly\n\t * @property {Number}\n\t */ get arity() {\n                    return this.params ? this.params.length : 0;\n                }\n                /**\n\t * Array of names recognised by the option, both long and short.\n\t *\n\t * @readonly\n\t * @property {Array}\n\t */ get names() {\n                    return this.shortNames.concat(this.longNames);\n                }\n                /**\n\t * Whether the option can accept another parameter.\n\t *\n\t * @readonly\n\t * @property {Boolean}\n\t */ get canCollect() {\n                    return !!(this.variadic || this.values.length < this.params.length);\n                }\n            }\n            /**\n * Box a value inside an {@link Array}, unless it already is one.\n *\n * @example arrayify(1)   => [1]\n * @example arrayify([1]) => [1]\n * @param {*} input\n * @return {Array}\n * @internal\n */ function arrayify(input) {\n                return Array.isArray(input) ? input : [\n                    input\n                ];\n            }\n            /**\n * Strip leading dashes from an option name and convert it to camelCase.\n *\n * @param {String} input - An option's name, such as \"--write-to\"\n * @param {Boolean} noCamelCase - Strip leading dashes only\n * @return {String}\n * @internal\n */ function formatName(input, noCamelCase) {\n                input = input.replace(/^-+/, \"\");\n                // Convert kebab-case to camelCase\n                if (!noCamelCase && /-/.test(input)) input = input.toLowerCase().replace(/([a-z])-+([a-z])/g, (_, a, b)=>a + b.toUpperCase());\n                return input;\n            }\n            /**\n * Test a string against a list of patterns.\n *\n * @param {String} input\n * @param {String[]|RegExp[]} patterns\n * @return {Boolean}\n * @internal\n */ function match(input, patterns = []) {\n                if (!patterns || 0 === patterns.length) return false;\n                input = String(input);\n                patterns = arrayify(patterns).filter(Boolean);\n                for (const pattern of patterns)if (pattern === input && \"string\" === typeof pattern || pattern instanceof RegExp && pattern.test(input)) return true;\n                return false;\n            }\n            /**\n * Filter duplicate strings from an array.\n *\n * @param {String[]} input\n * @return {Array}\n * @internal\n */ function uniqueStrings(input) {\n                const output = {};\n                for(let i = 0, l = input.length; i < l; ++i)output[input[i]] = true;\n                return Object.keys(output);\n            }\n            /**\n * Parse a string as a whitespace-delimited list of options,\n * preserving quoted and escaped characters.\n *\n * @example unstringify(\"--foo --bar\")     => [\"--foo\", \"--bar\"];\n * @example unstringify('--foo \"bar baz\"') => [\"--foo\", '\"bar baz\"'];\n * @param {String} input\n * @return {Object}\n * @internal\n */ function unstringify(input) {\n                input = String(input || \"\");\n                const tokens = [];\n                const { length } = input;\n                let quoteChar = \"\"; // Quote-type enclosing current region\n                let tokenData = \"\"; // Characters currently being collected\n                let isEscaped = false; // Flag identifying an escape sequence\n                for(let i = 0; i < length; ++i){\n                    const char = input[i];\n                    // Previous character was a backslash\n                    if (isEscaped) {\n                        tokenData += char;\n                        isEscaped = false;\n                        continue;\n                    }\n                    // Whitespace: terminate token unless quoted\n                    if (!quoteChar && /[ \\t\\n]/.test(char)) {\n                        tokenData && tokens.push(tokenData);\n                        tokenData = \"\";\n                        continue;\n                    }\n                    // Backslash: escape next character\n                    if (\"\\\\\" === char) {\n                        isEscaped = true;\n                        // Swallow backslash if it escapes a metacharacter\n                        const next = input[i + 1];\n                        if (quoteChar && (quoteChar === next || \"\\\\\" === next) || !quoteChar && /[- \\t\\n\\\\'\"`]/.test(next)) continue;\n                    } else if ((!quoteChar || char === quoteChar) && /['\"`]/.test(char)) {\n                        quoteChar = quoteChar === char ? \"\" : char;\n                        continue;\n                    }\n                    tokenData += char;\n                }\n                if (tokenData) tokens.push(tokenData);\n                return tokens;\n            }\n            /**\n * Parse input using \"best guess\" logic. Called when no optdef is passed.\n *\n * Essentially, the following assumptions are made about input:\n *\n * - Anything beginning with at least one dash is an option name\n * - Options without arguments mean a boolean \"true\"\n * - Option-reading stops at \"--\"\n * - Anything caught between two options becomes the first option's value\n *\n * @param {Array} input\n * @param {Object} [config={}]\n * @return {Object}\n * @internal\n */ function autoOpts(input, config = {}) {\n                const opts = new Object(null);\n                const argv = [];\n                let argvEnd;\n                // Bail early if passed a blank string\n                if (!input) return opts;\n                // Stop parsing options after a double-dash\n                const stopAt = input.indexOf(\"--\");\n                if (stopAt !== -1) {\n                    argvEnd = input.slice(stopAt + 1);\n                    input = input.slice(0, stopAt);\n                }\n                for(let i = 0, l = input.length; i < l; ++i){\n                    let name = input[i];\n                    // Appears to be an option\n                    if (/^-/.test(name)) {\n                        // Equals sign is used, should it become the option's value?\n                        if (!config.ignoreEquals && /=/.test(name)) {\n                            const split = name.split(/=/);\n                            name = formatName(split[0], config.noCamelCase);\n                            opts[name] = split.slice(1).join(\"=\");\n                        } else {\n                            name = formatName(name, config.noCamelCase);\n                            // Treat a following non-option as this option's value\n                            const next = input[i + 1];\n                            if (next != null && !/^-/.test(next)) {\n                                // There's another option after this one. Collect multiple non-options into an array.\n                                const nextOpt = input.findIndex((s, I)=>I > i && /^-/.test(s));\n                                if (nextOpt !== -1) {\n                                    opts[name] = input.slice(i + 1, nextOpt);\n                                    // There's only one value to store; don't wrap it in an array\n                                    if (nextOpt - i < 3) opts[name] = opts[name][0];\n                                    i = nextOpt - 1;\n                                } else opts[name] = true;\n                            } else opts[name] = true;\n                        }\n                    } else argv.push(name);\n                }\n                // Add any additional arguments that were found after a \"--\" delimiter\n                if (argvEnd) argv.push(...argvEnd);\n                return {\n                    options: opts,\n                    argv: argv\n                };\n            }\n            /**\n * Extract command-line options from a list of strings.\n *\n * @param {String|Array} input\n * @param {String|Object} [optdef=null]\n * @param {Object} [config={}]\n */ function getOpts(input, optdef = null, config = {}) {\n                // Do nothing if given nothing\n                if (!input || 0 === input.length) return {\n                    options: {},\n                    argv: []\n                };\n                // Avoid modifying original array\n                if (Array.isArray(input)) input = [\n                    ...input\n                ].map(String);\n                else if (\"string\" === typeof input) input = unstringify(input);\n                // Take a different approach if optdefs aren't specified\n                if (null === optdef || \"\" === optdef || false === optdef) return autoOpts(input, config);\n                // Allow \"t:h:i:s\" style of getopt usage\n                if (\"[object String]\" === Object.prototype.toString.call(optdef)) {\n                    const names = optdef.match(/[^\\s:]:?/g);\n                    optdef = {};\n                    names.forEach((name)=>{\n                        optdef[`-${name.replace(/:/, \"\")}`] = name.length > 1 ? \"<arg>\" : \"\";\n                    });\n                }\n                // Parse settings that affect runtime option-handling\n                const { noAliasPropagation, noCamelCase, noBundling, noMixedOrder, noUndefined, terminator, ignoreEquals, duplicates = \"use-last\" } = config;\n                const shortNames = {};\n                const longNames = {};\n                const result = {\n                    argv: [],\n                    options: new Object(null)\n                };\n                // Define each named option. Throw an error if a duplicate is found.\n                for(const name in optdef){\n                    const option = new Option(name, optdef[name]);\n                    for (const name of option.shortNames){\n                        if (undefined !== shortNames[name]) throw new ReferenceError(`Short option \"-${name}\" already defined`);\n                        shortNames[`-${name}`] = option;\n                    }\n                    for (const name of option.longNames){\n                        if (undefined !== longNames[name]) throw new ReferenceError(`Long option \"--${name}\" already defined`);\n                        longNames[`--${name}`] = option;\n                    }\n                }\n                // Pointer to the option that's currently picking up arguments\n                let currentOption;\n                // Manage duplicated option values\n                function resolveDuplicate(option, name, value) {\n                    switch(duplicates){\n                        // Use the first value (or set of values); discard any following duplicates\n                        case \"use-first\":\n                            return result.options[name];\n                        // Use the last value (or set of values); discard any preceding duplicates. Default.\n                        case \"use-last\":\n                        default:\n                            return result.options[name] = value;\n                        // Use the first/last options; treat any following/preceding duplicates as argv items respectively\n                        case \"limit-first\":\n                        case \"limit-last\":\n                            result.argv.push(option.prevMatchedName, ...arrayify(value));\n                            break;\n                        // Throw an exception\n                        case \"error\":\n                            const error = new TypeError(`Attempting to reassign option \"${name}\" with value(s) ${JSON.stringify(value)}`);\n                            error.affectedOption = option;\n                            error.affectedValue = value;\n                            throw error;\n                        // Add parameters of duplicate options to the argument list of the first\n                        case \"append\":\n                            const oldValues = arrayify(result.options[name]);\n                            const newValues = arrayify(value);\n                            result.options[name] = oldValues.concat(newValues);\n                            break;\n                        // Store parameters of duplicated options in a multidimensional array\n                        case \"stack\":\n                            {\n                                let oldValues = result.options[name];\n                                const newValues = arrayify(value);\n                                // This option hasn't been \"stacked\" yet\n                                if (!option.stacked) {\n                                    oldValues = arrayify(oldValues);\n                                    result.options[name] = [\n                                        oldValues,\n                                        newValues\n                                    ];\n                                    option.stacked = true;\n                                } else result.options[name].push(arrayify(newValues));\n                                break;\n                            }\n                        // Store each duplicated value in an array using the order they appear\n                        case \"stack-values\":\n                            {\n                                let values = result.options[name];\n                                // First time \"stacking\" this option (nesting its value/s inside an array)\n                                if (!option.stacked) {\n                                    const stack = [];\n                                    for (const value of arrayify(values))stack.push([\n                                        value\n                                    ]);\n                                    values = stack;\n                                    option.stacked = true;\n                                }\n                                arrayify(value).forEach((v, i)=>{\n                                    // An array hasn't been created at this index yet,\n                                    // because an earlier option wasn't given enough parameters.\n                                    if (undefined === values[i]) values[i] = Array(values[0].length - 1);\n                                    values[i].push(v);\n                                });\n                                result.options[name] = values;\n                                break;\n                            }\n                    }\n                }\n                // Assign an option's parsed value to the result's `.options` property\n                function setValue(option, value) {\n                    // Assign the value only to the option name it matched\n                    if (noAliasPropagation) {\n                        let name = option.lastMatchedName;\n                        // Special alternative:\n                        // In lieu of using the matched option name, use the first --long-name only\n                        if (\"first-only\" === noAliasPropagation) name = option.longNames[0] || option.shortNames[0];\n                        // camelCase?\n                        name = formatName(name, noCamelCase);\n                        // This option's already been set before\n                        if (result.options[name]) resolveDuplicate(option, name, value);\n                        else result.options[name] = value;\n                    } else {\n                        const { names } = option;\n                        for (let name of names){\n                            // Decide whether to camelCase this option name\n                            name = formatName(name, noCamelCase);\n                            // Ascertain if this option's being duplicated\n                            if (result.options[name]) resolveDuplicate(option, name, value);\n                            result.options[name] = value;\n                        }\n                    }\n                }\n                // Push whatever we've currently collected for this option and reset pointer\n                function wrapItUp() {\n                    let optValue = currentOption.values;\n                    // Don't store solitary values in an array. Store them directly as strings\n                    if (1 === currentOption.arity && !currentOption.variadic) optValue = optValue[0];\n                    setValue(currentOption, optValue);\n                    currentOption.values = [];\n                    currentOption = null;\n                }\n                // Reverse the order of an argument list, keeping options and their parameter lists intact\n                function flip(input) {\n                    input = input.reverse();\n                    // Flip any options back into the right order\n                    for(let i = 0, l = input.length; i < l; ++i){\n                        const arg = input[i];\n                        const opt = shortNames[arg] || longNames[arg];\n                        if (opt) {\n                            const from = Math.max(0, i - opt.arity);\n                            const to = i + 1;\n                            const extract = input.slice(from, to).reverse();\n                            input.splice(from, extract.length, ...extract);\n                        }\n                    }\n                    return input;\n                }\n                // Tackle bundling. Ensure there's at least one option with a short name to work with.\n                const nameKeys = Object.keys(shortNames);\n                let bundleMatch, bundlePatterns, niladicArgs;\n                if (!noBundling && nameKeys.length) {\n                    bundlePatterns = uniqueStrings(nameKeys.map((n)=>shortNames[n].bundlePattern)).join(\"|\");\n                    bundleMatch = new RegExp(`^-(${bundlePatterns})+`, \"g\");\n                    niladicArgs = uniqueStrings(nameKeys.filter((n)=>!shortNames[n].arity).map((n)=>shortNames[n].bundlePattern)).join(\"|\");\n                    niladicArgs = new RegExp(`^(-(?:${niladicArgs})+)((?!${bundlePatterns})\\\\S+)`);\n                    bundlePatterns = new RegExp(bundlePatterns, \"g\");\n                }\n                // Is pre-processing of the argument list necessary?\n                if (!ignoreEquals || bundleMatch) {\n                    // Limit equals-sign expansion to items that begin with recognised option names\n                    const legalNames = new RegExp(`^(?:${Object.keys(longNames).join(\"|\")})=`);\n                    for(let i = 0, l = input.length; i < l; ++i){\n                        let arg = input[i];\n                        // We have bundling in use\n                        if (bundleMatch) {\n                            bundleMatch.lastIndex = 0;\n                            // Expand bundled option clusters (\"-mvl2\" -> \"-m -v -l 2\")\n                            if (bundleMatch.test(arg)) {\n                                // Break off arguments attached to niladic options\n                                const niladicMatch = arg.match(niladicArgs);\n                                if (niladicMatch) {\n                                    niladicArgs.lastIndex = 0;\n                                    arg = niladicMatch[1];\n                                    input.splice(i + 1, 0, niladicMatch[2]);\n                                    l = input.length;\n                                }\n                                const segments = [].concat(...arg.match(bundlePatterns).map((m)=>{\n                                    const option = shortNames[`-${m[0]}`];\n                                    const result = [\n                                        `-${m[0]}`\n                                    ];\n                                    if (!option.arity) return result;\n                                    result.push(...m.match(new RegExp(option.bundlePattern)).slice(1).filter((i)=>i));\n                                    return result;\n                                }));\n                                input.splice(i, 1, ...segments);\n                                l = input.length;\n                                i += segments.length - 1;\n                                continue;\n                            }\n                        }\n                        // Expand \"--option=value\" sequences to become \"--option value\"\n                        if (legalNames.test(arg)) {\n                            const match = arg.match(/^([^=]+)=(.+)$/);\n                            input.splice(i, 1, match[1], match[2]);\n                            l = input.length;\n                            i += 1;\n                        }\n                    }\n                }\n                // If we're handling duplicate options with \"limit-last\", flip the input order\n                if (\"limit-last\" === duplicates) input = flip(input);\n                // Start processing the arguments we were given to handle\n                for(let i = 0, l = input.length; i < l; ++i){\n                    const arg = input[i];\n                    const opt = shortNames[arg] || longNames[arg];\n                    // This argument matches a recognised option name\n                    if (opt) {\n                        // Record the name given on command-line that matched the option\n                        opt.lastMatchedName = arg;\n                        // Did we have an existing option that was collecting values?\n                        if (currentOption) wrapItUp();\n                        // Option takes at least one argument\n                        if (opt.arity) currentOption = opt;\n                        else setValue(opt, true);\n                        // Store an additional back-reference to the current option's name\n                        opt.prevMatchedName = arg;\n                    } else {\n                        const isTerminator = match(arg, terminator);\n                        const keepRest = ()=>result.argv.push(...input.slice(i + 1));\n                        // A previous option is still collecting arguments\n                        if (currentOption && currentOption.canCollect && !isTerminator) currentOption.values.push(arg);\n                        else {\n                            currentOption && wrapItUp();\n                            // Terminate option parsing?\n                            if (isTerminator) {\n                                keepRest();\n                                break;\n                            }\n                            // Raise an exception if unrecognised switches are considered an error\n                            if (noUndefined && /^-./.test(arg)) {\n                                let error = noUndefined;\n                                // Prepare an error object to be thrown in the user's direction\n                                switch(typeof noUndefined){\n                                    case \"function\":\n                                        error = error(arg);\n                                        break;\n                                    case \"boolean\":\n                                        error = 'Unknown option: \"%s\"'; // Fall-through\n                                    case \"string\":\n                                        error = new TypeError(error.replace(\"%s\", arg));\n                                }\n                                throw error;\n                            }\n                            result.argv.push(arg);\n                            // Finish processing if mixed-order is disabled\n                            if (noMixedOrder) {\n                                keepRest();\n                                break;\n                            }\n                        }\n                    }\n                }\n                // Ended abruptly?\n                if (currentOption) wrapItUp();\n                // Check if we need to flip the returned .argv array back into the right order again\n                if (\"limit-last\" === duplicates) result.argv = flip(result.argv);\n                return result;\n            }\n            if (\"undefined\" !== typeof module1.exports) module1.exports = getOpts;\n        /***/ },\n        /***/ \"./node_modules/immutable/dist/immutable.es.js\": /*!*****************************************************!*\\\n  !*** ./node_modules/immutable/dist/immutable.es.js ***!\n  \\*****************************************************/ /*! exports provided: default, version, Collection, Iterable, Seq, Map, OrderedMap, List, Stack, Set, OrderedSet, Record, Range, Repeat, is, fromJS, hash, isImmutable, isCollection, isKeyed, isIndexed, isAssociative, isOrdered, isValueObject, get, getIn, has, hasIn, merge, mergeDeep, mergeWith, mergeDeepWith, remove, removeIn, set, setIn, update, updateIn */ /***/ function(module1, __nested_webpack_exports__, __nested_webpack_require_42902__) {\n            \"use strict\";\n            __nested_webpack_require_42902__.r(__nested_webpack_exports__);\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"version\", function() {\n                return version;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"Collection\", function() {\n                return Collection;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"Iterable\", function() {\n                return Iterable;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"Seq\", function() {\n                return Seq;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"Map\", function() {\n                return Map;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"OrderedMap\", function() {\n                return OrderedMap;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"List\", function() {\n                return List;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"Stack\", function() {\n                return Stack;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"Set\", function() {\n                return Set;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"OrderedSet\", function() {\n                return OrderedSet;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"Record\", function() {\n                return Record;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"Range\", function() {\n                return Range;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"Repeat\", function() {\n                return Repeat;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"is\", function() {\n                return is;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"fromJS\", function() {\n                return fromJS;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"hash\", function() {\n                return hash;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"isImmutable\", function() {\n                return isImmutable;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"isCollection\", function() {\n                return isCollection;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"isKeyed\", function() {\n                return isKeyed;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"isIndexed\", function() {\n                return isIndexed;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"isAssociative\", function() {\n                return isAssociative;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"isOrdered\", function() {\n                return isOrdered;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"isValueObject\", function() {\n                return isValueObject;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"get\", function() {\n                return get;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"getIn\", function() {\n                return getIn;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"has\", function() {\n                return has;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"hasIn\", function() {\n                return hasIn;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"merge\", function() {\n                return merge$1;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"mergeDeep\", function() {\n                return mergeDeep;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"mergeWith\", function() {\n                return mergeWith$1;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"mergeDeepWith\", function() {\n                return mergeDeepWith;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"remove\", function() {\n                return remove;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"removeIn\", function() {\n                return removeIn;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"set\", function() {\n                return set;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"setIn\", function() {\n                return setIn;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"update\", function() {\n                return update;\n            });\n            /* harmony export (binding) */ __nested_webpack_require_42902__.d(__nested_webpack_exports__, \"updateIn\", function() {\n                return updateIn;\n            });\n            /**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ // Used for setting prototype methods that IE8 chokes on.\n            var DELETE = \"delete\";\n            // Constants describing the size of trie nodes.\n            var SHIFT = 5; // Resulted in best performance after ______?\n            var SIZE = 1 << SHIFT;\n            var MASK = SIZE - 1;\n            // A consistent shared value representing \"not set\" which equals nothing other\n            // than itself, and nothing that could be provided externally.\n            var NOT_SET = {};\n            // Boolean references, Rough equivalent of `bool &`.\n            function MakeRef() {\n                return {\n                    value: false\n                };\n            }\n            function SetRef(ref) {\n                if (ref) {\n                    ref.value = true;\n                }\n            }\n            // A function which returns a value representing an \"owner\" for transient writes\n            // to tries. The return value will only ever equal itself, and will not equal\n            // the return of any subsequent call of this function.\n            function OwnerID() {}\n            function ensureSize(iter) {\n                if (iter.size === undefined) {\n                    iter.size = iter.__iterate(returnTrue);\n                }\n                return iter.size;\n            }\n            function wrapIndex(iter, index) {\n                // This implements \"is array index\" which the ECMAString spec defines as:\n                //\n                //     A String property name P is an array index if and only if\n                //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n                //     to 2^32−1.\n                //\n                // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n                if (typeof index !== \"number\") {\n                    var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n                    if (\"\" + uint32Index !== index || uint32Index === 4294967295) {\n                        return NaN;\n                    }\n                    index = uint32Index;\n                }\n                return index < 0 ? ensureSize(iter) + index : index;\n            }\n            function returnTrue() {\n                return true;\n            }\n            function wholeSlice(begin, end, size) {\n                return (begin === 0 && !isNeg(begin) || size !== undefined && begin <= -size) && (end === undefined || size !== undefined && end >= size);\n            }\n            function resolveBegin(begin, size) {\n                return resolveIndex(begin, size, 0);\n            }\n            function resolveEnd(end, size) {\n                return resolveIndex(end, size, size);\n            }\n            function resolveIndex(index, size, defaultIndex) {\n                // Sanitize indices using this shorthand for ToInt32(argument)\n                // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n                return index === undefined ? defaultIndex : isNeg(index) ? size === Infinity ? size : Math.max(0, size + index) | 0 : size === undefined || size === index ? index : Math.min(size, index) | 0;\n            }\n            function isNeg(value) {\n                // Account for -0 which is negative, but not less than 0.\n                return value < 0 || value === 0 && 1 / value === -Infinity;\n            }\n            // Note: value is unchanged to not break immutable-devtools.\n            var IS_COLLECTION_SYMBOL = \"@@__IMMUTABLE_ITERABLE__@@\";\n            function isCollection(maybeCollection) {\n                return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);\n            }\n            var IS_KEYED_SYMBOL = \"@@__IMMUTABLE_KEYED__@@\";\n            function isKeyed(maybeKeyed) {\n                return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);\n            }\n            var IS_INDEXED_SYMBOL = \"@@__IMMUTABLE_INDEXED__@@\";\n            function isIndexed(maybeIndexed) {\n                return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);\n            }\n            function isAssociative(maybeAssociative) {\n                return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n            }\n            var Collection = function Collection(value) {\n                return isCollection(value) ? value : Seq(value);\n            };\n            var KeyedCollection = /*@__PURE__*/ function(Collection) {\n                function KeyedCollection(value) {\n                    return isKeyed(value) ? value : KeyedSeq(value);\n                }\n                if (Collection) KeyedCollection.__proto__ = Collection;\n                KeyedCollection.prototype = Object.create(Collection && Collection.prototype);\n                KeyedCollection.prototype.constructor = KeyedCollection;\n                return KeyedCollection;\n            }(Collection);\n            var IndexedCollection = /*@__PURE__*/ function(Collection) {\n                function IndexedCollection(value) {\n                    return isIndexed(value) ? value : IndexedSeq(value);\n                }\n                if (Collection) IndexedCollection.__proto__ = Collection;\n                IndexedCollection.prototype = Object.create(Collection && Collection.prototype);\n                IndexedCollection.prototype.constructor = IndexedCollection;\n                return IndexedCollection;\n            }(Collection);\n            var SetCollection = /*@__PURE__*/ function(Collection) {\n                function SetCollection(value) {\n                    return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);\n                }\n                if (Collection) SetCollection.__proto__ = Collection;\n                SetCollection.prototype = Object.create(Collection && Collection.prototype);\n                SetCollection.prototype.constructor = SetCollection;\n                return SetCollection;\n            }(Collection);\n            Collection.Keyed = KeyedCollection;\n            Collection.Indexed = IndexedCollection;\n            Collection.Set = SetCollection;\n            var IS_SEQ_SYMBOL = \"@@__IMMUTABLE_SEQ__@@\";\n            function isSeq(maybeSeq) {\n                return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);\n            }\n            var IS_RECORD_SYMBOL = \"@@__IMMUTABLE_RECORD__@@\";\n            function isRecord(maybeRecord) {\n                return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);\n            }\n            function isImmutable(maybeImmutable) {\n                return isCollection(maybeImmutable) || isRecord(maybeImmutable);\n            }\n            var IS_ORDERED_SYMBOL = \"@@__IMMUTABLE_ORDERED__@@\";\n            function isOrdered(maybeOrdered) {\n                return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);\n            }\n            var ITERATE_KEYS = 0;\n            var ITERATE_VALUES = 1;\n            var ITERATE_ENTRIES = 2;\n            var REAL_ITERATOR_SYMBOL = typeof Symbol === \"function\" && Symbol.iterator;\n            var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n            var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n            var Iterator = function Iterator(next) {\n                this.next = next;\n            };\n            Iterator.prototype.toString = function toString() {\n                return \"[Iterator]\";\n            };\n            Iterator.KEYS = ITERATE_KEYS;\n            Iterator.VALUES = ITERATE_VALUES;\n            Iterator.ENTRIES = ITERATE_ENTRIES;\n            Iterator.prototype.inspect = Iterator.prototype.toSource = function() {\n                return this.toString();\n            };\n            Iterator.prototype[ITERATOR_SYMBOL] = function() {\n                return this;\n            };\n            function iteratorValue(type, k, v, iteratorResult) {\n                var value = type === 0 ? k : type === 1 ? v : [\n                    k,\n                    v\n                ];\n                iteratorResult ? iteratorResult.value = value : iteratorResult = {\n                    value: value,\n                    done: false\n                };\n                return iteratorResult;\n            }\n            function iteratorDone() {\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n            function hasIterator(maybeIterable) {\n                return !!getIteratorFn(maybeIterable);\n            }\n            function isIterator(maybeIterator) {\n                return maybeIterator && typeof maybeIterator.next === \"function\";\n            }\n            function getIterator(iterable) {\n                var iteratorFn = getIteratorFn(iterable);\n                return iteratorFn && iteratorFn.call(iterable);\n            }\n            function getIteratorFn(iterable) {\n                var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);\n                if (typeof iteratorFn === \"function\") {\n                    return iteratorFn;\n                }\n            }\n            var hasOwnProperty = Object.prototype.hasOwnProperty;\n            function isArrayLike(value) {\n                if (Array.isArray(value) || typeof value === \"string\") {\n                    return true;\n                }\n                return value && typeof value === \"object\" && Number.isInteger(value.length) && value.length >= 0 && (value.length === 0 ? Object.keys(value).length === 1 : // in the array-like may be found (which could be undefined).\n                value.hasOwnProperty(value.length - 1));\n            }\n            var Seq = /*@__PURE__*/ function(Collection$$1) {\n                function Seq(value) {\n                    return value === null || value === undefined ? emptySequence() : isImmutable(value) ? value.toSeq() : seqFromValue(value);\n                }\n                if (Collection$$1) Seq.__proto__ = Collection$$1;\n                Seq.prototype = Object.create(Collection$$1 && Collection$$1.prototype);\n                Seq.prototype.constructor = Seq;\n                Seq.prototype.toSeq = function toSeq() {\n                    return this;\n                };\n                Seq.prototype.toString = function toString() {\n                    return this.__toString(\"Seq {\", \"}\");\n                };\n                Seq.prototype.cacheResult = function cacheResult() {\n                    if (!this._cache && this.__iterateUncached) {\n                        this._cache = this.entrySeq().toArray();\n                        this.size = this._cache.length;\n                    }\n                    return this;\n                };\n                // abstract __iterateUncached(fn, reverse)\n                Seq.prototype.__iterate = function __iterate(fn, reverse) {\n                    var cache = this._cache;\n                    if (cache) {\n                        var size = cache.length;\n                        var i = 0;\n                        while(i !== size){\n                            var entry = cache[reverse ? size - ++i : i++];\n                            if (fn(entry[1], entry[0], this) === false) {\n                                break;\n                            }\n                        }\n                        return i;\n                    }\n                    return this.__iterateUncached(fn, reverse);\n                };\n                // abstract __iteratorUncached(type, reverse)\n                Seq.prototype.__iterator = function __iterator(type, reverse) {\n                    var cache = this._cache;\n                    if (cache) {\n                        var size = cache.length;\n                        var i = 0;\n                        return new Iterator(function() {\n                            if (i === size) {\n                                return iteratorDone();\n                            }\n                            var entry = cache[reverse ? size - ++i : i++];\n                            return iteratorValue(type, entry[0], entry[1]);\n                        });\n                    }\n                    return this.__iteratorUncached(type, reverse);\n                };\n                return Seq;\n            }(Collection);\n            var KeyedSeq = /*@__PURE__*/ function(Seq) {\n                function KeyedSeq(value) {\n                    return value === null || value === undefined ? emptySequence().toKeyedSeq() : isCollection(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : isRecord(value) ? value.toSeq() : keyedSeqFromValue(value);\n                }\n                if (Seq) KeyedSeq.__proto__ = Seq;\n                KeyedSeq.prototype = Object.create(Seq && Seq.prototype);\n                KeyedSeq.prototype.constructor = KeyedSeq;\n                KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq() {\n                    return this;\n                };\n                return KeyedSeq;\n            }(Seq);\n            var IndexedSeq = /*@__PURE__*/ function(Seq) {\n                function IndexedSeq(value) {\n                    return value === null || value === undefined ? emptySequence() : isCollection(value) ? isKeyed(value) ? value.entrySeq() : value.toIndexedSeq() : isRecord(value) ? value.toSeq().entrySeq() : indexedSeqFromValue(value);\n                }\n                if (Seq) IndexedSeq.__proto__ = Seq;\n                IndexedSeq.prototype = Object.create(Seq && Seq.prototype);\n                IndexedSeq.prototype.constructor = IndexedSeq;\n                IndexedSeq.of = function of() {\n                    return IndexedSeq(arguments);\n                };\n                IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq() {\n                    return this;\n                };\n                IndexedSeq.prototype.toString = function toString() {\n                    return this.__toString(\"Seq [\", \"]\");\n                };\n                return IndexedSeq;\n            }(Seq);\n            var SetSeq = /*@__PURE__*/ function(Seq) {\n                function SetSeq(value) {\n                    return (isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)).toSetSeq();\n                }\n                if (Seq) SetSeq.__proto__ = Seq;\n                SetSeq.prototype = Object.create(Seq && Seq.prototype);\n                SetSeq.prototype.constructor = SetSeq;\n                SetSeq.of = function of() {\n                    return SetSeq(arguments);\n                };\n                SetSeq.prototype.toSetSeq = function toSetSeq() {\n                    return this;\n                };\n                return SetSeq;\n            }(Seq);\n            Seq.isSeq = isSeq;\n            Seq.Keyed = KeyedSeq;\n            Seq.Set = SetSeq;\n            Seq.Indexed = IndexedSeq;\n            Seq.prototype[IS_SEQ_SYMBOL] = true;\n            // #pragma Root Sequences\n            var ArraySeq = /*@__PURE__*/ function(IndexedSeq) {\n                function ArraySeq(array) {\n                    this._array = array;\n                    this.size = array.length;\n                }\n                if (IndexedSeq) ArraySeq.__proto__ = IndexedSeq;\n                ArraySeq.prototype = Object.create(IndexedSeq && IndexedSeq.prototype);\n                ArraySeq.prototype.constructor = ArraySeq;\n                ArraySeq.prototype.get = function get(index, notSetValue) {\n                    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n                };\n                ArraySeq.prototype.__iterate = function __iterate(fn, reverse) {\n                    var array = this._array;\n                    var size = array.length;\n                    var i = 0;\n                    while(i !== size){\n                        var ii = reverse ? size - ++i : i++;\n                        if (fn(array[ii], ii, this) === false) {\n                            break;\n                        }\n                    }\n                    return i;\n                };\n                ArraySeq.prototype.__iterator = function __iterator(type, reverse) {\n                    var array = this._array;\n                    var size = array.length;\n                    var i = 0;\n                    return new Iterator(function() {\n                        if (i === size) {\n                            return iteratorDone();\n                        }\n                        var ii = reverse ? size - ++i : i++;\n                        return iteratorValue(type, ii, array[ii]);\n                    });\n                };\n                return ArraySeq;\n            }(IndexedSeq);\n            var ObjectSeq = /*@__PURE__*/ function(KeyedSeq) {\n                function ObjectSeq(object) {\n                    var keys = Object.keys(object);\n                    this._object = object;\n                    this._keys = keys;\n                    this.size = keys.length;\n                }\n                if (KeyedSeq) ObjectSeq.__proto__ = KeyedSeq;\n                ObjectSeq.prototype = Object.create(KeyedSeq && KeyedSeq.prototype);\n                ObjectSeq.prototype.constructor = ObjectSeq;\n                ObjectSeq.prototype.get = function get(key, notSetValue) {\n                    if (notSetValue !== undefined && !this.has(key)) {\n                        return notSetValue;\n                    }\n                    return this._object[key];\n                };\n                ObjectSeq.prototype.has = function has(key) {\n                    return hasOwnProperty.call(this._object, key);\n                };\n                ObjectSeq.prototype.__iterate = function __iterate(fn, reverse) {\n                    var object = this._object;\n                    var keys = this._keys;\n                    var size = keys.length;\n                    var i = 0;\n                    while(i !== size){\n                        var key = keys[reverse ? size - ++i : i++];\n                        if (fn(object[key], key, this) === false) {\n                            break;\n                        }\n                    }\n                    return i;\n                };\n                ObjectSeq.prototype.__iterator = function __iterator(type, reverse) {\n                    var object = this._object;\n                    var keys = this._keys;\n                    var size = keys.length;\n                    var i = 0;\n                    return new Iterator(function() {\n                        if (i === size) {\n                            return iteratorDone();\n                        }\n                        var key = keys[reverse ? size - ++i : i++];\n                        return iteratorValue(type, key, object[key]);\n                    });\n                };\n                return ObjectSeq;\n            }(KeyedSeq);\n            ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;\n            var CollectionSeq = /*@__PURE__*/ function(IndexedSeq) {\n                function CollectionSeq(collection) {\n                    this._collection = collection;\n                    this.size = collection.length || collection.size;\n                }\n                if (IndexedSeq) CollectionSeq.__proto__ = IndexedSeq;\n                CollectionSeq.prototype = Object.create(IndexedSeq && IndexedSeq.prototype);\n                CollectionSeq.prototype.constructor = CollectionSeq;\n                CollectionSeq.prototype.__iterateUncached = function __iterateUncached(fn, reverse) {\n                    if (reverse) {\n                        return this.cacheResult().__iterate(fn, reverse);\n                    }\n                    var collection = this._collection;\n                    var iterator = getIterator(collection);\n                    var iterations = 0;\n                    if (isIterator(iterator)) {\n                        var step;\n                        while(!(step = iterator.next()).done){\n                            if (fn(step.value, iterations++, this) === false) {\n                                break;\n                            }\n                        }\n                    }\n                    return iterations;\n                };\n                CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached(type, reverse) {\n                    if (reverse) {\n                        return this.cacheResult().__iterator(type, reverse);\n                    }\n                    var collection = this._collection;\n                    var iterator = getIterator(collection);\n                    if (!isIterator(iterator)) {\n                        return new Iterator(iteratorDone);\n                    }\n                    var iterations = 0;\n                    return new Iterator(function() {\n                        var step = iterator.next();\n                        return step.done ? step : iteratorValue(type, iterations++, step.value);\n                    });\n                };\n                return CollectionSeq;\n            }(IndexedSeq);\n            // # pragma Helper functions\n            var EMPTY_SEQ;\n            function emptySequence() {\n                return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n            }\n            function keyedSeqFromValue(value) {\n                var seq = Array.isArray(value) ? new ArraySeq(value) : hasIterator(value) ? new CollectionSeq(value) : undefined;\n                if (seq) {\n                    return seq.fromEntrySeq();\n                }\n                if (typeof value === \"object\") {\n                    return new ObjectSeq(value);\n                }\n                throw new TypeError(\"Expected Array or collection object of [k, v] entries, or keyed object: \" + value);\n            }\n            function indexedSeqFromValue(value) {\n                var seq = maybeIndexedSeqFromValue(value);\n                if (seq) {\n                    return seq;\n                }\n                throw new TypeError(\"Expected Array or collection object of values: \" + value);\n            }\n            function seqFromValue(value) {\n                var seq = maybeIndexedSeqFromValue(value);\n                if (seq) {\n                    return seq;\n                }\n                if (typeof value === \"object\") {\n                    return new ObjectSeq(value);\n                }\n                throw new TypeError(\"Expected Array or collection object of values, or keyed object: \" + value);\n            }\n            function maybeIndexedSeqFromValue(value) {\n                return isArrayLike(value) ? new ArraySeq(value) : hasIterator(value) ? new CollectionSeq(value) : undefined;\n            }\n            var IS_MAP_SYMBOL = \"@@__IMMUTABLE_MAP__@@\";\n            function isMap(maybeMap) {\n                return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);\n            }\n            function isOrderedMap(maybeOrderedMap) {\n                return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n            }\n            function isValueObject(maybeValue) {\n                return Boolean(maybeValue && typeof maybeValue.equals === \"function\" && typeof maybeValue.hashCode === \"function\");\n            }\n            /**\n * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n *\n * NaN is considered the same as NaN, however -0 and 0 are considered the same\n * value, which is different from the algorithm described by\n * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n *\n * This is extended further to allow Objects to describe the values they\n * represent, by way of `valueOf` or `equals` (and `hashCode`).\n *\n * Note: because of this extension, the key equality of Immutable.Map and the\n * value equality of Immutable.Set will differ from ES6 Map and Set.\n *\n * ### Defining custom values\n *\n * The easiest way to describe the value an object represents is by implementing\n * `valueOf`. For example, `Date` represents a value by returning a unix\n * timestamp for `valueOf`:\n *\n *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n *     var date2 = new Date(1234567890000);\n *     date1.valueOf(); // 1234567890000\n *     assert( date1 !== date2 );\n *     assert( Immutable.is( date1, date2 ) );\n *\n * Note: overriding `valueOf` may have other implications if you use this object\n * where JavaScript expects a primitive, such as implicit string coercion.\n *\n * For more complex types, especially collections, implementing `valueOf` may\n * not be performant. An alternative is to implement `equals` and `hashCode`.\n *\n * `equals` takes another object, presumably of similar type, and returns true\n * if it is equal. Equality is symmetrical, so the same result should be\n * returned if this and the argument are flipped.\n *\n *     assert( a.equals(b) === b.equals(a) );\n *\n * `hashCode` returns a 32bit integer number representing the object which will\n * be used to determine how to store the value object in a Map or Set. You must\n * provide both or neither methods, one must not exist without the other.\n *\n * Also, an important relationship between these methods must be upheld: if two\n * values are equal, they *must* return the same hashCode. If the values are not\n * equal, they might have the same hashCode; this is called a hash collision,\n * and while undesirable for performance reasons, it is acceptable.\n *\n *     if (a.equals(b)) {\n *       assert( a.hashCode() === b.hashCode() );\n *     }\n *\n * All Immutable collections are Value Objects: they implement `equals()`\n * and `hashCode()`.\n */ function is(valueA, valueB) {\n                if (valueA === valueB || valueA !== valueA && valueB !== valueB) {\n                    return true;\n                }\n                if (!valueA || !valueB) {\n                    return false;\n                }\n                if (typeof valueA.valueOf === \"function\" && typeof valueB.valueOf === \"function\") {\n                    valueA = valueA.valueOf();\n                    valueB = valueB.valueOf();\n                    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {\n                        return true;\n                    }\n                    if (!valueA || !valueB) {\n                        return false;\n                    }\n                }\n                return !!(isValueObject(valueA) && isValueObject(valueB) && valueA.equals(valueB));\n            }\n            var imul = typeof Math.imul === \"function\" && Math.imul(0xffffffff, 2) === -2 ? Math.imul : function imul(a, b) {\n                a |= 0; // int\n                b |= 0; // int\n                var c = a & 0xffff;\n                var d = b & 0xffff;\n                // Shift by 0 fixes the sign on the high part.\n                return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0; // int\n            };\n            // v8 has an optimization for storing 31-bit signed numbers.\n            // Values which have either 00 or 11 as the high order bits qualify.\n            // This function drops the highest order bit in a signed number, maintaining\n            // the sign bit.\n            function smi(i32) {\n                return i32 >>> 1 & 0x40000000 | i32 & 0xbfffffff;\n            }\n            var defaultValueOf = Object.prototype.valueOf;\n            function hash(o) {\n                switch(typeof o){\n                    case \"boolean\":\n                        // The hash values for built-in constants are a 1 value for each 5-byte\n                        // shift region expect for the first, which encodes the value. This\n                        // reduces the odds of a hash collision for these common values.\n                        return o ? 0x42108421 : 0x42108420;\n                    case \"number\":\n                        return hashNumber(o);\n                    case \"string\":\n                        return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n                    case \"object\":\n                    case \"function\":\n                        if (o === null) {\n                            return 0x42108422;\n                        }\n                        if (typeof o.hashCode === \"function\") {\n                            // Drop any high bits from accidentally long hash codes.\n                            return smi(o.hashCode(o));\n                        }\n                        if (o.valueOf !== defaultValueOf && typeof o.valueOf === \"function\") {\n                            o = o.valueOf(o);\n                        }\n                        return hashJSObj(o);\n                    case \"undefined\":\n                        return 0x42108423;\n                    default:\n                        if (typeof o.toString === \"function\") {\n                            return hashString(o.toString());\n                        }\n                        throw new Error(\"Value type \" + typeof o + \" cannot be hashed.\");\n                }\n            }\n            // Compress arbitrarily large numbers into smi hashes.\n            function hashNumber(n) {\n                if (n !== n || n === Infinity) {\n                    return 0;\n                }\n                var hash = n | 0;\n                if (hash !== n) {\n                    hash ^= n * 0xffffffff;\n                }\n                while(n > 0xffffffff){\n                    n /= 0xffffffff;\n                    hash ^= n;\n                }\n                return smi(hash);\n            }\n            function cachedHashString(string) {\n                var hashed = stringHashCache[string];\n                if (hashed === undefined) {\n                    hashed = hashString(string);\n                    if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n                        STRING_HASH_CACHE_SIZE = 0;\n                        stringHashCache = {};\n                    }\n                    STRING_HASH_CACHE_SIZE++;\n                    stringHashCache[string] = hashed;\n                }\n                return hashed;\n            }\n            // http://jsperf.com/hashing-strings\n            function hashString(string) {\n                // This is the hash from JVM\n                // The hash code for a string is computed as\n                // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n                // where s[i] is the ith character of the string and n is the length of\n                // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n                // (exclusive) by dropping high bits.\n                var hashed = 0;\n                for(var ii = 0; ii < string.length; ii++){\n                    hashed = 31 * hashed + string.charCodeAt(ii) | 0;\n                }\n                return smi(hashed);\n            }\n            function hashJSObj(obj) {\n                var hashed;\n                if (usingWeakMap) {\n                    hashed = weakMap.get(obj);\n                    if (hashed !== undefined) {\n                        return hashed;\n                    }\n                }\n                hashed = obj[UID_HASH_KEY];\n                if (hashed !== undefined) {\n                    return hashed;\n                }\n                if (!canDefineProperty) {\n                    hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n                    if (hashed !== undefined) {\n                        return hashed;\n                    }\n                    hashed = getIENodeHash(obj);\n                    if (hashed !== undefined) {\n                        return hashed;\n                    }\n                }\n                hashed = ++objHashUID;\n                if (objHashUID & 0x40000000) {\n                    objHashUID = 0;\n                }\n                if (usingWeakMap) {\n                    weakMap.set(obj, hashed);\n                } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n                    throw new Error(\"Non-extensible objects are not allowed as keys.\");\n                } else if (canDefineProperty) {\n                    Object.defineProperty(obj, UID_HASH_KEY, {\n                        enumerable: false,\n                        configurable: false,\n                        writable: false,\n                        value: hashed\n                    });\n                } else if (obj.propertyIsEnumerable !== undefined && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n                    // Since we can't define a non-enumerable property on the object\n                    // we'll hijack one of the less-used non-enumerable properties to\n                    // save our hash on it. Since this is a function it will not show up in\n                    // `JSON.stringify` which is what we want.\n                    obj.propertyIsEnumerable = function() {\n                        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n                    };\n                    obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;\n                } else if (obj.nodeType !== undefined) {\n                    // At this point we couldn't get the IE `uniqueID` to use as a hash\n                    // and we couldn't use a non-enumerable property to exploit the\n                    // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n                    // itself.\n                    obj[UID_HASH_KEY] = hashed;\n                } else {\n                    throw new Error(\"Unable to set a non-enumerable property on object.\");\n                }\n                return hashed;\n            }\n            // Get references to ES5 object methods.\n            var isExtensible = Object.isExtensible;\n            // True if Object.defineProperty works as expected. IE8 fails this test.\n            var canDefineProperty = function() {\n                try {\n                    Object.defineProperty({}, \"@\", {});\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            }();\n            // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n            // and avoid memory leaks from the IE cloneNode bug.\n            function getIENodeHash(node) {\n                if (node && node.nodeType > 0) {\n                    switch(node.nodeType){\n                        case 1:\n                            return node.uniqueID;\n                        case 9:\n                            return node.documentElement && node.documentElement.uniqueID;\n                    }\n                }\n            }\n            // If possible, use a WeakMap.\n            var usingWeakMap = typeof WeakMap === \"function\";\n            var weakMap;\n            if (usingWeakMap) {\n                weakMap = new WeakMap();\n            }\n            var objHashUID = 0;\n            var UID_HASH_KEY = \"__immutablehash__\";\n            if (typeof Symbol === \"function\") {\n                UID_HASH_KEY = Symbol(UID_HASH_KEY);\n            }\n            var STRING_HASH_CACHE_MIN_STRLEN = 16;\n            var STRING_HASH_CACHE_MAX_SIZE = 255;\n            var STRING_HASH_CACHE_SIZE = 0;\n            var stringHashCache = {};\n            var ToKeyedSequence = /*@__PURE__*/ function(KeyedSeq$$1) {\n                function ToKeyedSequence(indexed, useKeys) {\n                    this._iter = indexed;\n                    this._useKeys = useKeys;\n                    this.size = indexed.size;\n                }\n                if (KeyedSeq$$1) ToKeyedSequence.__proto__ = KeyedSeq$$1;\n                ToKeyedSequence.prototype = Object.create(KeyedSeq$$1 && KeyedSeq$$1.prototype);\n                ToKeyedSequence.prototype.constructor = ToKeyedSequence;\n                ToKeyedSequence.prototype.get = function get(key, notSetValue) {\n                    return this._iter.get(key, notSetValue);\n                };\n                ToKeyedSequence.prototype.has = function has(key) {\n                    return this._iter.has(key);\n                };\n                ToKeyedSequence.prototype.valueSeq = function valueSeq() {\n                    return this._iter.valueSeq();\n                };\n                ToKeyedSequence.prototype.reverse = function reverse() {\n                    var this$1 = this;\n                    var reversedSequence = reverseFactory(this, true);\n                    if (!this._useKeys) {\n                        reversedSequence.valueSeq = function() {\n                            return this$1._iter.toSeq().reverse();\n                        };\n                    }\n                    return reversedSequence;\n                };\n                ToKeyedSequence.prototype.map = function map(mapper, context) {\n                    var this$1 = this;\n                    var mappedSequence = mapFactory(this, mapper, context);\n                    if (!this._useKeys) {\n                        mappedSequence.valueSeq = function() {\n                            return this$1._iter.toSeq().map(mapper, context);\n                        };\n                    }\n                    return mappedSequence;\n                };\n                ToKeyedSequence.prototype.__iterate = function __iterate(fn, reverse) {\n                    var this$1 = this;\n                    return this._iter.__iterate(function(v, k) {\n                        return fn(v, k, this$1);\n                    }, reverse);\n                };\n                ToKeyedSequence.prototype.__iterator = function __iterator(type, reverse) {\n                    return this._iter.__iterator(type, reverse);\n                };\n                return ToKeyedSequence;\n            }(KeyedSeq);\n            ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;\n            var ToIndexedSequence = /*@__PURE__*/ function(IndexedSeq$$1) {\n                function ToIndexedSequence(iter) {\n                    this._iter = iter;\n                    this.size = iter.size;\n                }\n                if (IndexedSeq$$1) ToIndexedSequence.__proto__ = IndexedSeq$$1;\n                ToIndexedSequence.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);\n                ToIndexedSequence.prototype.constructor = ToIndexedSequence;\n                ToIndexedSequence.prototype.includes = function includes(value) {\n                    return this._iter.includes(value);\n                };\n                ToIndexedSequence.prototype.__iterate = function __iterate(fn, reverse) {\n                    var this$1 = this;\n                    var i = 0;\n                    reverse && ensureSize(this);\n                    return this._iter.__iterate(function(v) {\n                        return fn(v, reverse ? this$1.size - ++i : i++, this$1);\n                    }, reverse);\n                };\n                ToIndexedSequence.prototype.__iterator = function __iterator(type, reverse) {\n                    var this$1 = this;\n                    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n                    var i = 0;\n                    reverse && ensureSize(this);\n                    return new Iterator(function() {\n                        var step = iterator.next();\n                        return step.done ? step : iteratorValue(type, reverse ? this$1.size - ++i : i++, step.value, step);\n                    });\n                };\n                return ToIndexedSequence;\n            }(IndexedSeq);\n            var ToSetSequence = /*@__PURE__*/ function(SetSeq$$1) {\n                function ToSetSequence(iter) {\n                    this._iter = iter;\n                    this.size = iter.size;\n                }\n                if (SetSeq$$1) ToSetSequence.__proto__ = SetSeq$$1;\n                ToSetSequence.prototype = Object.create(SetSeq$$1 && SetSeq$$1.prototype);\n                ToSetSequence.prototype.constructor = ToSetSequence;\n                ToSetSequence.prototype.has = function has(key) {\n                    return this._iter.includes(key);\n                };\n                ToSetSequence.prototype.__iterate = function __iterate(fn, reverse) {\n                    var this$1 = this;\n                    return this._iter.__iterate(function(v) {\n                        return fn(v, v, this$1);\n                    }, reverse);\n                };\n                ToSetSequence.prototype.__iterator = function __iterator(type, reverse) {\n                    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n                    return new Iterator(function() {\n                        var step = iterator.next();\n                        return step.done ? step : iteratorValue(type, step.value, step.value, step);\n                    });\n                };\n                return ToSetSequence;\n            }(SetSeq);\n            var FromEntriesSequence = /*@__PURE__*/ function(KeyedSeq$$1) {\n                function FromEntriesSequence(entries) {\n                    this._iter = entries;\n                    this.size = entries.size;\n                }\n                if (KeyedSeq$$1) FromEntriesSequence.__proto__ = KeyedSeq$$1;\n                FromEntriesSequence.prototype = Object.create(KeyedSeq$$1 && KeyedSeq$$1.prototype);\n                FromEntriesSequence.prototype.constructor = FromEntriesSequence;\n                FromEntriesSequence.prototype.entrySeq = function entrySeq() {\n                    return this._iter.toSeq();\n                };\n                FromEntriesSequence.prototype.__iterate = function __iterate(fn, reverse) {\n                    var this$1 = this;\n                    return this._iter.__iterate(function(entry) {\n                        // Check if entry exists first so array access doesn't throw for holes\n                        // in the parent iteration.\n                        if (entry) {\n                            validateEntry(entry);\n                            var indexedCollection = isCollection(entry);\n                            return fn(indexedCollection ? entry.get(1) : entry[1], indexedCollection ? entry.get(0) : entry[0], this$1);\n                        }\n                    }, reverse);\n                };\n                FromEntriesSequence.prototype.__iterator = function __iterator(type, reverse) {\n                    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n                    return new Iterator(function() {\n                        while(true){\n                            var step = iterator.next();\n                            if (step.done) {\n                                return step;\n                            }\n                            var entry = step.value;\n                            // Check if entry exists first so array access doesn't throw for holes\n                            // in the parent iteration.\n                            if (entry) {\n                                validateEntry(entry);\n                                var indexedCollection = isCollection(entry);\n                                return iteratorValue(type, indexedCollection ? entry.get(0) : entry[0], indexedCollection ? entry.get(1) : entry[1], step);\n                            }\n                        }\n                    });\n                };\n                return FromEntriesSequence;\n            }(KeyedSeq);\n            ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;\n            function flipFactory(collection) {\n                var flipSequence = makeSequence(collection);\n                flipSequence._iter = collection;\n                flipSequence.size = collection.size;\n                flipSequence.flip = function() {\n                    return collection;\n                };\n                flipSequence.reverse = function() {\n                    var reversedSequence = collection.reverse.apply(this); // super.reverse()\n                    reversedSequence.flip = function() {\n                        return collection.reverse();\n                    };\n                    return reversedSequence;\n                };\n                flipSequence.has = function(key) {\n                    return collection.includes(key);\n                };\n                flipSequence.includes = function(key) {\n                    return collection.has(key);\n                };\n                flipSequence.cacheResult = cacheResultThrough;\n                flipSequence.__iterateUncached = function(fn, reverse) {\n                    var this$1 = this;\n                    return collection.__iterate(function(v, k) {\n                        return fn(k, v, this$1) !== false;\n                    }, reverse);\n                };\n                flipSequence.__iteratorUncached = function(type, reverse) {\n                    if (type === ITERATE_ENTRIES) {\n                        var iterator = collection.__iterator(type, reverse);\n                        return new Iterator(function() {\n                            var step = iterator.next();\n                            if (!step.done) {\n                                var k = step.value[0];\n                                step.value[0] = step.value[1];\n                                step.value[1] = k;\n                            }\n                            return step;\n                        });\n                    }\n                    return collection.__iterator(type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES, reverse);\n                };\n                return flipSequence;\n            }\n            function mapFactory(collection, mapper, context) {\n                var mappedSequence = makeSequence(collection);\n                mappedSequence.size = collection.size;\n                mappedSequence.has = function(key) {\n                    return collection.has(key);\n                };\n                mappedSequence.get = function(key, notSetValue) {\n                    var v = collection.get(key, NOT_SET);\n                    return v === NOT_SET ? notSetValue : mapper.call(context, v, key, collection);\n                };\n                mappedSequence.__iterateUncached = function(fn, reverse) {\n                    var this$1 = this;\n                    return collection.__iterate(function(v, k, c) {\n                        return fn(mapper.call(context, v, k, c), k, this$1) !== false;\n                    }, reverse);\n                };\n                mappedSequence.__iteratorUncached = function(type, reverse) {\n                    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n                    return new Iterator(function() {\n                        var step = iterator.next();\n                        if (step.done) {\n                            return step;\n                        }\n                        var entry = step.value;\n                        var key = entry[0];\n                        return iteratorValue(type, key, mapper.call(context, entry[1], key, collection), step);\n                    });\n                };\n                return mappedSequence;\n            }\n            function reverseFactory(collection, useKeys) {\n                var this$1 = this;\n                var reversedSequence = makeSequence(collection);\n                reversedSequence._iter = collection;\n                reversedSequence.size = collection.size;\n                reversedSequence.reverse = function() {\n                    return collection;\n                };\n                if (collection.flip) {\n                    reversedSequence.flip = function() {\n                        var flipSequence = flipFactory(collection);\n                        flipSequence.reverse = function() {\n                            return collection.flip();\n                        };\n                        return flipSequence;\n                    };\n                }\n                reversedSequence.get = function(key, notSetValue) {\n                    return collection.get(useKeys ? key : -1 - key, notSetValue);\n                };\n                reversedSequence.has = function(key) {\n                    return collection.has(useKeys ? key : -1 - key);\n                };\n                reversedSequence.includes = function(value) {\n                    return collection.includes(value);\n                };\n                reversedSequence.cacheResult = cacheResultThrough;\n                reversedSequence.__iterate = function(fn, reverse) {\n                    var this$1 = this;\n                    var i = 0;\n                    reverse && ensureSize(collection);\n                    return collection.__iterate(function(v, k) {\n                        return fn(v, useKeys ? k : reverse ? this$1.size - ++i : i++, this$1);\n                    }, !reverse);\n                };\n                reversedSequence.__iterator = function(type, reverse) {\n                    var i = 0;\n                    reverse && ensureSize(collection);\n                    var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);\n                    return new Iterator(function() {\n                        var step = iterator.next();\n                        if (step.done) {\n                            return step;\n                        }\n                        var entry = step.value;\n                        return iteratorValue(type, useKeys ? entry[0] : reverse ? this$1.size - ++i : i++, entry[1], step);\n                    });\n                };\n                return reversedSequence;\n            }\n            function filterFactory(collection, predicate, context, useKeys) {\n                var filterSequence = makeSequence(collection);\n                if (useKeys) {\n                    filterSequence.has = function(key) {\n                        var v = collection.get(key, NOT_SET);\n                        return v !== NOT_SET && !!predicate.call(context, v, key, collection);\n                    };\n                    filterSequence.get = function(key, notSetValue) {\n                        var v = collection.get(key, NOT_SET);\n                        return v !== NOT_SET && predicate.call(context, v, key, collection) ? v : notSetValue;\n                    };\n                }\n                filterSequence.__iterateUncached = function(fn, reverse) {\n                    var this$1 = this;\n                    var iterations = 0;\n                    collection.__iterate(function(v, k, c) {\n                        if (predicate.call(context, v, k, c)) {\n                            iterations++;\n                            return fn(v, useKeys ? k : iterations - 1, this$1);\n                        }\n                    }, reverse);\n                    return iterations;\n                };\n                filterSequence.__iteratorUncached = function(type, reverse) {\n                    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n                    var iterations = 0;\n                    return new Iterator(function() {\n                        while(true){\n                            var step = iterator.next();\n                            if (step.done) {\n                                return step;\n                            }\n                            var entry = step.value;\n                            var key = entry[0];\n                            var value = entry[1];\n                            if (predicate.call(context, value, key, collection)) {\n                                return iteratorValue(type, useKeys ? key : iterations++, value, step);\n                            }\n                        }\n                    });\n                };\n                return filterSequence;\n            }\n            function countByFactory(collection, grouper, context) {\n                var groups = Map().asMutable();\n                collection.__iterate(function(v, k) {\n                    groups.update(grouper.call(context, v, k, collection), 0, function(a) {\n                        return a + 1;\n                    });\n                });\n                return groups.asImmutable();\n            }\n            function groupByFactory(collection, grouper, context) {\n                var isKeyedIter = isKeyed(collection);\n                var groups = (isOrdered(collection) ? OrderedMap() : Map()).asMutable();\n                collection.__iterate(function(v, k) {\n                    groups.update(grouper.call(context, v, k, collection), function(a) {\n                        return a = a || [], a.push(isKeyedIter ? [\n                            k,\n                            v\n                        ] : v), a;\n                    });\n                });\n                var coerce = collectionClass(collection);\n                return groups.map(function(arr) {\n                    return reify(collection, coerce(arr));\n                }).asImmutable();\n            }\n            function sliceFactory(collection, begin, end, useKeys) {\n                var originalSize = collection.size;\n                if (wholeSlice(begin, end, originalSize)) {\n                    return collection;\n                }\n                var resolvedBegin = resolveBegin(begin, originalSize);\n                var resolvedEnd = resolveEnd(end, originalSize);\n                // begin or end will be NaN if they were provided as negative numbers and\n                // this collection's size is unknown. In that case, cache first so there is\n                // a known size and these do not resolve to NaN.\n                if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n                    return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);\n                }\n                // Note: resolvedEnd is undefined when the original sequence's length is\n                // unknown and this slice did not supply an end and should contain all\n                // elements after resolvedBegin.\n                // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n                var resolvedSize = resolvedEnd - resolvedBegin;\n                var sliceSize;\n                if (resolvedSize === resolvedSize) {\n                    sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n                }\n                var sliceSeq = makeSequence(collection);\n                // If collection.size is undefined, the size of the realized sliceSeq is\n                // unknown at this point unless the number of items to slice is 0\n                sliceSeq.size = sliceSize === 0 ? sliceSize : collection.size && sliceSize || undefined;\n                if (!useKeys && isSeq(collection) && sliceSize >= 0) {\n                    sliceSeq.get = function(index, notSetValue) {\n                        index = wrapIndex(this, index);\n                        return index >= 0 && index < sliceSize ? collection.get(index + resolvedBegin, notSetValue) : notSetValue;\n                    };\n                }\n                sliceSeq.__iterateUncached = function(fn, reverse) {\n                    var this$1 = this;\n                    if (sliceSize === 0) {\n                        return 0;\n                    }\n                    if (reverse) {\n                        return this.cacheResult().__iterate(fn, reverse);\n                    }\n                    var skipped = 0;\n                    var isSkipping = true;\n                    var iterations = 0;\n                    collection.__iterate(function(v, k) {\n                        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n                            iterations++;\n                            return fn(v, useKeys ? k : iterations - 1, this$1) !== false && iterations !== sliceSize;\n                        }\n                    });\n                    return iterations;\n                };\n                sliceSeq.__iteratorUncached = function(type, reverse) {\n                    if (sliceSize !== 0 && reverse) {\n                        return this.cacheResult().__iterator(type, reverse);\n                    }\n                    // Don't bother instantiating parent iterator if taking 0.\n                    if (sliceSize === 0) {\n                        return new Iterator(iteratorDone);\n                    }\n                    var iterator = collection.__iterator(type, reverse);\n                    var skipped = 0;\n                    var iterations = 0;\n                    return new Iterator(function() {\n                        while(skipped++ < resolvedBegin){\n                            iterator.next();\n                        }\n                        if (++iterations > sliceSize) {\n                            return iteratorDone();\n                        }\n                        var step = iterator.next();\n                        if (useKeys || type === ITERATE_VALUES || step.done) {\n                            return step;\n                        }\n                        if (type === ITERATE_KEYS) {\n                            return iteratorValue(type, iterations - 1, undefined, step);\n                        }\n                        return iteratorValue(type, iterations - 1, step.value[1], step);\n                    });\n                };\n                return sliceSeq;\n            }\n            function takeWhileFactory(collection, predicate, context) {\n                var takeSequence = makeSequence(collection);\n                takeSequence.__iterateUncached = function(fn, reverse) {\n                    var this$1 = this;\n                    if (reverse) {\n                        return this.cacheResult().__iterate(fn, reverse);\n                    }\n                    var iterations = 0;\n                    collection.__iterate(function(v, k, c) {\n                        return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1);\n                    });\n                    return iterations;\n                };\n                takeSequence.__iteratorUncached = function(type, reverse) {\n                    var this$1 = this;\n                    if (reverse) {\n                        return this.cacheResult().__iterator(type, reverse);\n                    }\n                    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n                    var iterating = true;\n                    return new Iterator(function() {\n                        if (!iterating) {\n                            return iteratorDone();\n                        }\n                        var step = iterator.next();\n                        if (step.done) {\n                            return step;\n                        }\n                        var entry = step.value;\n                        var k = entry[0];\n                        var v = entry[1];\n                        if (!predicate.call(context, v, k, this$1)) {\n                            iterating = false;\n                            return iteratorDone();\n                        }\n                        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n                    });\n                };\n                return takeSequence;\n            }\n            function skipWhileFactory(collection, predicate, context, useKeys) {\n                var skipSequence = makeSequence(collection);\n                skipSequence.__iterateUncached = function(fn, reverse) {\n                    var this$1 = this;\n                    if (reverse) {\n                        return this.cacheResult().__iterate(fn, reverse);\n                    }\n                    var isSkipping = true;\n                    var iterations = 0;\n                    collection.__iterate(function(v, k, c) {\n                        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n                            iterations++;\n                            return fn(v, useKeys ? k : iterations - 1, this$1);\n                        }\n                    });\n                    return iterations;\n                };\n                skipSequence.__iteratorUncached = function(type, reverse) {\n                    var this$1 = this;\n                    if (reverse) {\n                        return this.cacheResult().__iterator(type, reverse);\n                    }\n                    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n                    var skipping = true;\n                    var iterations = 0;\n                    return new Iterator(function() {\n                        var step;\n                        var k;\n                        var v;\n                        do {\n                            step = iterator.next();\n                            if (step.done) {\n                                if (useKeys || type === ITERATE_VALUES) {\n                                    return step;\n                                }\n                                if (type === ITERATE_KEYS) {\n                                    return iteratorValue(type, iterations++, undefined, step);\n                                }\n                                return iteratorValue(type, iterations++, step.value[1], step);\n                            }\n                            var entry = step.value;\n                            k = entry[0];\n                            v = entry[1];\n                            skipping && (skipping = predicate.call(context, v, k, this$1));\n                        }while (skipping);\n                        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n                    });\n                };\n                return skipSequence;\n            }\n            function concatFactory(collection, values) {\n                var isKeyedCollection = isKeyed(collection);\n                var iters = [\n                    collection\n                ].concat(values).map(function(v) {\n                    if (!isCollection(v)) {\n                        v = isKeyedCollection ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [\n                            v\n                        ]);\n                    } else if (isKeyedCollection) {\n                        v = KeyedCollection(v);\n                    }\n                    return v;\n                }).filter(function(v) {\n                    return v.size !== 0;\n                });\n                if (iters.length === 0) {\n                    return collection;\n                }\n                if (iters.length === 1) {\n                    var singleton = iters[0];\n                    if (singleton === collection || isKeyedCollection && isKeyed(singleton) || isIndexed(collection) && isIndexed(singleton)) {\n                        return singleton;\n                    }\n                }\n                var concatSeq = new ArraySeq(iters);\n                if (isKeyedCollection) {\n                    concatSeq = concatSeq.toKeyedSeq();\n                } else if (!isIndexed(collection)) {\n                    concatSeq = concatSeq.toSetSeq();\n                }\n                concatSeq = concatSeq.flatten(true);\n                concatSeq.size = iters.reduce(function(sum, seq) {\n                    if (sum !== undefined) {\n                        var size = seq.size;\n                        if (size !== undefined) {\n                            return sum + size;\n                        }\n                    }\n                }, 0);\n                return concatSeq;\n            }\n            function flattenFactory(collection, depth, useKeys) {\n                var flatSequence = makeSequence(collection);\n                flatSequence.__iterateUncached = function(fn, reverse) {\n                    if (reverse) {\n                        return this.cacheResult().__iterate(fn, reverse);\n                    }\n                    var iterations = 0;\n                    var stopped = false;\n                    function flatDeep(iter, currentDepth) {\n                        iter.__iterate(function(v, k) {\n                            if ((!depth || currentDepth < depth) && isCollection(v)) {\n                                flatDeep(v, currentDepth + 1);\n                            } else {\n                                iterations++;\n                                if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {\n                                    stopped = true;\n                                }\n                            }\n                            return !stopped;\n                        }, reverse);\n                    }\n                    flatDeep(collection, 0);\n                    return iterations;\n                };\n                flatSequence.__iteratorUncached = function(type, reverse) {\n                    if (reverse) {\n                        return this.cacheResult().__iterator(type, reverse);\n                    }\n                    var iterator = collection.__iterator(type, reverse);\n                    var stack = [];\n                    var iterations = 0;\n                    return new Iterator(function() {\n                        while(iterator){\n                            var step = iterator.next();\n                            if (step.done !== false) {\n                                iterator = stack.pop();\n                                continue;\n                            }\n                            var v = step.value;\n                            if (type === ITERATE_ENTRIES) {\n                                v = v[1];\n                            }\n                            if ((!depth || stack.length < depth) && isCollection(v)) {\n                                stack.push(iterator);\n                                iterator = v.__iterator(type, reverse);\n                            } else {\n                                return useKeys ? step : iteratorValue(type, iterations++, v, step);\n                            }\n                        }\n                        return iteratorDone();\n                    });\n                };\n                return flatSequence;\n            }\n            function flatMapFactory(collection, mapper, context) {\n                var coerce = collectionClass(collection);\n                return collection.toSeq().map(function(v, k) {\n                    return coerce(mapper.call(context, v, k, collection));\n                }).flatten(true);\n            }\n            function interposeFactory(collection, separator) {\n                var interposedSequence = makeSequence(collection);\n                interposedSequence.size = collection.size && collection.size * 2 - 1;\n                interposedSequence.__iterateUncached = function(fn, reverse) {\n                    var this$1 = this;\n                    var iterations = 0;\n                    collection.__iterate(function(v) {\n                        return (!iterations || fn(separator, iterations++, this$1) !== false) && fn(v, iterations++, this$1) !== false;\n                    }, reverse);\n                    return iterations;\n                };\n                interposedSequence.__iteratorUncached = function(type, reverse) {\n                    var iterator = collection.__iterator(ITERATE_VALUES, reverse);\n                    var iterations = 0;\n                    var step;\n                    return new Iterator(function() {\n                        if (!step || iterations % 2) {\n                            step = iterator.next();\n                            if (step.done) {\n                                return step;\n                            }\n                        }\n                        return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);\n                    });\n                };\n                return interposedSequence;\n            }\n            function sortFactory(collection, comparator, mapper) {\n                if (!comparator) {\n                    comparator = defaultComparator;\n                }\n                var isKeyedCollection = isKeyed(collection);\n                var index = 0;\n                var entries = collection.toSeq().map(function(v, k) {\n                    return [\n                        k,\n                        v,\n                        index++,\n                        mapper ? mapper(v, k, collection) : v\n                    ];\n                }).valueSeq().toArray();\n                entries.sort(function(a, b) {\n                    return comparator(a[3], b[3]) || a[2] - b[2];\n                }).forEach(isKeyedCollection ? function(v, i) {\n                    entries[i].length = 2;\n                } : function(v, i) {\n                    entries[i] = v[1];\n                });\n                return isKeyedCollection ? KeyedSeq(entries) : isIndexed(collection) ? IndexedSeq(entries) : SetSeq(entries);\n            }\n            function maxFactory(collection, comparator, mapper) {\n                if (!comparator) {\n                    comparator = defaultComparator;\n                }\n                if (mapper) {\n                    var entry = collection.toSeq().map(function(v, k) {\n                        return [\n                            v,\n                            mapper(v, k, collection)\n                        ];\n                    }).reduce(function(a, b) {\n                        return maxCompare(comparator, a[1], b[1]) ? b : a;\n                    });\n                    return entry && entry[0];\n                }\n                return collection.reduce(function(a, b) {\n                    return maxCompare(comparator, a, b) ? b : a;\n                });\n            }\n            function maxCompare(comparator, a, b) {\n                var comp = comparator(b, a);\n                // b is considered the new max if the comparator declares them equal, but\n                // they are not equal and b is in fact a nullish value.\n                return comp === 0 && b !== a && (b === undefined || b === null || b !== b) || comp > 0;\n            }\n            function zipWithFactory(keyIter, zipper, iters, zipAll) {\n                var zipSequence = makeSequence(keyIter);\n                var sizes = new ArraySeq(iters).map(function(i) {\n                    return i.size;\n                });\n                zipSequence.size = zipAll ? sizes.max() : sizes.min();\n                // Note: this a generic base implementation of __iterate in terms of\n                // __iterator which may be more generically useful in the future.\n                zipSequence.__iterate = function(fn, reverse) {\n                    /* generic:\n    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      iterations++;\n      if (fn(step.value[1], step.value[0], this) === false) {\n        break;\n      }\n    }\n    return iterations;\n    */ // indexed:\n                    var iterator = this.__iterator(ITERATE_VALUES, reverse);\n                    var step;\n                    var iterations = 0;\n                    while(!(step = iterator.next()).done){\n                        if (fn(step.value, iterations++, this) === false) {\n                            break;\n                        }\n                    }\n                    return iterations;\n                };\n                zipSequence.__iteratorUncached = function(type, reverse) {\n                    var iterators = iters.map(function(i) {\n                        return i = Collection(i), getIterator(reverse ? i.reverse() : i);\n                    });\n                    var iterations = 0;\n                    var isDone = false;\n                    return new Iterator(function() {\n                        var steps;\n                        if (!isDone) {\n                            steps = iterators.map(function(i) {\n                                return i.next();\n                            });\n                            isDone = zipAll ? steps.every(function(s) {\n                                return s.done;\n                            }) : steps.some(function(s) {\n                                return s.done;\n                            });\n                        }\n                        if (isDone) {\n                            return iteratorDone();\n                        }\n                        return iteratorValue(type, iterations++, zipper.apply(null, steps.map(function(s) {\n                            return s.value;\n                        })));\n                    });\n                };\n                return zipSequence;\n            }\n            // #pragma Helper Functions\n            function reify(iter, seq) {\n                return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);\n            }\n            function validateEntry(entry) {\n                if (entry !== Object(entry)) {\n                    throw new TypeError(\"Expected [K, V] tuple: \" + entry);\n                }\n            }\n            function collectionClass(collection) {\n                return isKeyed(collection) ? KeyedCollection : isIndexed(collection) ? IndexedCollection : SetCollection;\n            }\n            function makeSequence(collection) {\n                return Object.create((isKeyed(collection) ? KeyedSeq : isIndexed(collection) ? IndexedSeq : SetSeq).prototype);\n            }\n            function cacheResultThrough() {\n                if (this._iter.cacheResult) {\n                    this._iter.cacheResult();\n                    this.size = this._iter.size;\n                    return this;\n                }\n                return Seq.prototype.cacheResult.call(this);\n            }\n            function defaultComparator(a, b) {\n                if (a === undefined && b === undefined) {\n                    return 0;\n                }\n                if (a === undefined) {\n                    return 1;\n                }\n                if (b === undefined) {\n                    return -1;\n                }\n                return a > b ? 1 : a < b ? -1 : 0;\n            }\n            // http://jsperf.com/copy-array-inline\n            function arrCopy(arr, offset) {\n                offset = offset || 0;\n                var len = Math.max(0, arr.length - offset);\n                var newArr = new Array(len);\n                for(var ii = 0; ii < len; ii++){\n                    newArr[ii] = arr[ii + offset];\n                }\n                return newArr;\n            }\n            function invariant(condition, error) {\n                if (!condition) {\n                    throw new Error(error);\n                }\n            }\n            function assertNotInfinite(size) {\n                invariant(size !== Infinity, \"Cannot perform this action with an infinite size.\");\n            }\n            function coerceKeyPath(keyPath) {\n                if (isArrayLike(keyPath) && typeof keyPath !== \"string\") {\n                    return keyPath;\n                }\n                if (isOrdered(keyPath)) {\n                    return keyPath.toArray();\n                }\n                throw new TypeError(\"Invalid keyPath: expected Ordered Collection or Array: \" + keyPath);\n            }\n            function isPlainObj(value) {\n                return value && (typeof value.constructor !== \"function\" || value.constructor.name === \"Object\");\n            }\n            /**\n * Returns true if the value is a potentially-persistent data structure, either\n * provided by Immutable.js or a plain Array or Object.\n */ function isDataStructure(value) {\n                return typeof value === \"object\" && (isImmutable(value) || Array.isArray(value) || isPlainObj(value));\n            }\n            /**\n * Converts a value to a string, adding quotes if a string was provided.\n */ function quoteString(value) {\n                try {\n                    return typeof value === \"string\" ? JSON.stringify(value) : String(value);\n                } catch (_ignoreError) {\n                    return JSON.stringify(value);\n                }\n            }\n            function has(collection, key) {\n                return isImmutable(collection) ? collection.has(key) : isDataStructure(collection) && hasOwnProperty.call(collection, key);\n            }\n            function get(collection, key, notSetValue) {\n                return isImmutable(collection) ? collection.get(key, notSetValue) : !has(collection, key) ? notSetValue : typeof collection.get === \"function\" ? collection.get(key) : collection[key];\n            }\n            function shallowCopy(from) {\n                if (Array.isArray(from)) {\n                    return arrCopy(from);\n                }\n                var to = {};\n                for(var key in from){\n                    if (hasOwnProperty.call(from, key)) {\n                        to[key] = from[key];\n                    }\n                }\n                return to;\n            }\n            function remove(collection, key) {\n                if (!isDataStructure(collection)) {\n                    throw new TypeError(\"Cannot update non-data-structure value: \" + collection);\n                }\n                if (isImmutable(collection)) {\n                    if (!collection.remove) {\n                        throw new TypeError(\"Cannot update immutable value without .remove() method: \" + collection);\n                    }\n                    return collection.remove(key);\n                }\n                if (!hasOwnProperty.call(collection, key)) {\n                    return collection;\n                }\n                var collectionCopy = shallowCopy(collection);\n                if (Array.isArray(collectionCopy)) {\n                    collectionCopy.splice(key, 1);\n                } else {\n                    delete collectionCopy[key];\n                }\n                return collectionCopy;\n            }\n            function set(collection, key, value) {\n                if (!isDataStructure(collection)) {\n                    throw new TypeError(\"Cannot update non-data-structure value: \" + collection);\n                }\n                if (isImmutable(collection)) {\n                    if (!collection.set) {\n                        throw new TypeError(\"Cannot update immutable value without .set() method: \" + collection);\n                    }\n                    return collection.set(key, value);\n                }\n                if (hasOwnProperty.call(collection, key) && value === collection[key]) {\n                    return collection;\n                }\n                var collectionCopy = shallowCopy(collection);\n                collectionCopy[key] = value;\n                return collectionCopy;\n            }\n            function updateIn(collection, keyPath, notSetValue, updater) {\n                if (!updater) {\n                    updater = notSetValue;\n                    notSetValue = undefined;\n                }\n                var updatedValue = updateInDeeply(isImmutable(collection), collection, coerceKeyPath(keyPath), 0, notSetValue, updater);\n                return updatedValue === NOT_SET ? notSetValue : updatedValue;\n            }\n            function updateInDeeply(inImmutable, existing, keyPath, i, notSetValue, updater) {\n                var wasNotSet = existing === NOT_SET;\n                if (i === keyPath.length) {\n                    var existingValue = wasNotSet ? notSetValue : existing;\n                    var newValue = updater(existingValue);\n                    return newValue === existingValue ? existing : newValue;\n                }\n                if (!wasNotSet && !isDataStructure(existing)) {\n                    throw new TypeError(\"Cannot update within non-data-structure value in path [\" + keyPath.slice(0, i).map(quoteString) + \"]: \" + existing);\n                }\n                var key = keyPath[i];\n                var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);\n                var nextUpdated = updateInDeeply(nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting), nextExisting, keyPath, i + 1, notSetValue, updater);\n                return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? remove(existing, key) : set(wasNotSet ? inImmutable ? emptyMap() : {} : existing, key, nextUpdated);\n            }\n            function setIn(collection, keyPath, value) {\n                return updateIn(collection, keyPath, NOT_SET, function() {\n                    return value;\n                });\n            }\n            function setIn$1(keyPath, v) {\n                return setIn(this, keyPath, v);\n            }\n            function removeIn(collection, keyPath) {\n                return updateIn(collection, keyPath, function() {\n                    return NOT_SET;\n                });\n            }\n            function deleteIn(keyPath) {\n                return removeIn(this, keyPath);\n            }\n            function update(collection, key, notSetValue, updater) {\n                return updateIn(collection, [\n                    key\n                ], notSetValue, updater);\n            }\n            function update$1(key, notSetValue, updater) {\n                return arguments.length === 1 ? key(this) : update(this, key, notSetValue, updater);\n            }\n            function updateIn$1(keyPath, notSetValue, updater) {\n                return updateIn(this, keyPath, notSetValue, updater);\n            }\n            function merge() {\n                var iters = [], len = arguments.length;\n                while(len--)iters[len] = arguments[len];\n                return mergeIntoKeyedWith(this, iters);\n            }\n            function mergeWith(merger) {\n                var iters = [], len = arguments.length - 1;\n                while(len-- > 0)iters[len] = arguments[len + 1];\n                if (typeof merger !== \"function\") {\n                    throw new TypeError(\"Invalid merger function: \" + merger);\n                }\n                return mergeIntoKeyedWith(this, iters, merger);\n            }\n            function mergeIntoKeyedWith(collection, collections, merger) {\n                var iters = [];\n                for(var ii = 0; ii < collections.length; ii++){\n                    var collection$1 = KeyedCollection(collections[ii]);\n                    if (collection$1.size !== 0) {\n                        iters.push(collection$1);\n                    }\n                }\n                if (iters.length === 0) {\n                    return collection;\n                }\n                if (collection.toSeq().size === 0 && !collection.__ownerID && iters.length === 1) {\n                    return collection.constructor(iters[0]);\n                }\n                return collection.withMutations(function(collection) {\n                    var mergeIntoCollection = merger ? function(value, key) {\n                        update(collection, key, NOT_SET, function(oldVal) {\n                            return oldVal === NOT_SET ? value : merger(oldVal, value, key);\n                        });\n                    } : function(value, key) {\n                        collection.set(key, value);\n                    };\n                    for(var ii = 0; ii < iters.length; ii++){\n                        iters[ii].forEach(mergeIntoCollection);\n                    }\n                });\n            }\n            function merge$1(collection) {\n                var sources = [], len = arguments.length - 1;\n                while(len-- > 0)sources[len] = arguments[len + 1];\n                return mergeWithSources(collection, sources);\n            }\n            function mergeWith$1(merger, collection) {\n                var sources = [], len = arguments.length - 2;\n                while(len-- > 0)sources[len] = arguments[len + 2];\n                return mergeWithSources(collection, sources, merger);\n            }\n            function mergeDeep(collection) {\n                var sources = [], len = arguments.length - 1;\n                while(len-- > 0)sources[len] = arguments[len + 1];\n                return mergeDeepWithSources(collection, sources);\n            }\n            function mergeDeepWith(merger, collection) {\n                var sources = [], len = arguments.length - 2;\n                while(len-- > 0)sources[len] = arguments[len + 2];\n                return mergeDeepWithSources(collection, sources, merger);\n            }\n            function mergeDeepWithSources(collection, sources, merger) {\n                return mergeWithSources(collection, sources, deepMergerWith(merger));\n            }\n            function mergeWithSources(collection, sources, merger) {\n                if (!isDataStructure(collection)) {\n                    throw new TypeError(\"Cannot merge into non-data-structure value: \" + collection);\n                }\n                if (isImmutable(collection)) {\n                    return typeof merger === \"function\" && collection.mergeWith ? collection.mergeWith.apply(collection, [\n                        merger\n                    ].concat(sources)) : collection.merge ? collection.merge.apply(collection, sources) : collection.concat.apply(collection, sources);\n                }\n                var isArray = Array.isArray(collection);\n                var merged = collection;\n                var Collection$$1 = isArray ? IndexedCollection : KeyedCollection;\n                var mergeItem = isArray ? function(value) {\n                    // Copy on write\n                    if (merged === collection) {\n                        merged = shallowCopy(merged);\n                    }\n                    merged.push(value);\n                } : function(value, key) {\n                    var hasVal = hasOwnProperty.call(merged, key);\n                    var nextVal = hasVal && merger ? merger(merged[key], value, key) : value;\n                    if (!hasVal || nextVal !== merged[key]) {\n                        // Copy on write\n                        if (merged === collection) {\n                            merged = shallowCopy(merged);\n                        }\n                        merged[key] = nextVal;\n                    }\n                };\n                for(var i = 0; i < sources.length; i++){\n                    Collection$$1(sources[i]).forEach(mergeItem);\n                }\n                return merged;\n            }\n            function deepMergerWith(merger) {\n                function deepMerger(oldValue, newValue, key) {\n                    return isDataStructure(oldValue) && isDataStructure(newValue) ? mergeWithSources(oldValue, [\n                        newValue\n                    ], deepMerger) : merger ? merger(oldValue, newValue, key) : newValue;\n                }\n                return deepMerger;\n            }\n            function mergeDeep$1() {\n                var iters = [], len = arguments.length;\n                while(len--)iters[len] = arguments[len];\n                return mergeDeepWithSources(this, iters);\n            }\n            function mergeDeepWith$1(merger) {\n                var iters = [], len = arguments.length - 1;\n                while(len-- > 0)iters[len] = arguments[len + 1];\n                return mergeDeepWithSources(this, iters, merger);\n            }\n            function mergeIn(keyPath) {\n                var iters = [], len = arguments.length - 1;\n                while(len-- > 0)iters[len] = arguments[len + 1];\n                return updateIn(this, keyPath, emptyMap(), function(m) {\n                    return mergeWithSources(m, iters);\n                });\n            }\n            function mergeDeepIn(keyPath) {\n                var iters = [], len = arguments.length - 1;\n                while(len-- > 0)iters[len] = arguments[len + 1];\n                return updateIn(this, keyPath, emptyMap(), function(m) {\n                    return mergeDeepWithSources(m, iters);\n                });\n            }\n            function withMutations(fn) {\n                var mutable = this.asMutable();\n                fn(mutable);\n                return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n            }\n            function asMutable() {\n                return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n            }\n            function asImmutable() {\n                return this.__ensureOwner();\n            }\n            function wasAltered() {\n                return this.__altered;\n            }\n            var Map = /*@__PURE__*/ function(KeyedCollection$$1) {\n                function Map(value) {\n                    return value === null || value === undefined ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function(map) {\n                        var iter = KeyedCollection$$1(value);\n                        assertNotInfinite(iter.size);\n                        iter.forEach(function(v, k) {\n                            return map.set(k, v);\n                        });\n                    });\n                }\n                if (KeyedCollection$$1) Map.__proto__ = KeyedCollection$$1;\n                Map.prototype = Object.create(KeyedCollection$$1 && KeyedCollection$$1.prototype);\n                Map.prototype.constructor = Map;\n                Map.of = function of() {\n                    var keyValues = [], len = arguments.length;\n                    while(len--)keyValues[len] = arguments[len];\n                    return emptyMap().withMutations(function(map) {\n                        for(var i = 0; i < keyValues.length; i += 2){\n                            if (i + 1 >= keyValues.length) {\n                                throw new Error(\"Missing value for key: \" + keyValues[i]);\n                            }\n                            map.set(keyValues[i], keyValues[i + 1]);\n                        }\n                    });\n                };\n                Map.prototype.toString = function toString() {\n                    return this.__toString(\"Map {\", \"}\");\n                };\n                // @pragma Access\n                Map.prototype.get = function get(k, notSetValue) {\n                    return this._root ? this._root.get(0, undefined, k, notSetValue) : notSetValue;\n                };\n                // @pragma Modification\n                Map.prototype.set = function set(k, v) {\n                    return updateMap(this, k, v);\n                };\n                Map.prototype.remove = function remove(k) {\n                    return updateMap(this, k, NOT_SET);\n                };\n                Map.prototype.deleteAll = function deleteAll(keys) {\n                    var collection = Collection(keys);\n                    if (collection.size === 0) {\n                        return this;\n                    }\n                    return this.withMutations(function(map) {\n                        collection.forEach(function(key) {\n                            return map.remove(key);\n                        });\n                    });\n                };\n                Map.prototype.clear = function clear() {\n                    if (this.size === 0) {\n                        return this;\n                    }\n                    if (this.__ownerID) {\n                        this.size = 0;\n                        this._root = null;\n                        this.__hash = undefined;\n                        this.__altered = true;\n                        return this;\n                    }\n                    return emptyMap();\n                };\n                // @pragma Composition\n                Map.prototype.sort = function sort(comparator) {\n                    // Late binding\n                    return OrderedMap(sortFactory(this, comparator));\n                };\n                Map.prototype.sortBy = function sortBy(mapper, comparator) {\n                    // Late binding\n                    return OrderedMap(sortFactory(this, comparator, mapper));\n                };\n                Map.prototype.map = function map(mapper, context) {\n                    return this.withMutations(function(map) {\n                        map.forEach(function(value, key) {\n                            map.set(key, mapper.call(context, value, key, map));\n                        });\n                    });\n                };\n                // @pragma Mutability\n                Map.prototype.__iterator = function __iterator(type, reverse) {\n                    return new MapIterator(this, type, reverse);\n                };\n                Map.prototype.__iterate = function __iterate(fn, reverse) {\n                    var this$1 = this;\n                    var iterations = 0;\n                    this._root && this._root.iterate(function(entry) {\n                        iterations++;\n                        return fn(entry[1], entry[0], this$1);\n                    }, reverse);\n                    return iterations;\n                };\n                Map.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n                    if (ownerID === this.__ownerID) {\n                        return this;\n                    }\n                    if (!ownerID) {\n                        if (this.size === 0) {\n                            return emptyMap();\n                        }\n                        this.__ownerID = ownerID;\n                        this.__altered = false;\n                        return this;\n                    }\n                    return makeMap(this.size, this._root, ownerID, this.__hash);\n                };\n                return Map;\n            }(KeyedCollection);\n            Map.isMap = isMap;\n            var MapPrototype = Map.prototype;\n            MapPrototype[IS_MAP_SYMBOL] = true;\n            MapPrototype[DELETE] = MapPrototype.remove;\n            MapPrototype.removeAll = MapPrototype.deleteAll;\n            MapPrototype.setIn = setIn$1;\n            MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;\n            MapPrototype.update = update$1;\n            MapPrototype.updateIn = updateIn$1;\n            MapPrototype.merge = MapPrototype.concat = merge;\n            MapPrototype.mergeWith = mergeWith;\n            MapPrototype.mergeDeep = mergeDeep$1;\n            MapPrototype.mergeDeepWith = mergeDeepWith$1;\n            MapPrototype.mergeIn = mergeIn;\n            MapPrototype.mergeDeepIn = mergeDeepIn;\n            MapPrototype.withMutations = withMutations;\n            MapPrototype.wasAltered = wasAltered;\n            MapPrototype.asImmutable = asImmutable;\n            MapPrototype[\"@@transducer/init\"] = MapPrototype.asMutable = asMutable;\n            MapPrototype[\"@@transducer/step\"] = function(result, arr) {\n                return result.set(arr[0], arr[1]);\n            };\n            MapPrototype[\"@@transducer/result\"] = function(obj) {\n                return obj.asImmutable();\n            };\n            // #pragma Trie Nodes\n            var ArrayMapNode = function ArrayMapNode(ownerID, entries) {\n                this.ownerID = ownerID;\n                this.entries = entries;\n            };\n            ArrayMapNode.prototype.get = function get(shift, keyHash, key, notSetValue) {\n                var entries = this.entries;\n                for(var ii = 0, len = entries.length; ii < len; ii++){\n                    if (is(key, entries[ii][0])) {\n                        return entries[ii][1];\n                    }\n                }\n                return notSetValue;\n            };\n            ArrayMapNode.prototype.update = function update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n                var removed = value === NOT_SET;\n                var entries = this.entries;\n                var idx = 0;\n                var len = entries.length;\n                for(; idx < len; idx++){\n                    if (is(key, entries[idx][0])) {\n                        break;\n                    }\n                }\n                var exists = idx < len;\n                if (exists ? entries[idx][1] === value : removed) {\n                    return this;\n                }\n                SetRef(didAlter);\n                (removed || !exists) && SetRef(didChangeSize);\n                if (removed && entries.length === 1) {\n                    return; // undefined\n                }\n                if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n                    return createNodes(ownerID, entries, key, value);\n                }\n                var isEditable = ownerID && ownerID === this.ownerID;\n                var newEntries = isEditable ? entries : arrCopy(entries);\n                if (exists) {\n                    if (removed) {\n                        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();\n                    } else {\n                        newEntries[idx] = [\n                            key,\n                            value\n                        ];\n                    }\n                } else {\n                    newEntries.push([\n                        key,\n                        value\n                    ]);\n                }\n                if (isEditable) {\n                    this.entries = newEntries;\n                    return this;\n                }\n                return new ArrayMapNode(ownerID, newEntries);\n            };\n            var BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {\n                this.ownerID = ownerID;\n                this.bitmap = bitmap;\n                this.nodes = nodes;\n            };\n            BitmapIndexedNode.prototype.get = function get(shift, keyHash, key, notSetValue) {\n                if (keyHash === undefined) {\n                    keyHash = hash(key);\n                }\n                var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n                var bitmap = this.bitmap;\n                return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);\n            };\n            BitmapIndexedNode.prototype.update = function update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n                if (keyHash === undefined) {\n                    keyHash = hash(key);\n                }\n                var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n                var bit = 1 << keyHashFrag;\n                var bitmap = this.bitmap;\n                var exists = (bitmap & bit) !== 0;\n                if (!exists && value === NOT_SET) {\n                    return this;\n                }\n                var idx = popCount(bitmap & bit - 1);\n                var nodes = this.nodes;\n                var node = exists ? nodes[idx] : undefined;\n                var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n                if (newNode === node) {\n                    return this;\n                }\n                if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n                    return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n                }\n                if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n                    return nodes[idx ^ 1];\n                }\n                if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n                    return newNode;\n                }\n                var isEditable = ownerID && ownerID === this.ownerID;\n                var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n                var newNodes = exists ? newNode ? setAt(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);\n                if (isEditable) {\n                    this.bitmap = newBitmap;\n                    this.nodes = newNodes;\n                    return this;\n                }\n                return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n            };\n            var HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {\n                this.ownerID = ownerID;\n                this.count = count;\n                this.nodes = nodes;\n            };\n            HashArrayMapNode.prototype.get = function get(shift, keyHash, key, notSetValue) {\n                if (keyHash === undefined) {\n                    keyHash = hash(key);\n                }\n                var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n                var node = this.nodes[idx];\n                return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n            };\n            HashArrayMapNode.prototype.update = function update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n                if (keyHash === undefined) {\n                    keyHash = hash(key);\n                }\n                var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n                var removed = value === NOT_SET;\n                var nodes = this.nodes;\n                var node = nodes[idx];\n                if (removed && !node) {\n                    return this;\n                }\n                var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n                if (newNode === node) {\n                    return this;\n                }\n                var newCount = this.count;\n                if (!node) {\n                    newCount++;\n                } else if (!newNode) {\n                    newCount--;\n                    if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n                        return packNodes(ownerID, nodes, newCount, idx);\n                    }\n                }\n                var isEditable = ownerID && ownerID === this.ownerID;\n                var newNodes = setAt(nodes, idx, newNode, isEditable);\n                if (isEditable) {\n                    this.count = newCount;\n                    this.nodes = newNodes;\n                    return this;\n                }\n                return new HashArrayMapNode(ownerID, newCount, newNodes);\n            };\n            var HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {\n                this.ownerID = ownerID;\n                this.keyHash = keyHash;\n                this.entries = entries;\n            };\n            HashCollisionNode.prototype.get = function get(shift, keyHash, key, notSetValue) {\n                var entries = this.entries;\n                for(var ii = 0, len = entries.length; ii < len; ii++){\n                    if (is(key, entries[ii][0])) {\n                        return entries[ii][1];\n                    }\n                }\n                return notSetValue;\n            };\n            HashCollisionNode.prototype.update = function update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n                if (keyHash === undefined) {\n                    keyHash = hash(key);\n                }\n                var removed = value === NOT_SET;\n                if (keyHash !== this.keyHash) {\n                    if (removed) {\n                        return this;\n                    }\n                    SetRef(didAlter);\n                    SetRef(didChangeSize);\n                    return mergeIntoNode(this, ownerID, shift, keyHash, [\n                        key,\n                        value\n                    ]);\n                }\n                var entries = this.entries;\n                var idx = 0;\n                var len = entries.length;\n                for(; idx < len; idx++){\n                    if (is(key, entries[idx][0])) {\n                        break;\n                    }\n                }\n                var exists = idx < len;\n                if (exists ? entries[idx][1] === value : removed) {\n                    return this;\n                }\n                SetRef(didAlter);\n                (removed || !exists) && SetRef(didChangeSize);\n                if (removed && len === 2) {\n                    return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n                }\n                var isEditable = ownerID && ownerID === this.ownerID;\n                var newEntries = isEditable ? entries : arrCopy(entries);\n                if (exists) {\n                    if (removed) {\n                        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();\n                    } else {\n                        newEntries[idx] = [\n                            key,\n                            value\n                        ];\n                    }\n                } else {\n                    newEntries.push([\n                        key,\n                        value\n                    ]);\n                }\n                if (isEditable) {\n                    this.entries = newEntries;\n                    return this;\n                }\n                return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n            };\n            var ValueNode = function ValueNode(ownerID, keyHash, entry) {\n                this.ownerID = ownerID;\n                this.keyHash = keyHash;\n                this.entry = entry;\n            };\n            ValueNode.prototype.get = function get(shift, keyHash, key, notSetValue) {\n                return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n            };\n            ValueNode.prototype.update = function update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n                var removed = value === NOT_SET;\n                var keyMatch = is(key, this.entry[0]);\n                if (keyMatch ? value === this.entry[1] : removed) {\n                    return this;\n                }\n                SetRef(didAlter);\n                if (removed) {\n                    SetRef(didChangeSize);\n                    return; // undefined\n                }\n                if (keyMatch) {\n                    if (ownerID && ownerID === this.ownerID) {\n                        this.entry[1] = value;\n                        return this;\n                    }\n                    return new ValueNode(ownerID, this.keyHash, [\n                        key,\n                        value\n                    ]);\n                }\n                SetRef(didChangeSize);\n                return mergeIntoNode(this, ownerID, shift, hash(key), [\n                    key,\n                    value\n                ]);\n            };\n            // #pragma Iterators\n            ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn, reverse) {\n                var entries = this.entries;\n                for(var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++){\n                    if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n                        return false;\n                    }\n                }\n            };\n            BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn, reverse) {\n                var nodes = this.nodes;\n                for(var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++){\n                    var node = nodes[reverse ? maxIndex - ii : ii];\n                    if (node && node.iterate(fn, reverse) === false) {\n                        return false;\n                    }\n                }\n            };\n            // eslint-disable-next-line no-unused-vars\n            ValueNode.prototype.iterate = function(fn, reverse) {\n                return fn(this.entry);\n            };\n            var MapIterator = /*@__PURE__*/ function(Iterator$$1) {\n                function MapIterator(map, type, reverse) {\n                    this._type = type;\n                    this._reverse = reverse;\n                    this._stack = map._root && mapIteratorFrame(map._root);\n                }\n                if (Iterator$$1) MapIterator.__proto__ = Iterator$$1;\n                MapIterator.prototype = Object.create(Iterator$$1 && Iterator$$1.prototype);\n                MapIterator.prototype.constructor = MapIterator;\n                MapIterator.prototype.next = function next() {\n                    var type = this._type;\n                    var stack = this._stack;\n                    while(stack){\n                        var node = stack.node;\n                        var index = stack.index++;\n                        var maxIndex = void 0;\n                        if (node.entry) {\n                            if (index === 0) {\n                                return mapIteratorValue(type, node.entry);\n                            }\n                        } else if (node.entries) {\n                            maxIndex = node.entries.length - 1;\n                            if (index <= maxIndex) {\n                                return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n                            }\n                        } else {\n                            maxIndex = node.nodes.length - 1;\n                            if (index <= maxIndex) {\n                                var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n                                if (subNode) {\n                                    if (subNode.entry) {\n                                        return mapIteratorValue(type, subNode.entry);\n                                    }\n                                    stack = this._stack = mapIteratorFrame(subNode, stack);\n                                }\n                                continue;\n                            }\n                        }\n                        stack = this._stack = this._stack.__prev;\n                    }\n                    return iteratorDone();\n                };\n                return MapIterator;\n            }(Iterator);\n            function mapIteratorValue(type, entry) {\n                return iteratorValue(type, entry[0], entry[1]);\n            }\n            function mapIteratorFrame(node, prev) {\n                return {\n                    node: node,\n                    index: 0,\n                    __prev: prev\n                };\n            }\n            function makeMap(size, root, ownerID, hash$$1) {\n                var map = Object.create(MapPrototype);\n                map.size = size;\n                map._root = root;\n                map.__ownerID = ownerID;\n                map.__hash = hash$$1;\n                map.__altered = false;\n                return map;\n            }\n            var EMPTY_MAP;\n            function emptyMap() {\n                return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n            }\n            function updateMap(map, k, v) {\n                var newRoot;\n                var newSize;\n                if (!map._root) {\n                    if (v === NOT_SET) {\n                        return map;\n                    }\n                    newSize = 1;\n                    newRoot = new ArrayMapNode(map.__ownerID, [\n                        [\n                            k,\n                            v\n                        ]\n                    ]);\n                } else {\n                    var didChangeSize = MakeRef();\n                    var didAlter = MakeRef();\n                    newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n                    if (!didAlter.value) {\n                        return map;\n                    }\n                    newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n                }\n                if (map.__ownerID) {\n                    map.size = newSize;\n                    map._root = newRoot;\n                    map.__hash = undefined;\n                    map.__altered = true;\n                    return map;\n                }\n                return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n            }\n            function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n                if (!node) {\n                    if (value === NOT_SET) {\n                        return node;\n                    }\n                    SetRef(didAlter);\n                    SetRef(didChangeSize);\n                    return new ValueNode(ownerID, keyHash, [\n                        key,\n                        value\n                    ]);\n                }\n                return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n            }\n            function isLeafNode(node) {\n                return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n            }\n            function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n                if (node.keyHash === keyHash) {\n                    return new HashCollisionNode(ownerID, keyHash, [\n                        node.entry,\n                        entry\n                    ]);\n                }\n                var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n                var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n                var newNode;\n                var nodes = idx1 === idx2 ? [\n                    mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)\n                ] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [\n                    node,\n                    newNode\n                ] : [\n                    newNode,\n                    node\n                ]);\n                return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);\n            }\n            function createNodes(ownerID, entries, key, value) {\n                if (!ownerID) {\n                    ownerID = new OwnerID();\n                }\n                var node = new ValueNode(ownerID, hash(key), [\n                    key,\n                    value\n                ]);\n                for(var ii = 0; ii < entries.length; ii++){\n                    var entry = entries[ii];\n                    node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n                }\n                return node;\n            }\n            function packNodes(ownerID, nodes, count, excluding) {\n                var bitmap = 0;\n                var packedII = 0;\n                var packedNodes = new Array(count);\n                for(var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1){\n                    var node = nodes[ii];\n                    if (node !== undefined && ii !== excluding) {\n                        bitmap |= bit;\n                        packedNodes[packedII++] = node;\n                    }\n                }\n                return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n            }\n            function expandNodes(ownerID, nodes, bitmap, including, node) {\n                var count = 0;\n                var expandedNodes = new Array(SIZE);\n                for(var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1){\n                    expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n                }\n                expandedNodes[including] = node;\n                return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n            }\n            function popCount(x) {\n                x -= x >> 1 & 0x55555555;\n                x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n                x = x + (x >> 4) & 0x0f0f0f0f;\n                x += x >> 8;\n                x += x >> 16;\n                return x & 0x7f;\n            }\n            function setAt(array, idx, val, canEdit) {\n                var newArray = canEdit ? array : arrCopy(array);\n                newArray[idx] = val;\n                return newArray;\n            }\n            function spliceIn(array, idx, val, canEdit) {\n                var newLen = array.length + 1;\n                if (canEdit && idx + 1 === newLen) {\n                    array[idx] = val;\n                    return array;\n                }\n                var newArray = new Array(newLen);\n                var after = 0;\n                for(var ii = 0; ii < newLen; ii++){\n                    if (ii === idx) {\n                        newArray[ii] = val;\n                        after = -1;\n                    } else {\n                        newArray[ii] = array[ii + after];\n                    }\n                }\n                return newArray;\n            }\n            function spliceOut(array, idx, canEdit) {\n                var newLen = array.length - 1;\n                if (canEdit && idx === newLen) {\n                    array.pop();\n                    return array;\n                }\n                var newArray = new Array(newLen);\n                var after = 0;\n                for(var ii = 0; ii < newLen; ii++){\n                    if (ii === idx) {\n                        after = 1;\n                    }\n                    newArray[ii] = array[ii + after];\n                }\n                return newArray;\n            }\n            var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n            var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n            var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n            var IS_LIST_SYMBOL = \"@@__IMMUTABLE_LIST__@@\";\n            function isList(maybeList) {\n                return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);\n            }\n            var List = /*@__PURE__*/ function(IndexedCollection$$1) {\n                function List(value) {\n                    var empty = emptyList();\n                    if (value === null || value === undefined) {\n                        return empty;\n                    }\n                    if (isList(value)) {\n                        return value;\n                    }\n                    var iter = IndexedCollection$$1(value);\n                    var size = iter.size;\n                    if (size === 0) {\n                        return empty;\n                    }\n                    assertNotInfinite(size);\n                    if (size > 0 && size < SIZE) {\n                        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n                    }\n                    return empty.withMutations(function(list) {\n                        list.setSize(size);\n                        iter.forEach(function(v, i) {\n                            return list.set(i, v);\n                        });\n                    });\n                }\n                if (IndexedCollection$$1) List.__proto__ = IndexedCollection$$1;\n                List.prototype = Object.create(IndexedCollection$$1 && IndexedCollection$$1.prototype);\n                List.prototype.constructor = List;\n                List.of = function of() {\n                    return this(arguments);\n                };\n                List.prototype.toString = function toString() {\n                    return this.__toString(\"List [\", \"]\");\n                };\n                // @pragma Access\n                List.prototype.get = function get(index, notSetValue) {\n                    index = wrapIndex(this, index);\n                    if (index >= 0 && index < this.size) {\n                        index += this._origin;\n                        var node = listNodeFor(this, index);\n                        return node && node.array[index & MASK];\n                    }\n                    return notSetValue;\n                };\n                // @pragma Modification\n                List.prototype.set = function set(index, value) {\n                    return updateList(this, index, value);\n                };\n                List.prototype.remove = function remove(index) {\n                    return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);\n                };\n                List.prototype.insert = function insert(index, value) {\n                    return this.splice(index, 0, value);\n                };\n                List.prototype.clear = function clear() {\n                    if (this.size === 0) {\n                        return this;\n                    }\n                    if (this.__ownerID) {\n                        this.size = this._origin = this._capacity = 0;\n                        this._level = SHIFT;\n                        this._root = this._tail = null;\n                        this.__hash = undefined;\n                        this.__altered = true;\n                        return this;\n                    }\n                    return emptyList();\n                };\n                List.prototype.push = function push() {\n                    var values = arguments;\n                    var oldSize = this.size;\n                    return this.withMutations(function(list) {\n                        setListBounds(list, 0, oldSize + values.length);\n                        for(var ii = 0; ii < values.length; ii++){\n                            list.set(oldSize + ii, values[ii]);\n                        }\n                    });\n                };\n                List.prototype.pop = function pop() {\n                    return setListBounds(this, 0, -1);\n                };\n                List.prototype.unshift = function unshift() {\n                    var values = arguments;\n                    return this.withMutations(function(list) {\n                        setListBounds(list, -values.length);\n                        for(var ii = 0; ii < values.length; ii++){\n                            list.set(ii, values[ii]);\n                        }\n                    });\n                };\n                List.prototype.shift = function shift() {\n                    return setListBounds(this, 1);\n                };\n                // @pragma Composition\n                List.prototype.concat = function concat() {\n                    var arguments$1 = arguments;\n                    var seqs = [];\n                    for(var i = 0; i < arguments.length; i++){\n                        var argument = arguments$1[i];\n                        var seq = IndexedCollection$$1(typeof argument !== \"string\" && hasIterator(argument) ? argument : [\n                            argument\n                        ]);\n                        if (seq.size !== 0) {\n                            seqs.push(seq);\n                        }\n                    }\n                    if (seqs.length === 0) {\n                        return this;\n                    }\n                    if (this.size === 0 && !this.__ownerID && seqs.length === 1) {\n                        return this.constructor(seqs[0]);\n                    }\n                    return this.withMutations(function(list) {\n                        seqs.forEach(function(seq) {\n                            return seq.forEach(function(value) {\n                                return list.push(value);\n                            });\n                        });\n                    });\n                };\n                List.prototype.setSize = function setSize(size) {\n                    return setListBounds(this, 0, size);\n                };\n                List.prototype.map = function map(mapper, context) {\n                    var this$1 = this;\n                    return this.withMutations(function(list) {\n                        for(var i = 0; i < this$1.size; i++){\n                            list.set(i, mapper.call(context, list.get(i), i, list));\n                        }\n                    });\n                };\n                // @pragma Iteration\n                List.prototype.slice = function slice(begin, end) {\n                    var size = this.size;\n                    if (wholeSlice(begin, end, size)) {\n                        return this;\n                    }\n                    return setListBounds(this, resolveBegin(begin, size), resolveEnd(end, size));\n                };\n                List.prototype.__iterator = function __iterator(type, reverse) {\n                    var index = reverse ? this.size : 0;\n                    var values = iterateList(this, reverse);\n                    return new Iterator(function() {\n                        var value = values();\n                        return value === DONE ? iteratorDone() : iteratorValue(type, reverse ? --index : index++, value);\n                    });\n                };\n                List.prototype.__iterate = function __iterate(fn, reverse) {\n                    var index = reverse ? this.size : 0;\n                    var values = iterateList(this, reverse);\n                    var value;\n                    while((value = values()) !== DONE){\n                        if (fn(value, reverse ? --index : index++, this) === false) {\n                            break;\n                        }\n                    }\n                    return index;\n                };\n                List.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n                    if (ownerID === this.__ownerID) {\n                        return this;\n                    }\n                    if (!ownerID) {\n                        if (this.size === 0) {\n                            return emptyList();\n                        }\n                        this.__ownerID = ownerID;\n                        this.__altered = false;\n                        return this;\n                    }\n                    return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n                };\n                return List;\n            }(IndexedCollection);\n            List.isList = isList;\n            var ListPrototype = List.prototype;\n            ListPrototype[IS_LIST_SYMBOL] = true;\n            ListPrototype[DELETE] = ListPrototype.remove;\n            ListPrototype.merge = ListPrototype.concat;\n            ListPrototype.setIn = setIn$1;\n            ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;\n            ListPrototype.update = update$1;\n            ListPrototype.updateIn = updateIn$1;\n            ListPrototype.mergeIn = mergeIn;\n            ListPrototype.mergeDeepIn = mergeDeepIn;\n            ListPrototype.withMutations = withMutations;\n            ListPrototype.wasAltered = wasAltered;\n            ListPrototype.asImmutable = asImmutable;\n            ListPrototype[\"@@transducer/init\"] = ListPrototype.asMutable = asMutable;\n            ListPrototype[\"@@transducer/step\"] = function(result, arr) {\n                return result.push(arr);\n            };\n            ListPrototype[\"@@transducer/result\"] = function(obj) {\n                return obj.asImmutable();\n            };\n            var VNode = function VNode(array, ownerID) {\n                this.array = array;\n                this.ownerID = ownerID;\n            };\n            // TODO: seems like these methods are very similar\n            VNode.prototype.removeBefore = function removeBefore(ownerID, level, index) {\n                if (index === level ? 1 << level : this.array.length === 0) {\n                    return this;\n                }\n                var originIndex = index >>> level & MASK;\n                if (originIndex >= this.array.length) {\n                    return new VNode([], ownerID);\n                }\n                var removingFirst = originIndex === 0;\n                var newChild;\n                if (level > 0) {\n                    var oldChild = this.array[originIndex];\n                    newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n                    if (newChild === oldChild && removingFirst) {\n                        return this;\n                    }\n                }\n                if (removingFirst && !newChild) {\n                    return this;\n                }\n                var editable = editableVNode(this, ownerID);\n                if (!removingFirst) {\n                    for(var ii = 0; ii < originIndex; ii++){\n                        editable.array[ii] = undefined;\n                    }\n                }\n                if (newChild) {\n                    editable.array[originIndex] = newChild;\n                }\n                return editable;\n            };\n            VNode.prototype.removeAfter = function removeAfter(ownerID, level, index) {\n                if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n                    return this;\n                }\n                var sizeIndex = index - 1 >>> level & MASK;\n                if (sizeIndex >= this.array.length) {\n                    return this;\n                }\n                var newChild;\n                if (level > 0) {\n                    var oldChild = this.array[sizeIndex];\n                    newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n                    if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n                        return this;\n                    }\n                }\n                var editable = editableVNode(this, ownerID);\n                editable.array.splice(sizeIndex + 1);\n                if (newChild) {\n                    editable.array[sizeIndex] = newChild;\n                }\n                return editable;\n            };\n            var DONE = {};\n            function iterateList(list, reverse) {\n                var left = list._origin;\n                var right = list._capacity;\n                var tailPos = getTailOffset(right);\n                var tail = list._tail;\n                return iterateNodeOrLeaf(list._root, list._level, 0);\n                function iterateNodeOrLeaf(node, level, offset) {\n                    return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);\n                }\n                function iterateLeaf(node, offset) {\n                    var array = offset === tailPos ? tail && tail.array : node && node.array;\n                    var from = offset > left ? 0 : left - offset;\n                    var to = right - offset;\n                    if (to > SIZE) {\n                        to = SIZE;\n                    }\n                    return function() {\n                        if (from === to) {\n                            return DONE;\n                        }\n                        var idx = reverse ? --to : from++;\n                        return array && array[idx];\n                    };\n                }\n                function iterateNode(node, level, offset) {\n                    var values;\n                    var array = node && node.array;\n                    var from = offset > left ? 0 : left - offset >> level;\n                    var to = (right - offset >> level) + 1;\n                    if (to > SIZE) {\n                        to = SIZE;\n                    }\n                    return function() {\n                        while(true){\n                            if (values) {\n                                var value = values();\n                                if (value !== DONE) {\n                                    return value;\n                                }\n                                values = null;\n                            }\n                            if (from === to) {\n                                return DONE;\n                            }\n                            var idx = reverse ? --to : from++;\n                            values = iterateNodeOrLeaf(array && array[idx], level - SHIFT, offset + (idx << level));\n                        }\n                    };\n                }\n            }\n            function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n                var list = Object.create(ListPrototype);\n                list.size = capacity - origin;\n                list._origin = origin;\n                list._capacity = capacity;\n                list._level = level;\n                list._root = root;\n                list._tail = tail;\n                list.__ownerID = ownerID;\n                list.__hash = hash;\n                list.__altered = false;\n                return list;\n            }\n            var EMPTY_LIST;\n            function emptyList() {\n                return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n            }\n            function updateList(list, index, value) {\n                index = wrapIndex(list, index);\n                if (index !== index) {\n                    return list;\n                }\n                if (index >= list.size || index < 0) {\n                    return list.withMutations(function(list) {\n                        index < 0 ? setListBounds(list, index).set(0, value) : setListBounds(list, 0, index + 1).set(index, value);\n                    });\n                }\n                index += list._origin;\n                var newTail = list._tail;\n                var newRoot = list._root;\n                var didAlter = MakeRef();\n                if (index >= getTailOffset(list._capacity)) {\n                    newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n                } else {\n                    newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n                }\n                if (!didAlter.value) {\n                    return list;\n                }\n                if (list.__ownerID) {\n                    list._root = newRoot;\n                    list._tail = newTail;\n                    list.__hash = undefined;\n                    list.__altered = true;\n                    return list;\n                }\n                return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n            }\n            function updateVNode(node, ownerID, level, index, value, didAlter) {\n                var idx = index >>> level & MASK;\n                var nodeHas = node && idx < node.array.length;\n                if (!nodeHas && value === undefined) {\n                    return node;\n                }\n                var newNode;\n                if (level > 0) {\n                    var lowerNode = node && node.array[idx];\n                    var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n                    if (newLowerNode === lowerNode) {\n                        return node;\n                    }\n                    newNode = editableVNode(node, ownerID);\n                    newNode.array[idx] = newLowerNode;\n                    return newNode;\n                }\n                if (nodeHas && node.array[idx] === value) {\n                    return node;\n                }\n                if (didAlter) {\n                    SetRef(didAlter);\n                }\n                newNode = editableVNode(node, ownerID);\n                if (value === undefined && idx === newNode.array.length - 1) {\n                    newNode.array.pop();\n                } else {\n                    newNode.array[idx] = value;\n                }\n                return newNode;\n            }\n            function editableVNode(node, ownerID) {\n                if (ownerID && node && ownerID === node.ownerID) {\n                    return node;\n                }\n                return new VNode(node ? node.array.slice() : [], ownerID);\n            }\n            function listNodeFor(list, rawIndex) {\n                if (rawIndex >= getTailOffset(list._capacity)) {\n                    return list._tail;\n                }\n                if (rawIndex < 1 << list._level + SHIFT) {\n                    var node = list._root;\n                    var level = list._level;\n                    while(node && level > 0){\n                        node = node.array[rawIndex >>> level & MASK];\n                        level -= SHIFT;\n                    }\n                    return node;\n                }\n            }\n            function setListBounds(list, begin, end) {\n                // Sanitize begin & end using this shorthand for ToInt32(argument)\n                // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n                if (begin !== undefined) {\n                    begin |= 0;\n                }\n                if (end !== undefined) {\n                    end |= 0;\n                }\n                var owner = list.__ownerID || new OwnerID();\n                var oldOrigin = list._origin;\n                var oldCapacity = list._capacity;\n                var newOrigin = oldOrigin + begin;\n                var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n                if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n                    return list;\n                }\n                // If it's going to end after it starts, it's empty.\n                if (newOrigin >= newCapacity) {\n                    return list.clear();\n                }\n                var newLevel = list._level;\n                var newRoot = list._root;\n                // New origin might need creating a higher root.\n                var offsetShift = 0;\n                while(newOrigin + offsetShift < 0){\n                    newRoot = new VNode(newRoot && newRoot.array.length ? [\n                        undefined,\n                        newRoot\n                    ] : [], owner);\n                    newLevel += SHIFT;\n                    offsetShift += 1 << newLevel;\n                }\n                if (offsetShift) {\n                    newOrigin += offsetShift;\n                    oldOrigin += offsetShift;\n                    newCapacity += offsetShift;\n                    oldCapacity += offsetShift;\n                }\n                var oldTailOffset = getTailOffset(oldCapacity);\n                var newTailOffset = getTailOffset(newCapacity);\n                // New size might need creating a higher root.\n                while(newTailOffset >= 1 << newLevel + SHIFT){\n                    newRoot = new VNode(newRoot && newRoot.array.length ? [\n                        newRoot\n                    ] : [], owner);\n                    newLevel += SHIFT;\n                }\n                // Locate or create the new tail.\n                var oldTail = list._tail;\n                var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n                // Merge Tail into tree.\n                if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n                    newRoot = editableVNode(newRoot, owner);\n                    var node = newRoot;\n                    for(var level = newLevel; level > SHIFT; level -= SHIFT){\n                        var idx = oldTailOffset >>> level & MASK;\n                        node = node.array[idx] = editableVNode(node.array[idx], owner);\n                    }\n                    node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;\n                }\n                // If the size has been reduced, there's a chance the tail needs to be trimmed.\n                if (newCapacity < oldCapacity) {\n                    newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n                }\n                // If the new origin is within the tail, then we do not need a root.\n                if (newOrigin >= newTailOffset) {\n                    newOrigin -= newTailOffset;\n                    newCapacity -= newTailOffset;\n                    newLevel = SHIFT;\n                    newRoot = null;\n                    newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n                // Otherwise, if the root has been trimmed, garbage collect.\n                } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n                    offsetShift = 0;\n                    // Identify the new top root node of the subtree of the old root.\n                    while(newRoot){\n                        var beginIndex = newOrigin >>> newLevel & MASK;\n                        if (beginIndex !== newTailOffset >>> newLevel & MASK) {\n                            break;\n                        }\n                        if (beginIndex) {\n                            offsetShift += (1 << newLevel) * beginIndex;\n                        }\n                        newLevel -= SHIFT;\n                        newRoot = newRoot.array[beginIndex];\n                    }\n                    // Trim the new sides of the new root.\n                    if (newRoot && newOrigin > oldOrigin) {\n                        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n                    }\n                    if (newRoot && newTailOffset < oldTailOffset) {\n                        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n                    }\n                    if (offsetShift) {\n                        newOrigin -= offsetShift;\n                        newCapacity -= offsetShift;\n                    }\n                }\n                if (list.__ownerID) {\n                    list.size = newCapacity - newOrigin;\n                    list._origin = newOrigin;\n                    list._capacity = newCapacity;\n                    list._level = newLevel;\n                    list._root = newRoot;\n                    list._tail = newTail;\n                    list.__hash = undefined;\n                    list.__altered = true;\n                    return list;\n                }\n                return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n            }\n            function getTailOffset(size) {\n                return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;\n            }\n            var OrderedMap = /*@__PURE__*/ function(Map$$1) {\n                function OrderedMap(value) {\n                    return value === null || value === undefined ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function(map) {\n                        var iter = KeyedCollection(value);\n                        assertNotInfinite(iter.size);\n                        iter.forEach(function(v, k) {\n                            return map.set(k, v);\n                        });\n                    });\n                }\n                if (Map$$1) OrderedMap.__proto__ = Map$$1;\n                OrderedMap.prototype = Object.create(Map$$1 && Map$$1.prototype);\n                OrderedMap.prototype.constructor = OrderedMap;\n                OrderedMap.of = function of() {\n                    return this(arguments);\n                };\n                OrderedMap.prototype.toString = function toString() {\n                    return this.__toString(\"OrderedMap {\", \"}\");\n                };\n                // @pragma Access\n                OrderedMap.prototype.get = function get(k, notSetValue) {\n                    var index = this._map.get(k);\n                    return index !== undefined ? this._list.get(index)[1] : notSetValue;\n                };\n                // @pragma Modification\n                OrderedMap.prototype.clear = function clear() {\n                    if (this.size === 0) {\n                        return this;\n                    }\n                    if (this.__ownerID) {\n                        this.size = 0;\n                        this._map.clear();\n                        this._list.clear();\n                        return this;\n                    }\n                    return emptyOrderedMap();\n                };\n                OrderedMap.prototype.set = function set(k, v) {\n                    return updateOrderedMap(this, k, v);\n                };\n                OrderedMap.prototype.remove = function remove(k) {\n                    return updateOrderedMap(this, k, NOT_SET);\n                };\n                OrderedMap.prototype.wasAltered = function wasAltered() {\n                    return this._map.wasAltered() || this._list.wasAltered();\n                };\n                OrderedMap.prototype.__iterate = function __iterate(fn, reverse) {\n                    var this$1 = this;\n                    return this._list.__iterate(function(entry) {\n                        return entry && fn(entry[1], entry[0], this$1);\n                    }, reverse);\n                };\n                OrderedMap.prototype.__iterator = function __iterator(type, reverse) {\n                    return this._list.fromEntrySeq().__iterator(type, reverse);\n                };\n                OrderedMap.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n                    if (ownerID === this.__ownerID) {\n                        return this;\n                    }\n                    var newMap = this._map.__ensureOwner(ownerID);\n                    var newList = this._list.__ensureOwner(ownerID);\n                    if (!ownerID) {\n                        if (this.size === 0) {\n                            return emptyOrderedMap();\n                        }\n                        this.__ownerID = ownerID;\n                        this._map = newMap;\n                        this._list = newList;\n                        return this;\n                    }\n                    return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n                };\n                return OrderedMap;\n            }(Map);\n            OrderedMap.isOrderedMap = isOrderedMap;\n            OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;\n            OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n            function makeOrderedMap(map, list, ownerID, hash) {\n                var omap = Object.create(OrderedMap.prototype);\n                omap.size = map ? map.size : 0;\n                omap._map = map;\n                omap._list = list;\n                omap.__ownerID = ownerID;\n                omap.__hash = hash;\n                return omap;\n            }\n            var EMPTY_ORDERED_MAP;\n            function emptyOrderedMap() {\n                return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n            }\n            function updateOrderedMap(omap, k, v) {\n                var map = omap._map;\n                var list = omap._list;\n                var i = map.get(k);\n                var has = i !== undefined;\n                var newMap;\n                var newList;\n                if (v === NOT_SET) {\n                    // removed\n                    if (!has) {\n                        return omap;\n                    }\n                    if (list.size >= SIZE && list.size >= map.size * 2) {\n                        newList = list.filter(function(entry, idx) {\n                            return entry !== undefined && i !== idx;\n                        });\n                        newMap = newList.toKeyedSeq().map(function(entry) {\n                            return entry[0];\n                        }).flip().toMap();\n                        if (omap.__ownerID) {\n                            newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n                        }\n                    } else {\n                        newMap = map.remove(k);\n                        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n                    }\n                } else if (has) {\n                    if (v === list.get(i)[1]) {\n                        return omap;\n                    }\n                    newMap = map;\n                    newList = list.set(i, [\n                        k,\n                        v\n                    ]);\n                } else {\n                    newMap = map.set(k, list.size);\n                    newList = list.set(list.size, [\n                        k,\n                        v\n                    ]);\n                }\n                if (omap.__ownerID) {\n                    omap.size = newMap.size;\n                    omap._map = newMap;\n                    omap._list = newList;\n                    omap.__hash = undefined;\n                    return omap;\n                }\n                return makeOrderedMap(newMap, newList);\n            }\n            var IS_STACK_SYMBOL = \"@@__IMMUTABLE_STACK__@@\";\n            function isStack(maybeStack) {\n                return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);\n            }\n            var Stack = /*@__PURE__*/ function(IndexedCollection$$1) {\n                function Stack(value) {\n                    return value === null || value === undefined ? emptyStack() : isStack(value) ? value : emptyStack().pushAll(value);\n                }\n                if (IndexedCollection$$1) Stack.__proto__ = IndexedCollection$$1;\n                Stack.prototype = Object.create(IndexedCollection$$1 && IndexedCollection$$1.prototype);\n                Stack.prototype.constructor = Stack;\n                Stack.of = function of() {\n                    return this(arguments);\n                };\n                Stack.prototype.toString = function toString() {\n                    return this.__toString(\"Stack [\", \"]\");\n                };\n                // @pragma Access\n                Stack.prototype.get = function get(index, notSetValue) {\n                    var head = this._head;\n                    index = wrapIndex(this, index);\n                    while(head && index--){\n                        head = head.next;\n                    }\n                    return head ? head.value : notSetValue;\n                };\n                Stack.prototype.peek = function peek() {\n                    return this._head && this._head.value;\n                };\n                // @pragma Modification\n                Stack.prototype.push = function push() {\n                    var arguments$1 = arguments;\n                    if (arguments.length === 0) {\n                        return this;\n                    }\n                    var newSize = this.size + arguments.length;\n                    var head = this._head;\n                    for(var ii = arguments.length - 1; ii >= 0; ii--){\n                        head = {\n                            value: arguments$1[ii],\n                            next: head\n                        };\n                    }\n                    if (this.__ownerID) {\n                        this.size = newSize;\n                        this._head = head;\n                        this.__hash = undefined;\n                        this.__altered = true;\n                        return this;\n                    }\n                    return makeStack(newSize, head);\n                };\n                Stack.prototype.pushAll = function pushAll(iter) {\n                    iter = IndexedCollection$$1(iter);\n                    if (iter.size === 0) {\n                        return this;\n                    }\n                    if (this.size === 0 && isStack(iter)) {\n                        return iter;\n                    }\n                    assertNotInfinite(iter.size);\n                    var newSize = this.size;\n                    var head = this._head;\n                    iter.__iterate(function(value) {\n                        newSize++;\n                        head = {\n                            value: value,\n                            next: head\n                        };\n                    }, /* reverse */ true);\n                    if (this.__ownerID) {\n                        this.size = newSize;\n                        this._head = head;\n                        this.__hash = undefined;\n                        this.__altered = true;\n                        return this;\n                    }\n                    return makeStack(newSize, head);\n                };\n                Stack.prototype.pop = function pop() {\n                    return this.slice(1);\n                };\n                Stack.prototype.clear = function clear() {\n                    if (this.size === 0) {\n                        return this;\n                    }\n                    if (this.__ownerID) {\n                        this.size = 0;\n                        this._head = undefined;\n                        this.__hash = undefined;\n                        this.__altered = true;\n                        return this;\n                    }\n                    return emptyStack();\n                };\n                Stack.prototype.slice = function slice(begin, end) {\n                    if (wholeSlice(begin, end, this.size)) {\n                        return this;\n                    }\n                    var resolvedBegin = resolveBegin(begin, this.size);\n                    var resolvedEnd = resolveEnd(end, this.size);\n                    if (resolvedEnd !== this.size) {\n                        // super.slice(begin, end);\n                        return IndexedCollection$$1.prototype.slice.call(this, begin, end);\n                    }\n                    var newSize = this.size - resolvedBegin;\n                    var head = this._head;\n                    while(resolvedBegin--){\n                        head = head.next;\n                    }\n                    if (this.__ownerID) {\n                        this.size = newSize;\n                        this._head = head;\n                        this.__hash = undefined;\n                        this.__altered = true;\n                        return this;\n                    }\n                    return makeStack(newSize, head);\n                };\n                // @pragma Mutability\n                Stack.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n                    if (ownerID === this.__ownerID) {\n                        return this;\n                    }\n                    if (!ownerID) {\n                        if (this.size === 0) {\n                            return emptyStack();\n                        }\n                        this.__ownerID = ownerID;\n                        this.__altered = false;\n                        return this;\n                    }\n                    return makeStack(this.size, this._head, ownerID, this.__hash);\n                };\n                // @pragma Iteration\n                Stack.prototype.__iterate = function __iterate(fn, reverse) {\n                    var this$1 = this;\n                    if (reverse) {\n                        return new ArraySeq(this.toArray()).__iterate(function(v, k) {\n                            return fn(v, k, this$1);\n                        }, reverse);\n                    }\n                    var iterations = 0;\n                    var node = this._head;\n                    while(node){\n                        if (fn(node.value, iterations++, this) === false) {\n                            break;\n                        }\n                        node = node.next;\n                    }\n                    return iterations;\n                };\n                Stack.prototype.__iterator = function __iterator(type, reverse) {\n                    if (reverse) {\n                        return new ArraySeq(this.toArray()).__iterator(type, reverse);\n                    }\n                    var iterations = 0;\n                    var node = this._head;\n                    return new Iterator(function() {\n                        if (node) {\n                            var value = node.value;\n                            node = node.next;\n                            return iteratorValue(type, iterations++, value);\n                        }\n                        return iteratorDone();\n                    });\n                };\n                return Stack;\n            }(IndexedCollection);\n            Stack.isStack = isStack;\n            var StackPrototype = Stack.prototype;\n            StackPrototype[IS_STACK_SYMBOL] = true;\n            StackPrototype.shift = StackPrototype.pop;\n            StackPrototype.unshift = StackPrototype.push;\n            StackPrototype.unshiftAll = StackPrototype.pushAll;\n            StackPrototype.withMutations = withMutations;\n            StackPrototype.wasAltered = wasAltered;\n            StackPrototype.asImmutable = asImmutable;\n            StackPrototype[\"@@transducer/init\"] = StackPrototype.asMutable = asMutable;\n            StackPrototype[\"@@transducer/step\"] = function(result, arr) {\n                return result.unshift(arr);\n            };\n            StackPrototype[\"@@transducer/result\"] = function(obj) {\n                return obj.asImmutable();\n            };\n            function makeStack(size, head, ownerID, hash) {\n                var map = Object.create(StackPrototype);\n                map.size = size;\n                map._head = head;\n                map.__ownerID = ownerID;\n                map.__hash = hash;\n                map.__altered = false;\n                return map;\n            }\n            var EMPTY_STACK;\n            function emptyStack() {\n                return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n            }\n            var IS_SET_SYMBOL = \"@@__IMMUTABLE_SET__@@\";\n            function isSet(maybeSet) {\n                return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);\n            }\n            function isOrderedSet(maybeOrderedSet) {\n                return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n            }\n            function deepEqual(a, b) {\n                if (a === b) {\n                    return true;\n                }\n                if (!isCollection(b) || a.size !== undefined && b.size !== undefined && a.size !== b.size || a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {\n                    return false;\n                }\n                if (a.size === 0 && b.size === 0) {\n                    return true;\n                }\n                var notAssociative = !isAssociative(a);\n                if (isOrdered(a)) {\n                    var entries = a.entries();\n                    return b.every(function(v, k) {\n                        var entry = entries.next().value;\n                        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n                    }) && entries.next().done;\n                }\n                var flipped = false;\n                if (a.size === undefined) {\n                    if (b.size === undefined) {\n                        if (typeof a.cacheResult === \"function\") {\n                            a.cacheResult();\n                        }\n                    } else {\n                        flipped = true;\n                        var _ = a;\n                        a = b;\n                        b = _;\n                    }\n                }\n                var allEqual = true;\n                var bSize = b.__iterate(function(v, k) {\n                    if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n                        allEqual = false;\n                        return false;\n                    }\n                });\n                return allEqual && a.size === bSize;\n            }\n            /**\n * Contributes additional methods to a constructor\n */ function mixin(ctor, methods) {\n                var keyCopier = function(key) {\n                    ctor.prototype[key] = methods[key];\n                };\n                Object.keys(methods).forEach(keyCopier);\n                Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n                return ctor;\n            }\n            function toJS(value) {\n                if (!value || typeof value !== \"object\") {\n                    return value;\n                }\n                if (!isCollection(value)) {\n                    if (!isDataStructure(value)) {\n                        return value;\n                    }\n                    value = Seq(value);\n                }\n                if (isKeyed(value)) {\n                    var result$1 = {};\n                    value.__iterate(function(v, k) {\n                        result$1[k] = toJS(v);\n                    });\n                    return result$1;\n                }\n                var result = [];\n                value.__iterate(function(v) {\n                    result.push(toJS(v));\n                });\n                return result;\n            }\n            var Set = /*@__PURE__*/ function(SetCollection$$1) {\n                function Set(value) {\n                    return value === null || value === undefined ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function(set) {\n                        var iter = SetCollection$$1(value);\n                        assertNotInfinite(iter.size);\n                        iter.forEach(function(v) {\n                            return set.add(v);\n                        });\n                    });\n                }\n                if (SetCollection$$1) Set.__proto__ = SetCollection$$1;\n                Set.prototype = Object.create(SetCollection$$1 && SetCollection$$1.prototype);\n                Set.prototype.constructor = Set;\n                Set.of = function of() {\n                    return this(arguments);\n                };\n                Set.fromKeys = function fromKeys(value) {\n                    return this(KeyedCollection(value).keySeq());\n                };\n                Set.intersect = function intersect(sets) {\n                    sets = Collection(sets).toArray();\n                    return sets.length ? SetPrototype.intersect.apply(Set(sets.pop()), sets) : emptySet();\n                };\n                Set.union = function union(sets) {\n                    sets = Collection(sets).toArray();\n                    return sets.length ? SetPrototype.union.apply(Set(sets.pop()), sets) : emptySet();\n                };\n                Set.prototype.toString = function toString() {\n                    return this.__toString(\"Set {\", \"}\");\n                };\n                // @pragma Access\n                Set.prototype.has = function has(value) {\n                    return this._map.has(value);\n                };\n                // @pragma Modification\n                Set.prototype.add = function add(value) {\n                    return updateSet(this, this._map.set(value, value));\n                };\n                Set.prototype.remove = function remove(value) {\n                    return updateSet(this, this._map.remove(value));\n                };\n                Set.prototype.clear = function clear() {\n                    return updateSet(this, this._map.clear());\n                };\n                // @pragma Composition\n                Set.prototype.map = function map(mapper, context) {\n                    var this$1 = this;\n                    var removes = [];\n                    var adds = [];\n                    this.forEach(function(value) {\n                        var mapped = mapper.call(context, value, value, this$1);\n                        if (mapped !== value) {\n                            removes.push(value);\n                            adds.push(mapped);\n                        }\n                    });\n                    return this.withMutations(function(set) {\n                        removes.forEach(function(value) {\n                            return set.remove(value);\n                        });\n                        adds.forEach(function(value) {\n                            return set.add(value);\n                        });\n                    });\n                };\n                Set.prototype.union = function union() {\n                    var iters = [], len = arguments.length;\n                    while(len--)iters[len] = arguments[len];\n                    iters = iters.filter(function(x) {\n                        return x.size !== 0;\n                    });\n                    if (iters.length === 0) {\n                        return this;\n                    }\n                    if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n                        return this.constructor(iters[0]);\n                    }\n                    return this.withMutations(function(set) {\n                        for(var ii = 0; ii < iters.length; ii++){\n                            SetCollection$$1(iters[ii]).forEach(function(value) {\n                                return set.add(value);\n                            });\n                        }\n                    });\n                };\n                Set.prototype.intersect = function intersect() {\n                    var iters = [], len = arguments.length;\n                    while(len--)iters[len] = arguments[len];\n                    if (iters.length === 0) {\n                        return this;\n                    }\n                    iters = iters.map(function(iter) {\n                        return SetCollection$$1(iter);\n                    });\n                    var toRemove = [];\n                    this.forEach(function(value) {\n                        if (!iters.every(function(iter) {\n                            return iter.includes(value);\n                        })) {\n                            toRemove.push(value);\n                        }\n                    });\n                    return this.withMutations(function(set) {\n                        toRemove.forEach(function(value) {\n                            set.remove(value);\n                        });\n                    });\n                };\n                Set.prototype.subtract = function subtract() {\n                    var iters = [], len = arguments.length;\n                    while(len--)iters[len] = arguments[len];\n                    if (iters.length === 0) {\n                        return this;\n                    }\n                    iters = iters.map(function(iter) {\n                        return SetCollection$$1(iter);\n                    });\n                    var toRemove = [];\n                    this.forEach(function(value) {\n                        if (iters.some(function(iter) {\n                            return iter.includes(value);\n                        })) {\n                            toRemove.push(value);\n                        }\n                    });\n                    return this.withMutations(function(set) {\n                        toRemove.forEach(function(value) {\n                            set.remove(value);\n                        });\n                    });\n                };\n                Set.prototype.sort = function sort(comparator) {\n                    // Late binding\n                    return OrderedSet(sortFactory(this, comparator));\n                };\n                Set.prototype.sortBy = function sortBy(mapper, comparator) {\n                    // Late binding\n                    return OrderedSet(sortFactory(this, comparator, mapper));\n                };\n                Set.prototype.wasAltered = function wasAltered() {\n                    return this._map.wasAltered();\n                };\n                Set.prototype.__iterate = function __iterate(fn, reverse) {\n                    var this$1 = this;\n                    return this._map.__iterate(function(k) {\n                        return fn(k, k, this$1);\n                    }, reverse);\n                };\n                Set.prototype.__iterator = function __iterator(type, reverse) {\n                    return this._map.__iterator(type, reverse);\n                };\n                Set.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n                    if (ownerID === this.__ownerID) {\n                        return this;\n                    }\n                    var newMap = this._map.__ensureOwner(ownerID);\n                    if (!ownerID) {\n                        if (this.size === 0) {\n                            return this.__empty();\n                        }\n                        this.__ownerID = ownerID;\n                        this._map = newMap;\n                        return this;\n                    }\n                    return this.__make(newMap, ownerID);\n                };\n                return Set;\n            }(SetCollection);\n            Set.isSet = isSet;\n            var SetPrototype = Set.prototype;\n            SetPrototype[IS_SET_SYMBOL] = true;\n            SetPrototype[DELETE] = SetPrototype.remove;\n            SetPrototype.merge = SetPrototype.concat = SetPrototype.union;\n            SetPrototype.withMutations = withMutations;\n            SetPrototype.asImmutable = asImmutable;\n            SetPrototype[\"@@transducer/init\"] = SetPrototype.asMutable = asMutable;\n            SetPrototype[\"@@transducer/step\"] = function(result, arr) {\n                return result.add(arr);\n            };\n            SetPrototype[\"@@transducer/result\"] = function(obj) {\n                return obj.asImmutable();\n            };\n            SetPrototype.__empty = emptySet;\n            SetPrototype.__make = makeSet;\n            function updateSet(set, newMap) {\n                if (set.__ownerID) {\n                    set.size = newMap.size;\n                    set._map = newMap;\n                    return set;\n                }\n                return newMap === set._map ? set : newMap.size === 0 ? set.__empty() : set.__make(newMap);\n            }\n            function makeSet(map, ownerID) {\n                var set = Object.create(SetPrototype);\n                set.size = map ? map.size : 0;\n                set._map = map;\n                set.__ownerID = ownerID;\n                return set;\n            }\n            var EMPTY_SET;\n            function emptySet() {\n                return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n            }\n            /**\n * Returns a lazy seq of nums from start (inclusive) to end\n * (exclusive), by step, where start defaults to 0, step to 1, and end to\n * infinity. When start is equal to end, returns empty list.\n */ var Range = /*@__PURE__*/ function(IndexedSeq$$1) {\n                function Range(start, end, step) {\n                    if (!(this instanceof Range)) {\n                        return new Range(start, end, step);\n                    }\n                    invariant(step !== 0, \"Cannot step a Range by 0\");\n                    start = start || 0;\n                    if (end === undefined) {\n                        end = Infinity;\n                    }\n                    step = step === undefined ? 1 : Math.abs(step);\n                    if (end < start) {\n                        step = -step;\n                    }\n                    this._start = start;\n                    this._end = end;\n                    this._step = step;\n                    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n                    if (this.size === 0) {\n                        if (EMPTY_RANGE) {\n                            return EMPTY_RANGE;\n                        }\n                        EMPTY_RANGE = this;\n                    }\n                }\n                if (IndexedSeq$$1) Range.__proto__ = IndexedSeq$$1;\n                Range.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);\n                Range.prototype.constructor = Range;\n                Range.prototype.toString = function toString() {\n                    if (this.size === 0) {\n                        return \"Range []\";\n                    }\n                    return \"Range [ \" + this._start + \"...\" + this._end + (this._step !== 1 ? \" by \" + this._step : \"\") + \" ]\";\n                };\n                Range.prototype.get = function get(index, notSetValue) {\n                    return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;\n                };\n                Range.prototype.includes = function includes(searchValue) {\n                    var possibleIndex = (searchValue - this._start) / this._step;\n                    return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);\n                };\n                Range.prototype.slice = function slice(begin, end) {\n                    if (wholeSlice(begin, end, this.size)) {\n                        return this;\n                    }\n                    begin = resolveBegin(begin, this.size);\n                    end = resolveEnd(end, this.size);\n                    if (end <= begin) {\n                        return new Range(0, 0);\n                    }\n                    return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n                };\n                Range.prototype.indexOf = function indexOf(searchValue) {\n                    var offsetValue = searchValue - this._start;\n                    if (offsetValue % this._step === 0) {\n                        var index = offsetValue / this._step;\n                        if (index >= 0 && index < this.size) {\n                            return index;\n                        }\n                    }\n                    return -1;\n                };\n                Range.prototype.lastIndexOf = function lastIndexOf(searchValue) {\n                    return this.indexOf(searchValue);\n                };\n                Range.prototype.__iterate = function __iterate(fn, reverse) {\n                    var size = this.size;\n                    var step = this._step;\n                    var value = reverse ? this._start + (size - 1) * step : this._start;\n                    var i = 0;\n                    while(i !== size){\n                        if (fn(value, reverse ? size - ++i : i++, this) === false) {\n                            break;\n                        }\n                        value += reverse ? -step : step;\n                    }\n                    return i;\n                };\n                Range.prototype.__iterator = function __iterator(type, reverse) {\n                    var size = this.size;\n                    var step = this._step;\n                    var value = reverse ? this._start + (size - 1) * step : this._start;\n                    var i = 0;\n                    return new Iterator(function() {\n                        if (i === size) {\n                            return iteratorDone();\n                        }\n                        var v = value;\n                        value += reverse ? -step : step;\n                        return iteratorValue(type, reverse ? size - ++i : i++, v);\n                    });\n                };\n                Range.prototype.equals = function equals(other) {\n                    return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);\n                };\n                return Range;\n            }(IndexedSeq);\n            var EMPTY_RANGE;\n            function getIn(collection, searchKeyPath, notSetValue) {\n                var keyPath = coerceKeyPath(searchKeyPath);\n                var i = 0;\n                while(i !== keyPath.length){\n                    collection = get(collection, keyPath[i++], NOT_SET);\n                    if (collection === NOT_SET) {\n                        return notSetValue;\n                    }\n                }\n                return collection;\n            }\n            function getIn$1(searchKeyPath, notSetValue) {\n                return getIn(this, searchKeyPath, notSetValue);\n            }\n            function hasIn(collection, keyPath) {\n                return getIn(collection, keyPath, NOT_SET) !== NOT_SET;\n            }\n            function hasIn$1(searchKeyPath) {\n                return hasIn(this, searchKeyPath);\n            }\n            function toObject() {\n                assertNotInfinite(this.size);\n                var object = {};\n                this.__iterate(function(v, k) {\n                    object[k] = v;\n                });\n                return object;\n            }\n            // Note: all of these methods are deprecated.\n            Collection.isIterable = isCollection;\n            Collection.isKeyed = isKeyed;\n            Collection.isIndexed = isIndexed;\n            Collection.isAssociative = isAssociative;\n            Collection.isOrdered = isOrdered;\n            Collection.Iterator = Iterator;\n            mixin(Collection, {\n                // ### Conversion to other types\n                toArray: function toArray() {\n                    assertNotInfinite(this.size);\n                    var array = new Array(this.size || 0);\n                    var useTuples = isKeyed(this);\n                    var i = 0;\n                    this.__iterate(function(v, k) {\n                        // Keyed collections produce an array of tuples.\n                        array[i++] = useTuples ? [\n                            k,\n                            v\n                        ] : v;\n                    });\n                    return array;\n                },\n                toIndexedSeq: function toIndexedSeq() {\n                    return new ToIndexedSequence(this);\n                },\n                toJS: function toJS$1() {\n                    return toJS(this);\n                },\n                toKeyedSeq: function toKeyedSeq() {\n                    return new ToKeyedSequence(this, true);\n                },\n                toMap: function toMap() {\n                    // Use Late Binding here to solve the circular dependency.\n                    return Map(this.toKeyedSeq());\n                },\n                toObject: toObject,\n                toOrderedMap: function toOrderedMap() {\n                    // Use Late Binding here to solve the circular dependency.\n                    return OrderedMap(this.toKeyedSeq());\n                },\n                toOrderedSet: function toOrderedSet() {\n                    // Use Late Binding here to solve the circular dependency.\n                    return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n                },\n                toSet: function toSet() {\n                    // Use Late Binding here to solve the circular dependency.\n                    return Set(isKeyed(this) ? this.valueSeq() : this);\n                },\n                toSetSeq: function toSetSeq() {\n                    return new ToSetSequence(this);\n                },\n                toSeq: function toSeq() {\n                    return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();\n                },\n                toStack: function toStack() {\n                    // Use Late Binding here to solve the circular dependency.\n                    return Stack(isKeyed(this) ? this.valueSeq() : this);\n                },\n                toList: function toList() {\n                    // Use Late Binding here to solve the circular dependency.\n                    return List(isKeyed(this) ? this.valueSeq() : this);\n                },\n                // ### Common JavaScript methods and properties\n                toString: function toString() {\n                    return \"[Collection]\";\n                },\n                __toString: function __toString(head, tail) {\n                    if (this.size === 0) {\n                        return head + tail;\n                    }\n                    return head + \" \" + this.toSeq().map(this.__toStringMapper).join(\", \") + \" \" + tail;\n                },\n                // ### ES6 Collection methods (ES6 Array and Map)\n                concat: function concat() {\n                    var values = [], len = arguments.length;\n                    while(len--)values[len] = arguments[len];\n                    return reify(this, concatFactory(this, values));\n                },\n                includes: function includes(searchValue) {\n                    return this.some(function(value) {\n                        return is(value, searchValue);\n                    });\n                },\n                entries: function entries() {\n                    return this.__iterator(ITERATE_ENTRIES);\n                },\n                every: function every(predicate, context) {\n                    assertNotInfinite(this.size);\n                    var returnValue = true;\n                    this.__iterate(function(v, k, c) {\n                        if (!predicate.call(context, v, k, c)) {\n                            returnValue = false;\n                            return false;\n                        }\n                    });\n                    return returnValue;\n                },\n                filter: function filter(predicate, context) {\n                    return reify(this, filterFactory(this, predicate, context, true));\n                },\n                find: function find(predicate, context, notSetValue) {\n                    var entry = this.findEntry(predicate, context);\n                    return entry ? entry[1] : notSetValue;\n                },\n                forEach: function forEach(sideEffect, context) {\n                    assertNotInfinite(this.size);\n                    return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n                },\n                join: function join(separator) {\n                    assertNotInfinite(this.size);\n                    separator = separator !== undefined ? \"\" + separator : \",\";\n                    var joined = \"\";\n                    var isFirst = true;\n                    this.__iterate(function(v) {\n                        isFirst ? isFirst = false : joined += separator;\n                        joined += v !== null && v !== undefined ? v.toString() : \"\";\n                    });\n                    return joined;\n                },\n                keys: function keys() {\n                    return this.__iterator(ITERATE_KEYS);\n                },\n                map: function map(mapper, context) {\n                    return reify(this, mapFactory(this, mapper, context));\n                },\n                reduce: function reduce$1(reducer, initialReduction, context) {\n                    return reduce(this, reducer, initialReduction, context, arguments.length < 2, false);\n                },\n                reduceRight: function reduceRight(reducer, initialReduction, context) {\n                    return reduce(this, reducer, initialReduction, context, arguments.length < 2, true);\n                },\n                reverse: function reverse() {\n                    return reify(this, reverseFactory(this, true));\n                },\n                slice: function slice(begin, end) {\n                    return reify(this, sliceFactory(this, begin, end, true));\n                },\n                some: function some(predicate, context) {\n                    return !this.every(not(predicate), context);\n                },\n                sort: function sort(comparator) {\n                    return reify(this, sortFactory(this, comparator));\n                },\n                values: function values() {\n                    return this.__iterator(ITERATE_VALUES);\n                },\n                // ### More sequential methods\n                butLast: function butLast() {\n                    return this.slice(0, -1);\n                },\n                isEmpty: function isEmpty() {\n                    return this.size !== undefined ? this.size === 0 : !this.some(function() {\n                        return true;\n                    });\n                },\n                count: function count(predicate, context) {\n                    return ensureSize(predicate ? this.toSeq().filter(predicate, context) : this);\n                },\n                countBy: function countBy(grouper, context) {\n                    return countByFactory(this, grouper, context);\n                },\n                equals: function equals(other) {\n                    return deepEqual(this, other);\n                },\n                entrySeq: function entrySeq() {\n                    var collection = this;\n                    if (collection._cache) {\n                        // We cache as an entries array, so we can just return the cache!\n                        return new ArraySeq(collection._cache);\n                    }\n                    var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();\n                    entriesSequence.fromEntrySeq = function() {\n                        return collection.toSeq();\n                    };\n                    return entriesSequence;\n                },\n                filterNot: function filterNot(predicate, context) {\n                    return this.filter(not(predicate), context);\n                },\n                findEntry: function findEntry(predicate, context, notSetValue) {\n                    var found = notSetValue;\n                    this.__iterate(function(v, k, c) {\n                        if (predicate.call(context, v, k, c)) {\n                            found = [\n                                k,\n                                v\n                            ];\n                            return false;\n                        }\n                    });\n                    return found;\n                },\n                findKey: function findKey(predicate, context) {\n                    var entry = this.findEntry(predicate, context);\n                    return entry && entry[0];\n                },\n                findLast: function findLast(predicate, context, notSetValue) {\n                    return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n                },\n                findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n                    return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n                },\n                findLastKey: function findLastKey(predicate, context) {\n                    return this.toKeyedSeq().reverse().findKey(predicate, context);\n                },\n                first: function first(notSetValue) {\n                    return this.find(returnTrue, null, notSetValue);\n                },\n                flatMap: function flatMap(mapper, context) {\n                    return reify(this, flatMapFactory(this, mapper, context));\n                },\n                flatten: function flatten(depth) {\n                    return reify(this, flattenFactory(this, depth, true));\n                },\n                fromEntrySeq: function fromEntrySeq() {\n                    return new FromEntriesSequence(this);\n                },\n                get: function get(searchKey, notSetValue) {\n                    return this.find(function(_, key) {\n                        return is(key, searchKey);\n                    }, undefined, notSetValue);\n                },\n                getIn: getIn$1,\n                groupBy: function groupBy(grouper, context) {\n                    return groupByFactory(this, grouper, context);\n                },\n                has: function has(searchKey) {\n                    return this.get(searchKey, NOT_SET) !== NOT_SET;\n                },\n                hasIn: hasIn$1,\n                isSubset: function isSubset(iter) {\n                    iter = typeof iter.includes === \"function\" ? iter : Collection(iter);\n                    return this.every(function(value) {\n                        return iter.includes(value);\n                    });\n                },\n                isSuperset: function isSuperset(iter) {\n                    iter = typeof iter.isSubset === \"function\" ? iter : Collection(iter);\n                    return iter.isSubset(this);\n                },\n                keyOf: function keyOf(searchValue) {\n                    return this.findKey(function(value) {\n                        return is(value, searchValue);\n                    });\n                },\n                keySeq: function keySeq() {\n                    return this.toSeq().map(keyMapper).toIndexedSeq();\n                },\n                last: function last(notSetValue) {\n                    return this.toSeq().reverse().first(notSetValue);\n                },\n                lastKeyOf: function lastKeyOf(searchValue) {\n                    return this.toKeyedSeq().reverse().keyOf(searchValue);\n                },\n                max: function max(comparator) {\n                    return maxFactory(this, comparator);\n                },\n                maxBy: function maxBy(mapper, comparator) {\n                    return maxFactory(this, comparator, mapper);\n                },\n                min: function min(comparator) {\n                    return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n                },\n                minBy: function minBy(mapper, comparator) {\n                    return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n                },\n                rest: function rest() {\n                    return this.slice(1);\n                },\n                skip: function skip(amount) {\n                    return amount === 0 ? this : this.slice(Math.max(0, amount));\n                },\n                skipLast: function skipLast(amount) {\n                    return amount === 0 ? this : this.slice(0, -Math.max(0, amount));\n                },\n                skipWhile: function skipWhile(predicate, context) {\n                    return reify(this, skipWhileFactory(this, predicate, context, true));\n                },\n                skipUntil: function skipUntil(predicate, context) {\n                    return this.skipWhile(not(predicate), context);\n                },\n                sortBy: function sortBy(mapper, comparator) {\n                    return reify(this, sortFactory(this, comparator, mapper));\n                },\n                take: function take(amount) {\n                    return this.slice(0, Math.max(0, amount));\n                },\n                takeLast: function takeLast(amount) {\n                    return this.slice(-Math.max(0, amount));\n                },\n                takeWhile: function takeWhile(predicate, context) {\n                    return reify(this, takeWhileFactory(this, predicate, context));\n                },\n                takeUntil: function takeUntil(predicate, context) {\n                    return this.takeWhile(not(predicate), context);\n                },\n                update: function update(fn) {\n                    return fn(this);\n                },\n                valueSeq: function valueSeq() {\n                    return this.toIndexedSeq();\n                },\n                // ### Hashable Object\n                hashCode: function hashCode() {\n                    return this.__hash || (this.__hash = hashCollection(this));\n                }\n            });\n            var CollectionPrototype = Collection.prototype;\n            CollectionPrototype[IS_COLLECTION_SYMBOL] = true;\n            CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;\n            CollectionPrototype.toJSON = CollectionPrototype.toArray;\n            CollectionPrototype.__toStringMapper = quoteString;\n            CollectionPrototype.inspect = CollectionPrototype.toSource = function() {\n                return this.toString();\n            };\n            CollectionPrototype.chain = CollectionPrototype.flatMap;\n            CollectionPrototype.contains = CollectionPrototype.includes;\n            mixin(KeyedCollection, {\n                // ### More sequential methods\n                flip: function flip() {\n                    return reify(this, flipFactory(this));\n                },\n                mapEntries: function mapEntries(mapper, context) {\n                    var this$1 = this;\n                    var iterations = 0;\n                    return reify(this, this.toSeq().map(function(v, k) {\n                        return mapper.call(context, [\n                            k,\n                            v\n                        ], iterations++, this$1);\n                    }).fromEntrySeq());\n                },\n                mapKeys: function mapKeys(mapper, context) {\n                    var this$1 = this;\n                    return reify(this, this.toSeq().flip().map(function(k, v) {\n                        return mapper.call(context, k, v, this$1);\n                    }).flip());\n                }\n            });\n            var KeyedCollectionPrototype = KeyedCollection.prototype;\n            KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;\n            KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\n            KeyedCollectionPrototype.toJSON = toObject;\n            KeyedCollectionPrototype.__toStringMapper = function(v, k) {\n                return quoteString(k) + \": \" + quoteString(v);\n            };\n            mixin(IndexedCollection, {\n                // ### Conversion to other types\n                toKeyedSeq: function toKeyedSeq() {\n                    return new ToKeyedSequence(this, false);\n                },\n                // ### ES6 Collection methods (ES6 Array and Map)\n                filter: function filter(predicate, context) {\n                    return reify(this, filterFactory(this, predicate, context, false));\n                },\n                findIndex: function findIndex(predicate, context) {\n                    var entry = this.findEntry(predicate, context);\n                    return entry ? entry[0] : -1;\n                },\n                indexOf: function indexOf(searchValue) {\n                    var key = this.keyOf(searchValue);\n                    return key === undefined ? -1 : key;\n                },\n                lastIndexOf: function lastIndexOf(searchValue) {\n                    var key = this.lastKeyOf(searchValue);\n                    return key === undefined ? -1 : key;\n                },\n                reverse: function reverse() {\n                    return reify(this, reverseFactory(this, false));\n                },\n                slice: function slice(begin, end) {\n                    return reify(this, sliceFactory(this, begin, end, false));\n                },\n                splice: function splice(index, removeNum /*, ...values*/ ) {\n                    var numArgs = arguments.length;\n                    removeNum = Math.max(removeNum || 0, 0);\n                    if (numArgs === 0 || numArgs === 2 && !removeNum) {\n                        return this;\n                    }\n                    // If index is negative, it should resolve relative to the size of the\n                    // collection. However size may be expensive to compute if not cached, so\n                    // only call count() if the number is in fact negative.\n                    index = resolveBegin(index, index < 0 ? this.count() : this.size);\n                    var spliced = this.slice(0, index);\n                    return reify(this, numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum)));\n                },\n                // ### More collection methods\n                findLastIndex: function findLastIndex(predicate, context) {\n                    var entry = this.findLastEntry(predicate, context);\n                    return entry ? entry[0] : -1;\n                },\n                first: function first(notSetValue) {\n                    return this.get(0, notSetValue);\n                },\n                flatten: function flatten(depth) {\n                    return reify(this, flattenFactory(this, depth, false));\n                },\n                get: function get(index, notSetValue) {\n                    index = wrapIndex(this, index);\n                    return index < 0 || this.size === Infinity || this.size !== undefined && index > this.size ? notSetValue : this.find(function(_, key) {\n                        return key === index;\n                    }, undefined, notSetValue);\n                },\n                has: function has(index) {\n                    index = wrapIndex(this, index);\n                    return index >= 0 && (this.size !== undefined ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);\n                },\n                interpose: function interpose(separator) {\n                    return reify(this, interposeFactory(this, separator));\n                },\n                interleave: function interleave() {\n                    var collections = [\n                        this\n                    ].concat(arrCopy(arguments));\n                    var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);\n                    var interleaved = zipped.flatten(true);\n                    if (zipped.size) {\n                        interleaved.size = zipped.size * collections.length;\n                    }\n                    return reify(this, interleaved);\n                },\n                keySeq: function keySeq() {\n                    return Range(0, this.size);\n                },\n                last: function last(notSetValue) {\n                    return this.get(-1, notSetValue);\n                },\n                skipWhile: function skipWhile(predicate, context) {\n                    return reify(this, skipWhileFactory(this, predicate, context, false));\n                },\n                zip: function zip() {\n                    var collections = [\n                        this\n                    ].concat(arrCopy(arguments));\n                    return reify(this, zipWithFactory(this, defaultZipper, collections));\n                },\n                zipAll: function zipAll() {\n                    var collections = [\n                        this\n                    ].concat(arrCopy(arguments));\n                    return reify(this, zipWithFactory(this, defaultZipper, collections, true));\n                },\n                zipWith: function zipWith(zipper /*, ...collections */ ) {\n                    var collections = arrCopy(arguments);\n                    collections[0] = this;\n                    return reify(this, zipWithFactory(this, zipper, collections));\n                }\n            });\n            var IndexedCollectionPrototype = IndexedCollection.prototype;\n            IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;\n            IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;\n            mixin(SetCollection, {\n                // ### ES6 Collection methods (ES6 Array and Map)\n                get: function get(value, notSetValue) {\n                    return this.has(value) ? value : notSetValue;\n                },\n                includes: function includes(value) {\n                    return this.has(value);\n                },\n                // ### More sequential methods\n                keySeq: function keySeq() {\n                    return this.valueSeq();\n                }\n            });\n            SetCollection.prototype.has = CollectionPrototype.includes;\n            SetCollection.prototype.contains = SetCollection.prototype.includes;\n            // Mixin subclasses\n            mixin(KeyedSeq, KeyedCollection.prototype);\n            mixin(IndexedSeq, IndexedCollection.prototype);\n            mixin(SetSeq, SetCollection.prototype);\n            // #pragma Helper functions\n            function reduce(collection, reducer, reduction, context, useFirst, reverse) {\n                assertNotInfinite(collection.size);\n                collection.__iterate(function(v, k, c) {\n                    if (useFirst) {\n                        useFirst = false;\n                        reduction = v;\n                    } else {\n                        reduction = reducer.call(context, reduction, v, k, c);\n                    }\n                }, reverse);\n                return reduction;\n            }\n            function keyMapper(v, k) {\n                return k;\n            }\n            function entryMapper(v, k) {\n                return [\n                    k,\n                    v\n                ];\n            }\n            function not(predicate) {\n                return function() {\n                    return !predicate.apply(this, arguments);\n                };\n            }\n            function neg(predicate) {\n                return function() {\n                    return -predicate.apply(this, arguments);\n                };\n            }\n            function defaultZipper() {\n                return arrCopy(arguments);\n            }\n            function defaultNegComparator(a, b) {\n                return a < b ? 1 : a > b ? -1 : 0;\n            }\n            function hashCollection(collection) {\n                if (collection.size === Infinity) {\n                    return 0;\n                }\n                var ordered = isOrdered(collection);\n                var keyed = isKeyed(collection);\n                var h = ordered ? 1 : 0;\n                var size = collection.__iterate(keyed ? ordered ? function(v, k) {\n                    h = 31 * h + hashMerge(hash(v), hash(k)) | 0;\n                } : function(v, k) {\n                    h = h + hashMerge(hash(v), hash(k)) | 0;\n                } : ordered ? function(v) {\n                    h = 31 * h + hash(v) | 0;\n                } : function(v) {\n                    h = h + hash(v) | 0;\n                });\n                return murmurHashOfSize(size, h);\n            }\n            function murmurHashOfSize(size, h) {\n                h = imul(h, 0xcc9e2d51);\n                h = imul(h << 15 | h >>> -15, 0x1b873593);\n                h = imul(h << 13 | h >>> -13, 5);\n                h = (h + 0xe6546b64 | 0) ^ size;\n                h = imul(h ^ h >>> 16, 0x85ebca6b);\n                h = imul(h ^ h >>> 13, 0xc2b2ae35);\n                h = smi(h ^ h >>> 16);\n                return h;\n            }\n            function hashMerge(a, b) {\n                return a ^ b + 0x9e3779b9 + (a << 6) + (a >> 2) | 0; // int\n            }\n            var OrderedSet = /*@__PURE__*/ function(Set$$1) {\n                function OrderedSet(value) {\n                    return value === null || value === undefined ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function(set) {\n                        var iter = SetCollection(value);\n                        assertNotInfinite(iter.size);\n                        iter.forEach(function(v) {\n                            return set.add(v);\n                        });\n                    });\n                }\n                if (Set$$1) OrderedSet.__proto__ = Set$$1;\n                OrderedSet.prototype = Object.create(Set$$1 && Set$$1.prototype);\n                OrderedSet.prototype.constructor = OrderedSet;\n                OrderedSet.of = function of() {\n                    return this(arguments);\n                };\n                OrderedSet.fromKeys = function fromKeys(value) {\n                    return this(KeyedCollection(value).keySeq());\n                };\n                OrderedSet.prototype.toString = function toString() {\n                    return this.__toString(\"OrderedSet {\", \"}\");\n                };\n                return OrderedSet;\n            }(Set);\n            OrderedSet.isOrderedSet = isOrderedSet;\n            var OrderedSetPrototype = OrderedSet.prototype;\n            OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;\n            OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\n            OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\n            OrderedSetPrototype.__empty = emptyOrderedSet;\n            OrderedSetPrototype.__make = makeOrderedSet;\n            function makeOrderedSet(map, ownerID) {\n                var set = Object.create(OrderedSetPrototype);\n                set.size = map ? map.size : 0;\n                set._map = map;\n                set.__ownerID = ownerID;\n                return set;\n            }\n            var EMPTY_ORDERED_SET;\n            function emptyOrderedSet() {\n                return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n            }\n            var Record = function Record(defaultValues, name) {\n                var hasInitialized;\n                var RecordType = function Record(values) {\n                    var this$1 = this;\n                    if (values instanceof RecordType) {\n                        return values;\n                    }\n                    if (!(this instanceof RecordType)) {\n                        return new RecordType(values);\n                    }\n                    if (!hasInitialized) {\n                        hasInitialized = true;\n                        var keys = Object.keys(defaultValues);\n                        var indices = RecordTypePrototype._indices = {};\n                        // Deprecated: left to attempt not to break any external code which\n                        // relies on a ._name property existing on record instances.\n                        // Use Record.getDescriptiveName() instead\n                        RecordTypePrototype._name = name;\n                        RecordTypePrototype._keys = keys;\n                        RecordTypePrototype._defaultValues = defaultValues;\n                        for(var i = 0; i < keys.length; i++){\n                            var propName = keys[i];\n                            indices[propName] = i;\n                            if (RecordTypePrototype[propName]) {\n                                /* eslint-disable no-console */ typeof console === \"object\" && console.warn && console.warn(\"Cannot define \" + recordName(this) + ' with property \"' + propName + '\" since that property name is part of the Record API.');\n                            /* eslint-enable no-console */ } else {\n                                setProp(RecordTypePrototype, propName);\n                            }\n                        }\n                    }\n                    this.__ownerID = undefined;\n                    this._values = List().withMutations(function(l) {\n                        l.setSize(this$1._keys.length);\n                        KeyedCollection(values).forEach(function(v, k) {\n                            l.set(this$1._indices[k], v === this$1._defaultValues[k] ? undefined : v);\n                        });\n                    });\n                };\n                var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n                RecordTypePrototype.constructor = RecordType;\n                if (name) {\n                    RecordType.displayName = name;\n                }\n                return RecordType;\n            };\n            Record.prototype.toString = function toString() {\n                var str = recordName(this) + \" { \";\n                var keys = this._keys;\n                var k;\n                for(var i = 0, l = keys.length; i !== l; i++){\n                    k = keys[i];\n                    str += (i ? \", \" : \"\") + k + \": \" + quoteString(this.get(k));\n                }\n                return str + \" }\";\n            };\n            Record.prototype.equals = function equals(other) {\n                return this === other || other && this._keys === other._keys && recordSeq(this).equals(recordSeq(other));\n            };\n            Record.prototype.hashCode = function hashCode() {\n                return recordSeq(this).hashCode();\n            };\n            // @pragma Access\n            Record.prototype.has = function has(k) {\n                return this._indices.hasOwnProperty(k);\n            };\n            Record.prototype.get = function get(k, notSetValue) {\n                if (!this.has(k)) {\n                    return notSetValue;\n                }\n                var index = this._indices[k];\n                var value = this._values.get(index);\n                return value === undefined ? this._defaultValues[k] : value;\n            };\n            // @pragma Modification\n            Record.prototype.set = function set(k, v) {\n                if (this.has(k)) {\n                    var newValues = this._values.set(this._indices[k], v === this._defaultValues[k] ? undefined : v);\n                    if (newValues !== this._values && !this.__ownerID) {\n                        return makeRecord(this, newValues);\n                    }\n                }\n                return this;\n            };\n            Record.prototype.remove = function remove(k) {\n                return this.set(k);\n            };\n            Record.prototype.clear = function clear() {\n                var newValues = this._values.clear().setSize(this._keys.length);\n                return this.__ownerID ? this : makeRecord(this, newValues);\n            };\n            Record.prototype.wasAltered = function wasAltered() {\n                return this._values.wasAltered();\n            };\n            Record.prototype.toSeq = function toSeq() {\n                return recordSeq(this);\n            };\n            Record.prototype.toJS = function toJS$1() {\n                return toJS(this);\n            };\n            Record.prototype.entries = function entries() {\n                return this.__iterator(ITERATE_ENTRIES);\n            };\n            Record.prototype.__iterator = function __iterator(type, reverse) {\n                return recordSeq(this).__iterator(type, reverse);\n            };\n            Record.prototype.__iterate = function __iterate(fn, reverse) {\n                return recordSeq(this).__iterate(fn, reverse);\n            };\n            Record.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n                if (ownerID === this.__ownerID) {\n                    return this;\n                }\n                var newValues = this._values.__ensureOwner(ownerID);\n                if (!ownerID) {\n                    this.__ownerID = ownerID;\n                    this._values = newValues;\n                    return this;\n                }\n                return makeRecord(this, newValues, ownerID);\n            };\n            Record.isRecord = isRecord;\n            Record.getDescriptiveName = recordName;\n            var RecordPrototype = Record.prototype;\n            RecordPrototype[IS_RECORD_SYMBOL] = true;\n            RecordPrototype[DELETE] = RecordPrototype.remove;\n            RecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;\n            RecordPrototype.getIn = getIn$1;\n            RecordPrototype.hasIn = CollectionPrototype.hasIn;\n            RecordPrototype.merge = merge;\n            RecordPrototype.mergeWith = mergeWith;\n            RecordPrototype.mergeIn = mergeIn;\n            RecordPrototype.mergeDeep = mergeDeep$1;\n            RecordPrototype.mergeDeepWith = mergeDeepWith$1;\n            RecordPrototype.mergeDeepIn = mergeDeepIn;\n            RecordPrototype.setIn = setIn$1;\n            RecordPrototype.update = update$1;\n            RecordPrototype.updateIn = updateIn$1;\n            RecordPrototype.withMutations = withMutations;\n            RecordPrototype.asMutable = asMutable;\n            RecordPrototype.asImmutable = asImmutable;\n            RecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;\n            RecordPrototype.toJSON = RecordPrototype.toObject = CollectionPrototype.toObject;\n            RecordPrototype.inspect = RecordPrototype.toSource = function() {\n                return this.toString();\n            };\n            function makeRecord(likeRecord, values, ownerID) {\n                var record = Object.create(Object.getPrototypeOf(likeRecord));\n                record._values = values;\n                record.__ownerID = ownerID;\n                return record;\n            }\n            function recordName(record) {\n                return record.constructor.displayName || record.constructor.name || \"Record\";\n            }\n            function recordSeq(record) {\n                return keyedSeqFromValue(record._keys.map(function(k) {\n                    return [\n                        k,\n                        record.get(k)\n                    ];\n                }));\n            }\n            function setProp(prototype, name) {\n                try {\n                    Object.defineProperty(prototype, name, {\n                        get: function() {\n                            return this.get(name);\n                        },\n                        set: function(value) {\n                            invariant(this.__ownerID, \"Cannot set on an immutable record.\");\n                            this.set(name, value);\n                        }\n                    });\n                } catch (error) {\n                // Object.defineProperty failed. Probably IE8.\n                }\n            }\n            /**\n * Returns a lazy Seq of `value` repeated `times` times. When `times` is\n * undefined, returns an infinite sequence of `value`.\n */ var Repeat = /*@__PURE__*/ function(IndexedSeq$$1) {\n                function Repeat(value, times) {\n                    if (!(this instanceof Repeat)) {\n                        return new Repeat(value, times);\n                    }\n                    this._value = value;\n                    this.size = times === undefined ? Infinity : Math.max(0, times);\n                    if (this.size === 0) {\n                        if (EMPTY_REPEAT) {\n                            return EMPTY_REPEAT;\n                        }\n                        EMPTY_REPEAT = this;\n                    }\n                }\n                if (IndexedSeq$$1) Repeat.__proto__ = IndexedSeq$$1;\n                Repeat.prototype = Object.create(IndexedSeq$$1 && IndexedSeq$$1.prototype);\n                Repeat.prototype.constructor = Repeat;\n                Repeat.prototype.toString = function toString() {\n                    if (this.size === 0) {\n                        return \"Repeat []\";\n                    }\n                    return \"Repeat [ \" + this._value + \" \" + this.size + \" times ]\";\n                };\n                Repeat.prototype.get = function get(index, notSetValue) {\n                    return this.has(index) ? this._value : notSetValue;\n                };\n                Repeat.prototype.includes = function includes(searchValue) {\n                    return is(this._value, searchValue);\n                };\n                Repeat.prototype.slice = function slice(begin, end) {\n                    var size = this.size;\n                    return wholeSlice(begin, end, size) ? this : new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n                };\n                Repeat.prototype.reverse = function reverse() {\n                    return this;\n                };\n                Repeat.prototype.indexOf = function indexOf(searchValue) {\n                    if (is(this._value, searchValue)) {\n                        return 0;\n                    }\n                    return -1;\n                };\n                Repeat.prototype.lastIndexOf = function lastIndexOf(searchValue) {\n                    if (is(this._value, searchValue)) {\n                        return this.size;\n                    }\n                    return -1;\n                };\n                Repeat.prototype.__iterate = function __iterate(fn, reverse) {\n                    var size = this.size;\n                    var i = 0;\n                    while(i !== size){\n                        if (fn(this._value, reverse ? size - ++i : i++, this) === false) {\n                            break;\n                        }\n                    }\n                    return i;\n                };\n                Repeat.prototype.__iterator = function __iterator(type, reverse) {\n                    var this$1 = this;\n                    var size = this.size;\n                    var i = 0;\n                    return new Iterator(function() {\n                        return i === size ? iteratorDone() : iteratorValue(type, reverse ? size - ++i : i++, this$1._value);\n                    });\n                };\n                Repeat.prototype.equals = function equals(other) {\n                    return other instanceof Repeat ? is(this._value, other._value) : deepEqual(other);\n                };\n                return Repeat;\n            }(IndexedSeq);\n            var EMPTY_REPEAT;\n            function fromJS(value, converter) {\n                return fromJSWith([], converter || defaultConverter, value, \"\", converter && converter.length > 2 ? [] : undefined, {\n                    \"\": value\n                });\n            }\n            function fromJSWith(stack, converter, value, key, keyPath, parentValue) {\n                var toSeq = Array.isArray(value) ? IndexedSeq : isPlainObj(value) ? KeyedSeq : null;\n                if (toSeq) {\n                    if (~stack.indexOf(value)) {\n                        throw new TypeError(\"Cannot convert circular structure to Immutable\");\n                    }\n                    stack.push(value);\n                    keyPath && key !== \"\" && keyPath.push(key);\n                    var converted = converter.call(parentValue, key, toSeq(value).map(function(v, k) {\n                        return fromJSWith(stack, converter, v, k, keyPath, value);\n                    }), keyPath && keyPath.slice());\n                    stack.pop();\n                    keyPath && keyPath.pop();\n                    return converted;\n                }\n                return value;\n            }\n            function defaultConverter(k, v) {\n                return isKeyed(v) ? v.toMap() : v.toList();\n            }\n            var version = \"4.0.0-rc.11\";\n            var Immutable = {\n                version: version,\n                Collection: Collection,\n                // Note: Iterable is deprecated\n                Iterable: Collection,\n                Seq: Seq,\n                Map: Map,\n                OrderedMap: OrderedMap,\n                List: List,\n                Stack: Stack,\n                Set: Set,\n                OrderedSet: OrderedSet,\n                Record: Record,\n                Range: Range,\n                Repeat: Repeat,\n                is: is,\n                fromJS: fromJS,\n                hash: hash,\n                isImmutable: isImmutable,\n                isCollection: isCollection,\n                isKeyed: isKeyed,\n                isIndexed: isIndexed,\n                isAssociative: isAssociative,\n                isOrdered: isOrdered,\n                isValueObject: isValueObject,\n                isSeq: isSeq,\n                isList: isList,\n                isMap: isMap,\n                isOrderedMap: isOrderedMap,\n                isStack: isStack,\n                isSet: isSet,\n                isOrderedSet: isOrderedSet,\n                isRecord: isRecord,\n                get: get,\n                getIn: getIn,\n                has: has,\n                hasIn: hasIn,\n                merge: merge$1,\n                mergeDeep: mergeDeep,\n                mergeWith: mergeWith$1,\n                mergeDeepWith: mergeDeepWith,\n                remove: remove,\n                removeIn: removeIn,\n                set: set,\n                setIn: setIn,\n                update: update,\n                updateIn: updateIn\n            };\n            // Note: Iterable is deprecated\n            var Iterable = Collection;\n            /* harmony default export */ __nested_webpack_exports__[\"default\"] = Immutable;\n        /***/ },\n        /***/ \"./node_modules/minimatch-capture/index.js\": /*!*************************************************!*\\\n  !*** ./node_modules/minimatch-capture/index.js ***!\n  \\*************************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_268003__) {\n            \"use strict\";\n            const minimatch = __nested_webpack_require_268003__(/*! minimatch */ \"./node_modules/minimatch/minimatch.js\");\n            const splitRe = /([!?+*@]\\([^)]+\\)|\\*{1,2}|\\?)/;\n            const endWithNegRe = /!\\([^)]+\\)$/;\n            class Capture {\n                constructor(pattern, options){\n                    this.pattern = pattern;\n                    this.options = options || {};\n                }\n                makeRe() {\n                    if (!this.regexp && this.regexp !== false) {\n                        this.regexp = makeRe(this.pattern, this.options);\n                    }\n                    return this.regexp;\n                }\n                capture(path) {\n                    let result = false;\n                    let match = path.match(this.makeRe());\n                    if (match) {\n                        match = match.filter(isDef);\n                        result = match[1] || match[0];\n                        if (!this.options.notrim && result !== \"/\") {\n                            result = result.replace(/^\\/|\\/$/g, \"\");\n                        }\n                    }\n                    return result;\n                }\n            }\n            function split(pattern) {\n                const parts = pattern.split(splitRe);\n                if (parts.length === 1) {\n                    return [\n                        \"\",\n                        parts[0],\n                        \"\"\n                    ];\n                }\n                return [\n                    parts[0],\n                    parts.slice(1, -1).join(\"\"),\n                    parts[parts.length - 1]\n                ];\n            }\n            const nonegate = {\n                nonegate: true\n            };\n            function _makeRe(pattern, options) {\n                const flags = options && options.nocase ? \"i\" : \"\";\n                const subpatterns = minimatch.braceExpand(pattern, options);\n                const expressions = subpatterns.map((subpattern)=>{\n                    const parts = split(subpattern);\n                    const left = parts[0];\n                    const middle = parts[1];\n                    const right = parts[2];\n                    const opts = left ? Object.assign({}, options, nonegate) : options;\n                    const re = minimatch.makeRe(middle, opts);\n                    let capture = re.source.slice(4, -2);\n                    if (endWithNegRe.test(middle)) {\n                        capture = capture.replace(/\\)\\$\\)/g, \"(?\" + (right.startsWith(\"/\") ? \"=\" : \"!\") + \"/)))\");\n                    }\n                    return regExpEscape(left) + \"(\" + capture + \")\" + regExpEscape(right);\n                });\n                return new RegExp(\"^(?:\" + expressions.join(\"|\") + \")$\", flags);\n            }\n            function makeRe(pattern, options) {\n                try {\n                    return _makeRe(pattern, options);\n                } catch (e) {\n                    return false;\n                }\n            }\n            function match(list, pattern, options) {\n                const cap = new Capture(pattern, options);\n                const result = [];\n                for(let i = 0; i < list.length; i++){\n                    const path = list[i];\n                    const match = cap.capture(path);\n                    if (match) {\n                        result.push([\n                            path,\n                            match\n                        ]);\n                    }\n                }\n                return result;\n            }\n            module1.exports = function(path, pattern, options) {\n                return new Capture(pattern, options).capture(path);\n            };\n            Object.assign(module1.exports, {\n                Capture,\n                split,\n                makeRe,\n                match\n            });\n            function isDef(v) {\n                return v !== undefined;\n            }\n            // private function copied from https://github.com/isaacs/minimatch\n            function regExpEscape(s) {\n                return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n            }\n        /***/ },\n        /***/ \"./node_modules/minimatch/minimatch.js\": /*!*********************************************!*\\\n  !*** ./node_modules/minimatch/minimatch.js ***!\n  \\*********************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_272481__) {\n            module1.exports = minimatch;\n            minimatch.Minimatch = Minimatch;\n            var path = {\n                sep: \"/\"\n            };\n            try {\n                path = __nested_webpack_require_272481__(/*! path */ \"./node_modules/path-browserify/index.js\");\n            } catch (er) {}\n            var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};\n            var expand = __nested_webpack_require_272481__(/*! brace-expansion */ \"./node_modules/brace-expansion/index.js\");\n            var plTypes = {\n                \"!\": {\n                    open: \"(?:(?!(?:\",\n                    close: \"))[^/]*?)\"\n                },\n                \"?\": {\n                    open: \"(?:\",\n                    close: \")?\"\n                },\n                \"+\": {\n                    open: \"(?:\",\n                    close: \")+\"\n                },\n                \"*\": {\n                    open: \"(?:\",\n                    close: \")*\"\n                },\n                \"@\": {\n                    open: \"(?:\",\n                    close: \")\"\n                }\n            };\n            // any single thing other than /\n            // don't need to escape / when using new RegExp()\n            var qmark = \"[^/]\";\n            // * => any number of characters\n            var star = qmark + \"*?\";\n            // ** when dots are allowed.  Anything goes, except .. and .\n            // not (^ or / followed by one or two dots followed by $ or /),\n            // followed by anything, any number of times.\n            var twoStarDot = \"(?:(?!(?:\\\\/|^)(?:\\\\.{1,2})($|\\\\/)).)*?\";\n            // not a ^ or / followed by a dot,\n            // followed by anything, any number of times.\n            var twoStarNoDot = \"(?:(?!(?:\\\\/|^)\\\\.).)*?\";\n            // characters that need to be escaped in RegExp.\n            var reSpecials = charSet(\"().*{}+?[]^$\\\\!\");\n            // \"abc\" -> { a:true, b:true, c:true }\n            function charSet(s) {\n                return s.split(\"\").reduce(function(set, c) {\n                    set[c] = true;\n                    return set;\n                }, {});\n            }\n            // normalizes slashes.\n            var slashSplit = /\\/+/;\n            minimatch.filter = filter;\n            function filter(pattern, options) {\n                options = options || {};\n                return function(p, i, list) {\n                    return minimatch(p, pattern, options);\n                };\n            }\n            function ext(a, b) {\n                a = a || {};\n                b = b || {};\n                var t = {};\n                Object.keys(b).forEach(function(k) {\n                    t[k] = b[k];\n                });\n                Object.keys(a).forEach(function(k) {\n                    t[k] = a[k];\n                });\n                return t;\n            }\n            minimatch.defaults = function(def) {\n                if (!def || !Object.keys(def).length) return minimatch;\n                var orig = minimatch;\n                var m = function minimatch(p, pattern, options) {\n                    return orig.minimatch(p, pattern, ext(def, options));\n                };\n                m.Minimatch = function Minimatch(pattern, options) {\n                    return new orig.Minimatch(pattern, ext(def, options));\n                };\n                return m;\n            };\n            Minimatch.defaults = function(def) {\n                if (!def || !Object.keys(def).length) return Minimatch;\n                return minimatch.defaults(def).Minimatch;\n            };\n            function minimatch(p, pattern, options) {\n                if (typeof pattern !== \"string\") {\n                    throw new TypeError(\"glob pattern string required\");\n                }\n                if (!options) options = {};\n                // shortcut: comments match nothing.\n                if (!options.nocomment && pattern.charAt(0) === \"#\") {\n                    return false;\n                }\n                // \"\" only matches \"\"\n                if (pattern.trim() === \"\") return p === \"\";\n                return new Minimatch(pattern, options).match(p);\n            }\n            function Minimatch(pattern, options) {\n                if (!(this instanceof Minimatch)) {\n                    return new Minimatch(pattern, options);\n                }\n                if (typeof pattern !== \"string\") {\n                    throw new TypeError(\"glob pattern string required\");\n                }\n                if (!options) options = {};\n                pattern = pattern.trim();\n                // windows support: need to use /, not \\\n                if (path.sep !== \"/\") {\n                    pattern = pattern.split(path.sep).join(\"/\");\n                }\n                this.options = options;\n                this.set = [];\n                this.pattern = pattern;\n                this.regexp = null;\n                this.negate = false;\n                this.comment = false;\n                this.empty = false;\n                // make the set of regexps etc.\n                this.make();\n            }\n            Minimatch.prototype.debug = function() {};\n            Minimatch.prototype.make = make;\n            function make() {\n                // don't do it more than once.\n                if (this._made) return;\n                var pattern = this.pattern;\n                var options = this.options;\n                // empty patterns and comments match nothing.\n                if (!options.nocomment && pattern.charAt(0) === \"#\") {\n                    this.comment = true;\n                    return;\n                }\n                if (!pattern) {\n                    this.empty = true;\n                    return;\n                }\n                // step 1: figure out negation, etc.\n                this.parseNegate();\n                // step 2: expand braces\n                var set = this.globSet = this.braceExpand();\n                if (options.debug) this.debug = console.error;\n                this.debug(this.pattern, set);\n                // step 3: now we have a set, so turn each one into a series of path-portion\n                // matching patterns.\n                // These will be regexps, except in the case of \"**\", which is\n                // set to the GLOBSTAR object for globstar behavior,\n                // and will not contain any / characters\n                set = this.globParts = set.map(function(s) {\n                    return s.split(slashSplit);\n                });\n                this.debug(this.pattern, set);\n                // glob --> regexps\n                set = set.map(function(s, si, set) {\n                    return s.map(this.parse, this);\n                }, this);\n                this.debug(this.pattern, set);\n                // filter out everything that didn't compile properly.\n                set = set.filter(function(s) {\n                    return s.indexOf(false) === -1;\n                });\n                this.debug(this.pattern, set);\n                this.set = set;\n            }\n            Minimatch.prototype.parseNegate = parseNegate;\n            function parseNegate() {\n                var pattern = this.pattern;\n                var negate = false;\n                var options = this.options;\n                var negateOffset = 0;\n                if (options.nonegate) return;\n                for(var i = 0, l = pattern.length; i < l && pattern.charAt(i) === \"!\"; i++){\n                    negate = !negate;\n                    negateOffset++;\n                }\n                if (negateOffset) this.pattern = pattern.substr(negateOffset);\n                this.negate = negate;\n            }\n            // Brace expansion:\n            // a{b,c}d -> abd acd\n            // a{b,}c -> abc ac\n            // a{0..3}d -> a0d a1d a2d a3d\n            // a{b,c{d,e}f}g -> abg acdfg acefg\n            // a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n            //\n            // Invalid sets are not expanded.\n            // a{2..}b -> a{2..}b\n            // a{b}c -> a{b}c\n            minimatch.braceExpand = function(pattern, options) {\n                return braceExpand(pattern, options);\n            };\n            Minimatch.prototype.braceExpand = braceExpand;\n            function braceExpand(pattern, options) {\n                if (!options) {\n                    if (this instanceof Minimatch) {\n                        options = this.options;\n                    } else {\n                        options = {};\n                    }\n                }\n                pattern = typeof pattern === \"undefined\" ? this.pattern : pattern;\n                if (typeof pattern === \"undefined\") {\n                    throw new TypeError(\"undefined pattern\");\n                }\n                if (options.nobrace || !pattern.match(/\\{.*\\}/)) {\n                    // shortcut. no need to expand.\n                    return [\n                        pattern\n                    ];\n                }\n                return expand(pattern);\n            }\n            // parse a component of the expanded set.\n            // At this point, no pattern may contain \"/\" in it\n            // so we're going to return a 2d array, where each entry is the full\n            // pattern, split on '/', and then turned into a regular expression.\n            // A regexp is made at the end which joins each array with an\n            // escaped /, and another full one which joins each regexp with |.\n            //\n            // Following the lead of Bash 4.1, note that \"**\" only has special meaning\n            // when it is the *only* thing in a path portion.  Otherwise, any series\n            // of * is equivalent to a single *.  Globstar behavior is enabled by\n            // default, and can be disabled by setting options.noglobstar.\n            Minimatch.prototype.parse = parse;\n            var SUBPARSE = {};\n            function parse(pattern, isSub) {\n                if (pattern.length > 1024 * 64) {\n                    throw new TypeError(\"pattern is too long\");\n                }\n                var options = this.options;\n                // shortcuts\n                if (!options.noglobstar && pattern === \"**\") return GLOBSTAR;\n                if (pattern === \"\") return \"\";\n                var re = \"\";\n                var hasMagic = !!options.nocase;\n                var escaping = false;\n                // ? => one single character\n                var patternListStack = [];\n                var negativeLists = [];\n                var stateChar;\n                var inClass = false;\n                var reClassStart = -1;\n                var classStart = -1;\n                // . and .. never match anything that doesn't start with .,\n                // even when options.dot is set.\n                var patternStart = pattern.charAt(0) === \".\" ? \"\" // anything\n                 : options.dot ? \"(?!(?:^|\\\\/)\\\\.{1,2}(?:$|\\\\/))\" : \"(?!\\\\.)\";\n                var self = this;\n                function clearStateChar() {\n                    if (stateChar) {\n                        // we had some state-tracking character\n                        // that wasn't consumed by this pass.\n                        switch(stateChar){\n                            case \"*\":\n                                re += star;\n                                hasMagic = true;\n                                break;\n                            case \"?\":\n                                re += qmark;\n                                hasMagic = true;\n                                break;\n                            default:\n                                re += \"\\\\\" + stateChar;\n                                break;\n                        }\n                        self.debug(\"clearStateChar %j %j\", stateChar, re);\n                        stateChar = false;\n                    }\n                }\n                for(var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++){\n                    this.debug(\"%s\t%s %s %j\", pattern, i, re, c);\n                    // skip over any that are escaped.\n                    if (escaping && reSpecials[c]) {\n                        re += \"\\\\\" + c;\n                        escaping = false;\n                        continue;\n                    }\n                    switch(c){\n                        case \"/\":\n                            // completely not allowed, even escaped.\n                            // Should already be path-split by now.\n                            return false;\n                        case \"\\\\\":\n                            clearStateChar();\n                            escaping = true;\n                            continue;\n                        // the various stateChar values\n                        // for the \"extglob\" stuff.\n                        case \"?\":\n                        case \"*\":\n                        case \"+\":\n                        case \"@\":\n                        case \"!\":\n                            this.debug(\"%s\t%s %s %j <-- stateChar\", pattern, i, re, c);\n                            // all of those are literals inside a class, except that\n                            // the glob [!a] means [^a] in regexp\n                            if (inClass) {\n                                this.debug(\"  in class\");\n                                if (c === \"!\" && i === classStart + 1) c = \"^\";\n                                re += c;\n                                continue;\n                            }\n                            // if we already have a stateChar, then it means\n                            // that there was something like ** or +? in there.\n                            // Handle the stateChar, then proceed with this one.\n                            self.debug(\"call clearStateChar %j\", stateChar);\n                            clearStateChar();\n                            stateChar = c;\n                            // if extglob is disabled, then +(asdf|foo) isn't a thing.\n                            // just clear the statechar *now*, rather than even diving into\n                            // the patternList stuff.\n                            if (options.noext) clearStateChar();\n                            continue;\n                        case \"(\":\n                            if (inClass) {\n                                re += \"(\";\n                                continue;\n                            }\n                            if (!stateChar) {\n                                re += \"\\\\(\";\n                                continue;\n                            }\n                            patternListStack.push({\n                                type: stateChar,\n                                start: i - 1,\n                                reStart: re.length,\n                                open: plTypes[stateChar].open,\n                                close: plTypes[stateChar].close\n                            });\n                            // negation is (?:(?!js)[^/]*)\n                            re += stateChar === \"!\" ? \"(?:(?!(?:\" : \"(?:\";\n                            this.debug(\"plType %j %j\", stateChar, re);\n                            stateChar = false;\n                            continue;\n                        case \")\":\n                            if (inClass || !patternListStack.length) {\n                                re += \"\\\\)\";\n                                continue;\n                            }\n                            clearStateChar();\n                            hasMagic = true;\n                            var pl = patternListStack.pop();\n                            // negation is (?:(?!js)[^/]*)\n                            // The others are (?:<pattern>)<type>\n                            re += pl.close;\n                            if (pl.type === \"!\") {\n                                negativeLists.push(pl);\n                            }\n                            pl.reEnd = re.length;\n                            continue;\n                        case \"|\":\n                            if (inClass || !patternListStack.length || escaping) {\n                                re += \"\\\\|\";\n                                escaping = false;\n                                continue;\n                            }\n                            clearStateChar();\n                            re += \"|\";\n                            continue;\n                        // these are mostly the same in regexp and glob\n                        case \"[\":\n                            // swallow any state-tracking char before the [\n                            clearStateChar();\n                            if (inClass) {\n                                re += \"\\\\\" + c;\n                                continue;\n                            }\n                            inClass = true;\n                            classStart = i;\n                            reClassStart = re.length;\n                            re += c;\n                            continue;\n                        case \"]\":\n                            //  a right bracket shall lose its special\n                            //  meaning and represent itself in\n                            //  a bracket expression if it occurs\n                            //  first in the list.  -- POSIX.2 2.8.3.2\n                            if (i === classStart + 1 || !inClass) {\n                                re += \"\\\\\" + c;\n                                escaping = false;\n                                continue;\n                            }\n                            // handle the case where we left a class open.\n                            // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n                            if (inClass) {\n                                // split where the last [ was, make sure we don't have\n                                // an invalid re. if so, re-walk the contents of the\n                                // would-be class to re-translate any characters that\n                                // were passed through as-is\n                                // TODO: It would probably be faster to determine this\n                                // without a try/catch and a new RegExp, but it's tricky\n                                // to do safely.  For now, this is safe and works.\n                                var cs = pattern.substring(classStart + 1, i);\n                                try {\n                                    RegExp(\"[\" + cs + \"]\");\n                                } catch (er) {\n                                    // not a valid class!\n                                    var sp = this.parse(cs, SUBPARSE);\n                                    re = re.substr(0, reClassStart) + \"\\\\[\" + sp[0] + \"\\\\]\";\n                                    hasMagic = hasMagic || sp[1];\n                                    inClass = false;\n                                    continue;\n                                }\n                            }\n                            // finish up the class.\n                            hasMagic = true;\n                            inClass = false;\n                            re += c;\n                            continue;\n                        default:\n                            // swallow any state char that wasn't consumed\n                            clearStateChar();\n                            if (escaping) {\n                                // no need\n                                escaping = false;\n                            } else if (reSpecials[c] && !(c === \"^\" && inClass)) {\n                                re += \"\\\\\";\n                            }\n                            re += c;\n                    } // switch\n                } // for\n                // handle the case where we left a class open.\n                // \"[abc\" is valid, equivalent to \"\\[abc\"\n                if (inClass) {\n                    // split where the last [ was, and escape it\n                    // this is a huge pita.  We now have to re-walk\n                    // the contents of the would-be class to re-translate\n                    // any characters that were passed through as-is\n                    cs = pattern.substr(classStart + 1);\n                    sp = this.parse(cs, SUBPARSE);\n                    re = re.substr(0, reClassStart) + \"\\\\[\" + sp[0];\n                    hasMagic = hasMagic || sp[1];\n                }\n                // handle the case where we had a +( thing at the *end*\n                // of the pattern.\n                // each pattern list stack adds 3 chars, and we need to go through\n                // and escape any | chars that were passed through as-is for the regexp.\n                // Go through and escape them, taking care not to double-escape any\n                // | chars that were already escaped.\n                for(pl = patternListStack.pop(); pl; pl = patternListStack.pop()){\n                    var tail = re.slice(pl.reStart + pl.open.length);\n                    this.debug(\"setting tail\", re, pl);\n                    // maybe some even number of \\, then maybe 1 \\, followed by a |\n                    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function(_, $1, $2) {\n                        if (!$2) {\n                            // the | isn't already escaped, so escape it.\n                            $2 = \"\\\\\";\n                        }\n                        // need to escape all those slashes *again*, without escaping the\n                        // one that we need for escaping the | character.  As it works out,\n                        // escaping an even number of slashes can be done by simply repeating\n                        // it exactly after itself.  That's why this trick works.\n                        //\n                        // I am sorry that you have to see this.\n                        return $1 + $1 + $2 + \"|\";\n                    });\n                    this.debug(\"tail=%j\\n   %s\", tail, tail, pl, re);\n                    var t = pl.type === \"*\" ? star : pl.type === \"?\" ? qmark : \"\\\\\" + pl.type;\n                    hasMagic = true;\n                    re = re.slice(0, pl.reStart) + t + \"\\\\(\" + tail;\n                }\n                // handle trailing things that only matter at the very end.\n                clearStateChar();\n                if (escaping) {\n                    // trailing \\\\\n                    re += \"\\\\\\\\\";\n                }\n                // only need to apply the nodot start if the re starts with\n                // something that could conceivably capture a dot\n                var addPatternStart = false;\n                switch(re.charAt(0)){\n                    case \".\":\n                    case \"[\":\n                    case \"(\":\n                        addPatternStart = true;\n                }\n                // Hack to work around lack of negative lookbehind in JS\n                // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n                // like 'a.xyz.yz' doesn't match.  So, the first negative\n                // lookahead, has to look ALL the way ahead, to the end of\n                // the pattern.\n                for(var n = negativeLists.length - 1; n > -1; n--){\n                    var nl = negativeLists[n];\n                    var nlBefore = re.slice(0, nl.reStart);\n                    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);\n                    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);\n                    var nlAfter = re.slice(nl.reEnd);\n                    nlLast += nlAfter;\n                    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n                    // mean that we should *not* include the ) in the bit that is considered\n                    // \"after\" the negated section.\n                    var openParensBefore = nlBefore.split(\"(\").length - 1;\n                    var cleanAfter = nlAfter;\n                    for(i = 0; i < openParensBefore; i++){\n                        cleanAfter = cleanAfter.replace(/\\)[+*?]?/, \"\");\n                    }\n                    nlAfter = cleanAfter;\n                    var dollar = \"\";\n                    if (nlAfter === \"\" && isSub !== SUBPARSE) {\n                        dollar = \"$\";\n                    }\n                    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;\n                    re = newRe;\n                }\n                // if the re is not \"\" at this point, then we need to make sure\n                // it doesn't match against an empty path part.\n                // Otherwise a/* will match a/, which it should not.\n                if (re !== \"\" && hasMagic) {\n                    re = \"(?=.)\" + re;\n                }\n                if (addPatternStart) {\n                    re = patternStart + re;\n                }\n                // parsing just a piece of a larger pattern.\n                if (isSub === SUBPARSE) {\n                    return [\n                        re,\n                        hasMagic\n                    ];\n                }\n                // skip the regexp for non-magical patterns\n                // unescape anything in it, though, so that it'll be\n                // an exact match against a file etc.\n                if (!hasMagic) {\n                    return globUnescape(pattern);\n                }\n                var flags = options.nocase ? \"i\" : \"\";\n                try {\n                    var regExp = new RegExp(\"^\" + re + \"$\", flags);\n                } catch (er) {\n                    // If it was an invalid regular expression, then it can't match\n                    // anything.  This trick looks for a character after the end of\n                    // the string, which is of course impossible, except in multi-line\n                    // mode, but it's not a /m regex.\n                    return new RegExp(\"$.\");\n                }\n                regExp._glob = pattern;\n                regExp._src = re;\n                return regExp;\n            }\n            minimatch.makeRe = function(pattern, options) {\n                return new Minimatch(pattern, options || {}).makeRe();\n            };\n            Minimatch.prototype.makeRe = makeRe;\n            function makeRe() {\n                if (this.regexp || this.regexp === false) return this.regexp;\n                // at this point, this.set is a 2d array of partial\n                // pattern strings, or \"**\".\n                //\n                // It's better to use .match().  This function shouldn't\n                // be used, really, but it's pretty convenient sometimes,\n                // when you just want to work with a regex.\n                var set = this.set;\n                if (!set.length) {\n                    this.regexp = false;\n                    return this.regexp;\n                }\n                var options = this.options;\n                var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;\n                var flags = options.nocase ? \"i\" : \"\";\n                var re = set.map(function(pattern) {\n                    return pattern.map(function(p) {\n                        return p === GLOBSTAR ? twoStar : typeof p === \"string\" ? regExpEscape(p) : p._src;\n                    }).join(\"\\\\/\");\n                }).join(\"|\");\n                // must match entire pattern\n                // ending in a * or ** will make it less strict.\n                re = \"^(?:\" + re + \")$\";\n                // can match anything, as long as it's not this.\n                if (this.negate) re = \"^(?!\" + re + \").*$\";\n                try {\n                    this.regexp = new RegExp(re, flags);\n                } catch (ex) {\n                    this.regexp = false;\n                }\n                return this.regexp;\n            }\n            minimatch.match = function(list, pattern, options) {\n                options = options || {};\n                var mm = new Minimatch(pattern, options);\n                list = list.filter(function(f) {\n                    return mm.match(f);\n                });\n                if (mm.options.nonull && !list.length) {\n                    list.push(pattern);\n                }\n                return list;\n            };\n            Minimatch.prototype.match = match;\n            function match(f, partial) {\n                this.debug(\"match\", f, this.pattern);\n                // short-circuit in the case of busted things.\n                // comments, etc.\n                if (this.comment) return false;\n                if (this.empty) return f === \"\";\n                if (f === \"/\" && partial) return true;\n                var options = this.options;\n                // windows: need to use /, not \\\n                if (path.sep !== \"/\") {\n                    f = f.split(path.sep).join(\"/\");\n                }\n                // treat the test path as a set of pathparts.\n                f = f.split(slashSplit);\n                this.debug(this.pattern, \"split\", f);\n                // just ONE of the pattern sets in this.set needs to match\n                // in order for it to be valid.  If negating, then just one\n                // match means that we have failed.\n                // Either way, return on the first hit.\n                var set = this.set;\n                this.debug(this.pattern, \"set\", set);\n                // Find the basename of the path by looking for the last non-empty segment\n                var filename;\n                var i;\n                for(i = f.length - 1; i >= 0; i--){\n                    filename = f[i];\n                    if (filename) break;\n                }\n                for(i = 0; i < set.length; i++){\n                    var pattern = set[i];\n                    var file = f;\n                    if (options.matchBase && pattern.length === 1) {\n                        file = [\n                            filename\n                        ];\n                    }\n                    var hit = this.matchOne(file, pattern, partial);\n                    if (hit) {\n                        if (options.flipNegate) return true;\n                        return !this.negate;\n                    }\n                }\n                // didn't get any hits.  this is success if it's a negative\n                // pattern, failure otherwise.\n                if (options.flipNegate) return false;\n                return this.negate;\n            }\n            // set partial to true to test if, for example,\n            // \"/a/b\" matches the start of \"/*/b/*/d\"\n            // Partial means, if you run out of file before you run\n            // out of pattern, then that's fine, as long as all\n            // the parts match.\n            Minimatch.prototype.matchOne = function(file, pattern, partial) {\n                var options = this.options;\n                this.debug(\"matchOne\", {\n                    \"this\": this,\n                    file: file,\n                    pattern: pattern\n                });\n                this.debug(\"matchOne\", file.length, pattern.length);\n                for(var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++){\n                    this.debug(\"matchOne loop\");\n                    var p = pattern[pi];\n                    var f = file[fi];\n                    this.debug(pattern, p, f);\n                    // should be impossible.\n                    // some invalid regexp stuff in the set.\n                    if (p === false) return false;\n                    if (p === GLOBSTAR) {\n                        this.debug(\"GLOBSTAR\", [\n                            pattern,\n                            p,\n                            f\n                        ]);\n                        // \"**\"\n                        // a/**/b/**/c would match the following:\n                        // a/b/x/y/z/c\n                        // a/x/y/z/b/c\n                        // a/b/x/b/x/c\n                        // a/b/c\n                        // To do this, take the rest of the pattern after\n                        // the **, and see if it would match the file remainder.\n                        // If so, return success.\n                        // If not, the ** \"swallows\" a segment, and try again.\n                        // This is recursively awful.\n                        //\n                        // a/**/b/**/c matching a/b/x/y/z/c\n                        // - a matches a\n                        // - doublestar\n                        //   - matchOne(b/x/y/z/c, b/**/c)\n                        //     - b matches b\n                        //     - doublestar\n                        //       - matchOne(x/y/z/c, c) -> no\n                        //       - matchOne(y/z/c, c) -> no\n                        //       - matchOne(z/c, c) -> no\n                        //       - matchOne(c, c) yes, hit\n                        var fr = fi;\n                        var pr = pi + 1;\n                        if (pr === pl) {\n                            this.debug(\"** at the end\");\n                            // a ** at the end will just swallow the rest.\n                            // We have found a match.\n                            // however, it will not swallow /.x, unless\n                            // options.dot is set.\n                            // . and .. are *never* matched by **, for explosively\n                            // exponential reasons.\n                            for(; fi < fl; fi++){\n                                if (file[fi] === \".\" || file[fi] === \"..\" || !options.dot && file[fi].charAt(0) === \".\") return false;\n                            }\n                            return true;\n                        }\n                        // ok, let's see if we can swallow whatever we can.\n                        while(fr < fl){\n                            var swallowee = file[fr];\n                            this.debug(\"\\nglobstar while\", file, fr, pattern, pr, swallowee);\n                            // XXX remove this slice.  Just pass the start index.\n                            if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n                                this.debug(\"globstar found match!\", fr, fl, swallowee);\n                                // found a match.\n                                return true;\n                            } else {\n                                // can't swallow \".\" or \"..\" ever.\n                                // can only swallow \".foo\" when explicitly asked.\n                                if (swallowee === \".\" || swallowee === \"..\" || !options.dot && swallowee.charAt(0) === \".\") {\n                                    this.debug(\"dot detected!\", file, fr, pattern, pr);\n                                    break;\n                                }\n                                // ** swallows a segment, and continue.\n                                this.debug(\"globstar swallow a segment, and continue\");\n                                fr++;\n                            }\n                        }\n                        // no match was found.\n                        // However, in partial mode, we can't say this is necessarily over.\n                        // If there's more *pattern* left, then\n                        if (partial) {\n                            // ran out of file\n                            this.debug(\"\\n>>> no match, partial?\", file, fr, pattern, pr);\n                            if (fr === fl) return true;\n                        }\n                        return false;\n                    }\n                    // something other than **\n                    // non-magic patterns just have to match exactly\n                    // patterns with magic have been turned into regexps.\n                    var hit;\n                    if (typeof p === \"string\") {\n                        if (options.nocase) {\n                            hit = f.toLowerCase() === p.toLowerCase();\n                        } else {\n                            hit = f === p;\n                        }\n                        this.debug(\"string match\", p, f, hit);\n                    } else {\n                        hit = f.match(p);\n                        this.debug(\"pattern match\", p, f, hit);\n                    }\n                    if (!hit) return false;\n                }\n                // Note: ending in / means that we'll get a final \"\"\n                // at the end of the pattern.  This can only match a\n                // corresponding \"\" at the end of the file.\n                // If the file ends in /, then it can only match a\n                // a pattern that ends in /, unless the pattern just\n                // doesn't have any more for it. But, a/b/ should *not*\n                // match \"a/b/*\", even though \"\" matches against the\n                // [^/]*? pattern, except in partial mode, where it might\n                // simply not be reached yet.\n                // However, a/b/ should still satisfy a/*\n                // now either we fell off the end of the pattern, or we're done.\n                if (fi === fl && pi === pl) {\n                    // ran out of pattern and filename at the same time.\n                    // an exact hit!\n                    return true;\n                } else if (fi === fl) {\n                    // ran out of file, but still had pattern left.\n                    // this is ok if we're doing the match as part of\n                    // a glob fs traversal.\n                    return partial;\n                } else if (pi === pl) {\n                    // ran out of pattern, still have file left.\n                    // this is only acceptable if we're on the very last\n                    // empty segment of a file with a trailing slash.\n                    // a/* should match a/b/\n                    var emptyFileEnd = fi === fl - 1 && file[fi] === \"\";\n                    return emptyFileEnd;\n                }\n                // should be unreachable.\n                throw new Error(\"wtf?\");\n            };\n            // replace stuff like \\* with *\n            function globUnescape(s) {\n                return s.replace(/\\\\(.)/g, \"$1\");\n            }\n            function regExpEscape(s) {\n                return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n            }\n        /***/ },\n        /***/ \"./node_modules/path-browserify/index.js\": /*!***********************************************!*\\\n  !*** ./node_modules/path-browserify/index.js ***!\n  \\***********************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_311062__) {\n            /* WEBPACK VAR INJECTION */ (function(process) {\n                // backported and transplited with Babel, with backwards-compat fixes\n                // Copyright Joyent, Inc. and other Node contributors.\n                //\n                // Permission is hereby granted, free of charge, to any person obtaining a\n                // copy of this software and associated documentation files (the\n                // \"Software\"), to deal in the Software without restriction, including\n                // without limitation the rights to use, copy, modify, merge, publish,\n                // distribute, sublicense, and/or sell copies of the Software, and to permit\n                // persons to whom the Software is furnished to do so, subject to the\n                // following conditions:\n                //\n                // The above copyright notice and this permission notice shall be included\n                // in all copies or substantial portions of the Software.\n                //\n                // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n                // USE OR OTHER DEALINGS IN THE SOFTWARE.\n                // resolves . and .. elements in a path array with directory names there\n                // must be no slashes, empty elements, or device names (c:\\) in the array\n                // (so also no leading and trailing slashes - it does not distinguish\n                // relative and absolute paths)\n                function normalizeArray(parts, allowAboveRoot) {\n                    // if the path tries to go above the root, `up` ends up > 0\n                    var up = 0;\n                    for(var i = parts.length - 1; i >= 0; i--){\n                        var last = parts[i];\n                        if (last === \".\") {\n                            parts.splice(i, 1);\n                        } else if (last === \"..\") {\n                            parts.splice(i, 1);\n                            up++;\n                        } else if (up) {\n                            parts.splice(i, 1);\n                            up--;\n                        }\n                    }\n                    // if the path is allowed to go above the root, restore leading ..s\n                    if (allowAboveRoot) {\n                        for(; up--; up){\n                            parts.unshift(\"..\");\n                        }\n                    }\n                    return parts;\n                }\n                // path.resolve([from ...], to)\n                // posix version\n                exports1.resolve = function() {\n                    var resolvedPath = \"\", resolvedAbsolute = false;\n                    for(var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){\n                        var path = i >= 0 ? arguments[i] : process.cwd();\n                        // Skip empty and invalid entries\n                        if (typeof path !== \"string\") {\n                            throw new TypeError(\"Arguments to path.resolve must be strings\");\n                        } else if (!path) {\n                            continue;\n                        }\n                        resolvedPath = path + \"/\" + resolvedPath;\n                        resolvedAbsolute = path.charAt(0) === \"/\";\n                    }\n                    // At this point the path should be resolved to a full absolute path, but\n                    // handle relative paths to be safe (might happen when process.cwd() fails)\n                    // Normalize the path\n                    resolvedPath = normalizeArray(filter(resolvedPath.split(\"/\"), function(p) {\n                        return !!p;\n                    }), !resolvedAbsolute).join(\"/\");\n                    return (resolvedAbsolute ? \"/\" : \"\") + resolvedPath || \".\";\n                };\n                // path.normalize(path)\n                // posix version\n                exports1.normalize = function(path) {\n                    var isAbsolute = exports1.isAbsolute(path), trailingSlash = substr(path, -1) === \"/\";\n                    // Normalize the path\n                    path = normalizeArray(filter(path.split(\"/\"), function(p) {\n                        return !!p;\n                    }), !isAbsolute).join(\"/\");\n                    if (!path && !isAbsolute) {\n                        path = \".\";\n                    }\n                    if (path && trailingSlash) {\n                        path += \"/\";\n                    }\n                    return (isAbsolute ? \"/\" : \"\") + path;\n                };\n                // posix version\n                exports1.isAbsolute = function(path) {\n                    return path.charAt(0) === \"/\";\n                };\n                // posix version\n                exports1.join = function() {\n                    var paths = Array.prototype.slice.call(arguments, 0);\n                    return exports1.normalize(filter(paths, function(p, index) {\n                        if (typeof p !== \"string\") {\n                            throw new TypeError(\"Arguments to path.join must be strings\");\n                        }\n                        return p;\n                    }).join(\"/\"));\n                };\n                // path.relative(from, to)\n                // posix version\n                exports1.relative = function(from, to) {\n                    from = exports1.resolve(from).substr(1);\n                    to = exports1.resolve(to).substr(1);\n                    function trim(arr) {\n                        var start = 0;\n                        for(; start < arr.length; start++){\n                            if (arr[start] !== \"\") break;\n                        }\n                        var end = arr.length - 1;\n                        for(; end >= 0; end--){\n                            if (arr[end] !== \"\") break;\n                        }\n                        if (start > end) return [];\n                        return arr.slice(start, end - start + 1);\n                    }\n                    var fromParts = trim(from.split(\"/\"));\n                    var toParts = trim(to.split(\"/\"));\n                    var length = Math.min(fromParts.length, toParts.length);\n                    var samePartsLength = length;\n                    for(var i = 0; i < length; i++){\n                        if (fromParts[i] !== toParts[i]) {\n                            samePartsLength = i;\n                            break;\n                        }\n                    }\n                    var outputParts = [];\n                    for(var i = samePartsLength; i < fromParts.length; i++){\n                        outputParts.push(\"..\");\n                    }\n                    outputParts = outputParts.concat(toParts.slice(samePartsLength));\n                    return outputParts.join(\"/\");\n                };\n                exports1.sep = \"/\";\n                exports1.delimiter = \":\";\n                exports1.dirname = function(path) {\n                    if (typeof path !== \"string\") path = path + \"\";\n                    if (path.length === 0) return \".\";\n                    var code = path.charCodeAt(0);\n                    var hasRoot = code === 47 /*/*/ ;\n                    var end = -1;\n                    var matchedSlash = true;\n                    for(var i = path.length - 1; i >= 1; --i){\n                        code = path.charCodeAt(i);\n                        if (code === 47 /*/*/ ) {\n                            if (!matchedSlash) {\n                                end = i;\n                                break;\n                            }\n                        } else {\n                            // We saw the first non-path separator\n                            matchedSlash = false;\n                        }\n                    }\n                    if (end === -1) return hasRoot ? \"/\" : \".\";\n                    if (hasRoot && end === 1) {\n                        // return '//';\n                        // Backwards-compat fix:\n                        return \"/\";\n                    }\n                    return path.slice(0, end);\n                };\n                function basename(path) {\n                    if (typeof path !== \"string\") path = path + \"\";\n                    var start = 0;\n                    var end = -1;\n                    var matchedSlash = true;\n                    var i;\n                    for(i = path.length - 1; i >= 0; --i){\n                        if (path.charCodeAt(i) === 47 /*/*/ ) {\n                            // If we reached a path separator that was not part of a set of path\n                            // separators at the end of the string, stop now\n                            if (!matchedSlash) {\n                                start = i + 1;\n                                break;\n                            }\n                        } else if (end === -1) {\n                            // We saw the first non-path separator, mark this as the end of our\n                            // path component\n                            matchedSlash = false;\n                            end = i + 1;\n                        }\n                    }\n                    if (end === -1) return \"\";\n                    return path.slice(start, end);\n                }\n                // Uses a mixed approach for backwards-compatibility, as ext behavior changed\n                // in new Node.js versions, so only basename() above is backported here\n                exports1.basename = function(path, ext) {\n                    var f = basename(path);\n                    if (ext && f.substr(-1 * ext.length) === ext) {\n                        f = f.substr(0, f.length - ext.length);\n                    }\n                    return f;\n                };\n                exports1.extname = function(path) {\n                    if (typeof path !== \"string\") path = path + \"\";\n                    var startDot = -1;\n                    var startPart = 0;\n                    var end = -1;\n                    var matchedSlash = true;\n                    // Track the state of characters (if any) we see before our first dot and\n                    // after any path separator we find\n                    var preDotState = 0;\n                    for(var i = path.length - 1; i >= 0; --i){\n                        var code = path.charCodeAt(i);\n                        if (code === 47 /*/*/ ) {\n                            // If we reached a path separator that was not part of a set of path\n                            // separators at the end of the string, stop now\n                            if (!matchedSlash) {\n                                startPart = i + 1;\n                                break;\n                            }\n                            continue;\n                        }\n                        if (end === -1) {\n                            // We saw the first non-path separator, mark this as the end of our\n                            // extension\n                            matchedSlash = false;\n                            end = i + 1;\n                        }\n                        if (code === 46 /*.*/ ) {\n                            // If this is our first dot, mark it as the start of our extension\n                            if (startDot === -1) startDot = i;\n                            else if (preDotState !== 1) preDotState = 1;\n                        } else if (startDot !== -1) {\n                            // We saw a non-dot and non-path separator before our dot, so we should\n                            // have a good chance at having a non-empty extension\n                            preDotState = -1;\n                        }\n                    }\n                    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n                    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n                    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n                        return \"\";\n                    }\n                    return path.slice(startDot, end);\n                };\n                function filter(xs, f) {\n                    if (xs.filter) return xs.filter(f);\n                    var res = [];\n                    for(var i = 0; i < xs.length; i++){\n                        if (f(xs[i], i, xs)) res.push(xs[i]);\n                    }\n                    return res;\n                }\n                // String.prototype.substr - negative index don't work in IE8\n                var substr =  true ? function(str, start, len) {\n                    return str.substr(start, len);\n                } : 0;\n            /* WEBPACK VAR INJECTION */ }).call(this, __nested_webpack_require_311062__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\"));\n        /***/ },\n        /***/ \"./node_modules/process/browser.js\": /*!*****************************************!*\\\n  !*** ./node_modules/process/browser.js ***!\n  \\*****************************************/ /*! no static exports found */ /***/ function(module1, exports1) {\n            // shim for using process in browser\n            var process = module1.exports = {};\n            // cached from whatever global is present so that test runners that stub it\n            // don't break things.  But we need to wrap it in a try catch in case it is\n            // wrapped in strict mode code which doesn't define any globals.  It's inside a\n            // function because try/catches deoptimize in certain engines.\n            var cachedSetTimeout;\n            var cachedClearTimeout;\n            function defaultSetTimout() {\n                throw new Error(\"setTimeout has not been defined\");\n            }\n            function defaultClearTimeout() {\n                throw new Error(\"clearTimeout has not been defined\");\n            }\n            (function() {\n                try {\n                    if (typeof setTimeout === \"function\") {\n                        cachedSetTimeout = setTimeout;\n                    } else {\n                        cachedSetTimeout = defaultSetTimout;\n                    }\n                } catch (e) {\n                    cachedSetTimeout = defaultSetTimout;\n                }\n                try {\n                    if (typeof clearTimeout === \"function\") {\n                        cachedClearTimeout = clearTimeout;\n                    } else {\n                        cachedClearTimeout = defaultClearTimeout;\n                    }\n                } catch (e) {\n                    cachedClearTimeout = defaultClearTimeout;\n                }\n            })();\n            function runTimeout(fun) {\n                if (cachedSetTimeout === setTimeout) {\n                    //normal enviroments in sane situations\n                    return setTimeout(fun, 0);\n                }\n                // if setTimeout wasn't available but was latter defined\n                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n                    cachedSetTimeout = setTimeout;\n                    return setTimeout(fun, 0);\n                }\n                try {\n                    // when when somebody has screwed with setTimeout but no I.E. maddness\n                    return cachedSetTimeout(fun, 0);\n                } catch (e) {\n                    try {\n                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n                        return cachedSetTimeout.call(null, fun, 0);\n                    } catch (e) {\n                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n                        return cachedSetTimeout.call(this, fun, 0);\n                    }\n                }\n            }\n            function runClearTimeout(marker) {\n                if (cachedClearTimeout === clearTimeout) {\n                    //normal enviroments in sane situations\n                    return clearTimeout(marker);\n                }\n                // if clearTimeout wasn't available but was latter defined\n                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n                    cachedClearTimeout = clearTimeout;\n                    return clearTimeout(marker);\n                }\n                try {\n                    // when when somebody has screwed with setTimeout but no I.E. maddness\n                    return cachedClearTimeout(marker);\n                } catch (e) {\n                    try {\n                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n                        return cachedClearTimeout.call(null, marker);\n                    } catch (e) {\n                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n                        return cachedClearTimeout.call(this, marker);\n                    }\n                }\n            }\n            var queue = [];\n            var draining = false;\n            var currentQueue;\n            var queueIndex = -1;\n            function cleanUpNextTick() {\n                if (!draining || !currentQueue) {\n                    return;\n                }\n                draining = false;\n                if (currentQueue.length) {\n                    queue = currentQueue.concat(queue);\n                } else {\n                    queueIndex = -1;\n                }\n                if (queue.length) {\n                    drainQueue();\n                }\n            }\n            function drainQueue() {\n                if (draining) {\n                    return;\n                }\n                var timeout = runTimeout(cleanUpNextTick);\n                draining = true;\n                var len = queue.length;\n                while(len){\n                    currentQueue = queue;\n                    queue = [];\n                    while(++queueIndex < len){\n                        if (currentQueue) {\n                            currentQueue[queueIndex].run();\n                        }\n                    }\n                    queueIndex = -1;\n                    len = queue.length;\n                }\n                currentQueue = null;\n                draining = false;\n                runClearTimeout(timeout);\n            }\n            process.nextTick = function(fun) {\n                var args = new Array(arguments.length - 1);\n                if (arguments.length > 1) {\n                    for(var i = 1; i < arguments.length; i++){\n                        args[i - 1] = arguments[i];\n                    }\n                }\n                queue.push(new Item(fun, args));\n                if (queue.length === 1 && !draining) {\n                    runTimeout(drainQueue);\n                }\n            };\n            // v8 likes predictible objects\n            function Item(fun, array) {\n                this.fun = fun;\n                this.array = array;\n            }\n            Item.prototype.run = function() {\n                this.fun.apply(null, this.array);\n            };\n            process.title = \"browser\";\n            process.browser = true;\n            process.env = {};\n            process.argv = [];\n            process.version = \"\"; // empty string to avoid regexp issues\n            process.versions = {};\n            function noop() {}\n            process.on = noop;\n            process.addListener = noop;\n            process.once = noop;\n            process.off = noop;\n            process.removeListener = noop;\n            process.removeAllListeners = noop;\n            process.emit = noop;\n            process.prependListener = noop;\n            process.prependOnceListener = noop;\n            process.listeners = function(name) {\n                return [];\n            };\n            process.binding = function(name) {\n                throw new Error(\"process.binding is not supported\");\n            };\n            process.cwd = function() {\n                return \"/\";\n            };\n            process.chdir = function(dir) {\n                throw new Error(\"process.chdir is not supported\");\n            };\n            process.umask = function() {\n                return 0;\n            };\n        /***/ },\n        /***/ \"./src/commands sync recursive ^\\\\.\\\\/.*$\": /*!************************************!*\\\n  !*** ./src/commands sync ^\\.\\/.*$ ***!\n  \\************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_332544__) {\n            var map = {\n                \"./\": \"./src/commands/index.js\",\n                \"./cat\": \"./src/commands/cat.js\",\n                \"./cat.js\": \"./src/commands/cat.js\",\n                \"./cd\": \"./src/commands/cd.js\",\n                \"./cd.js\": \"./src/commands/cd.js\",\n                \"./clear\": \"./src/commands/clear.js\",\n                \"./clear.js\": \"./src/commands/clear.js\",\n                \"./cp\": \"./src/commands/cp.js\",\n                \"./cp.js\": \"./src/commands/cp.js\",\n                \"./echo\": \"./src/commands/echo.js\",\n                \"./echo.js\": \"./src/commands/echo.js\",\n                \"./head\": \"./src/commands/head.js\",\n                \"./head.js\": \"./src/commands/head.js\",\n                \"./history\": \"./src/commands/history.js\",\n                \"./history.js\": \"./src/commands/history.js\",\n                \"./index\": \"./src/commands/index.js\",\n                \"./index.js\": \"./src/commands/index.js\",\n                \"./ls\": \"./src/commands/ls.js\",\n                \"./ls.js\": \"./src/commands/ls.js\",\n                \"./mkdir\": \"./src/commands/mkdir.js\",\n                \"./mkdir.js\": \"./src/commands/mkdir.js\",\n                \"./printenv\": \"./src/commands/printenv.js\",\n                \"./printenv.js\": \"./src/commands/printenv.js\",\n                \"./pwd\": \"./src/commands/pwd.js\",\n                \"./pwd.js\": \"./src/commands/pwd.js\",\n                \"./rm\": \"./src/commands/rm.js\",\n                \"./rm.js\": \"./src/commands/rm.js\",\n                \"./rmdir\": \"./src/commands/rmdir.js\",\n                \"./rmdir.js\": \"./src/commands/rmdir.js\",\n                \"./tail\": \"./src/commands/tail.js\",\n                \"./tail.js\": \"./src/commands/tail.js\",\n                \"./touch\": \"./src/commands/touch.js\",\n                \"./touch.js\": \"./src/commands/touch.js\",\n                \"./util/_head_tail_util\": \"./src/commands/util/_head_tail_util.js\",\n                \"./util/_head_tail_util.js\": \"./src/commands/util/_head_tail_util.js\",\n                \"./whoami\": \"./src/commands/whoami.js\",\n                \"./whoami.js\": \"./src/commands/whoami.js\"\n            };\n            function webpackContext(req) {\n                var id = webpackContextResolve(req);\n                return __nested_webpack_require_332544__(id);\n            }\n            function webpackContextResolve(req) {\n                if (!__nested_webpack_require_332544__.o(map, req)) {\n                    var e = new Error(\"Cannot find module '\" + req + \"'\");\n                    e.code = \"MODULE_NOT_FOUND\";\n                    throw e;\n                }\n                return map[req];\n            }\n            webpackContext.keys = function webpackContextKeys() {\n                return Object.keys(map);\n            };\n            webpackContext.resolve = webpackContextResolve;\n            module1.exports = webpackContext;\n            webpackContext.id = \"./src/commands sync recursive ^\\\\.\\\\/.*$\";\n        /***/ },\n        /***/ \"./src/commands/cat.js\": /*!*****************************!*\\\n  !*** ./src/commands/cat.js ***!\n  \\*****************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_335671__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_335671__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var FileOp = _interopRequireWildcard(__nested_webpack_require_335671__(/*! fs/operations-with-permissions/file-operations */ \"./src/fs/operations-with-permissions/file-operations.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_335671__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _util = __nested_webpack_require_335671__(/*! emulator-state/util */ \"./src/emulator-state/util.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Combines one or more files to display in the terminal output\n * Usage: cat file1.txt file2.txt\n */ var fileToTextOutput = function fileToTextOutput(fs, filePath) {\n                var _FileOp$readFile = FileOp.readFile(fs, filePath), err = _FileOp$readFile.err, file = _FileOp$readFile.file;\n                if (err) {\n                    return OutputFactory.makeErrorOutput(err);\n                }\n                ;\n                return OutputFactory.makeTextOutput(file.get(\"content\"));\n            };\n            var optDef = {};\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), argv = _parseOptions.argv;\n                if (argv.length === 0) {\n                    return {};\n                }\n                var filePaths = argv.map(function(pathArg) {\n                    return (0, _util.resolvePath)(state, pathArg);\n                });\n                return {\n                    outputs: filePaths.map(function(path) {\n                        return fileToTextOutput(state.getFileSystem(), path);\n                    })\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/cd.js\": /*!****************************!*\\\n  !*** ./src/commands/cd.js ***!\n  \\****************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_340422__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_340422__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var DirectoryOp = _interopRequireWildcard(__nested_webpack_require_340422__(/*! fs/operations-with-permissions/directory-operations */ \"./src/fs/operations-with-permissions/directory-operations.js\"));\n            var EnvVariableUtil = _interopRequireWildcard(__nested_webpack_require_340422__(/*! emulator-state/environment-variables */ \"./src/emulator-state/environment-variables.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_340422__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _fsError = __nested_webpack_require_340422__(/*! fs/fs-error */ \"./src/fs/fs-error.js\");\n            var _util = __nested_webpack_require_340422__(/*! emulator-state/util */ \"./src/emulator-state/util.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Changes the current working directory to another directory\n * Usage: cd /newDirectory\n */ var updateStateCwd = function updateStateCwd(state, newCwdPath) {\n                return EnvVariableUtil.setEnvironmentVariable(state.getEnvVariables(), \"cwd\", newCwdPath);\n            };\n            var optDef = {};\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), argv = _parseOptions.argv;\n                var newCwdPath = argv[0] ? (0, _util.resolvePath)(state, argv[0]) : \"/\";\n                if (!DirectoryOp.hasDirectory(state.getFileSystem(), newCwdPath)) {\n                    var newCwdPathDoesNotExistErr = (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_DIRECTORY);\n                    return {\n                        output: OutputFactory.makeErrorOutput(newCwdPathDoesNotExistErr)\n                    };\n                }\n                return {\n                    state: state.setEnvVariables(updateStateCwd(state, newCwdPath))\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/clear.js\": /*!*******************************!*\\\n  !*** ./src/commands/clear.js ***!\n  \\*******************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_345369__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _outputs = __nested_webpack_require_345369__(/*! emulator-state/outputs */ \"./src/emulator-state/outputs.js\");\n            /**\n * Removes all terminal output\n * Usage: clear\n */ var optDef = {};\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                return {\n                    state: state.setOutputs((0, _outputs.create)())\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/cp.js\": /*!****************************!*\\\n  !*** ./src/commands/cp.js ***!\n  \\****************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_346279__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_346279__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var FileOp = _interopRequireWildcard(__nested_webpack_require_346279__(/*! fs/operations-with-permissions/file-operations */ \"./src/fs/operations-with-permissions/file-operations.js\"));\n            var DirectoryOp = _interopRequireWildcard(__nested_webpack_require_346279__(/*! fs/operations-with-permissions/directory-operations */ \"./src/fs/operations-with-permissions/directory-operations.js\"));\n            var PathUtil = _interopRequireWildcard(__nested_webpack_require_346279__(/*! fs/util/path-util */ \"./src/fs/util/path-util.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_346279__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var FileUtil = _interopRequireWildcard(__nested_webpack_require_346279__(/*! fs/util/file-util */ \"./src/fs/util/file-util.js\"));\n            var _fsError = __nested_webpack_require_346279__(/*! fs/fs-error */ \"./src/fs/fs-error.js\");\n            var _util = __nested_webpack_require_346279__(/*! emulator-state/util */ \"./src/emulator-state/util.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Copies a file/directory to another file/directory\n * Usage: cp file new-file\n */ /**\n * Copy from a source file into a directory or another file.\n *\n * A trailing slash / can be used in the destination to explicitly state the\n * destination is a directory and not a file.\n * @param  {Map}     state              emulator state\n * @param  {string}  srcPath            source file path\n * @param  {string}  destPath           destination file or destination directory path\n * @param  {Boolean} isTrailingPathDest true if the destPath ended in a /\n * @return {object}                     cp command return object\n */ var copySourceFile = function copySourceFile(state, srcPath, destPath, isTrailingPathDest) {\n                var fs = state.getFileSystem();\n                if (isTrailingPathDest && !DirectoryOp.hasDirectory(fs, destPath)) {\n                    var dirAtTrailingPathNonExistentErr = (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_DIRECTORY);\n                    return {\n                        output: OutputFactory.makeErrorOutput(dirAtTrailingPathNonExistentErr)\n                    };\n                }\n                var _FileOp$copyFile = FileOp.copyFile(fs, srcPath, destPath), copiedFS = _FileOp$copyFile.fs, err = _FileOp$copyFile.err;\n                if (err) {\n                    return {\n                        output: OutputFactory.makeErrorOutput(err)\n                    };\n                }\n                return {\n                    state: state.setFileSystem(copiedFS)\n                };\n            };\n            /**\n * Copies a directory into another directory\n *\n * When the destination path exists, cp copies the source FOLDER into the\n * destination.\n *\n * When the destination DOES NOT exist, cp copies the source FILES into the\n * destination.\n * @param  {Map}    state      emulator state\n * @param  {string} srcPath    source directory path (copy from)\n * @param  {string} destPath   destination directory path (copy to)\n * @return {object}            cp command return object\n */ var copySourceDirectory = function copySourceDirectory(state, srcPath, destPath) {\n                if (DirectoryOp.hasDirectory(state.getFileSystem(), destPath)) {\n                    var lastPathComponent = PathUtil.getLastPathPart(srcPath); // Remap dest to copy source FOLDER, as destination path exists\n                    if (lastPathComponent !== \"/\") {\n                        destPath = \"\".concat(destPath, \"/\").concat(lastPathComponent);\n                    }\n                } // Make directory to copy into, if it doesn't already exist\n                if (!DirectoryOp.hasDirectory(state.getFileSystem(), destPath)) {\n                    var emptyDir = FileUtil.makeDirectory();\n                    var _DirectoryOp$addDirec = DirectoryOp.addDirectory(state.getFileSystem(), destPath, emptyDir, false), _fs = _DirectoryOp$addDirec.fs, _err = _DirectoryOp$addDirec.err;\n                    state = state.setFileSystem(_fs);\n                    if (_err) {\n                        return {\n                            output: OutputFactory.makeErrorOutput(_err)\n                        };\n                    }\n                }\n                var _DirectoryOp$copyDire = DirectoryOp.copyDirectory(state.getFileSystem(), srcPath, destPath), fs = _DirectoryOp$copyDire.fs, err = _DirectoryOp$copyDire.err;\n                if (err) {\n                    return {\n                        output: OutputFactory.makeErrorOutput(err)\n                    };\n                }\n                return {\n                    state: state.setFileSystem(fs)\n                };\n            };\n            var optDef = {\n                \"-r, --recursive\": \"\" // required to copy directories\n            };\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), argv = _parseOptions.argv, options = _parseOptions.options;\n                if (argv.length < 2) {\n                    return {};\n                }\n                var srcPath = (0, _util.resolvePath)(state, argv[0]);\n                var destPath = (0, _util.resolvePath)(state, argv[1]);\n                var isTrailingDestPath = PathUtil.isTrailingPath(argv[1]);\n                if (srcPath === destPath) {\n                    return {\n                        output: OutputFactory.makeTextOutput(\"Source and destination are the same (not copied).\")\n                    };\n                }\n                if (options.recursive) {\n                    return copySourceDirectory(state, srcPath, destPath);\n                }\n                return copySourceFile(state, srcPath, destPath, isTrailingDestPath);\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/echo.js\": /*!******************************!*\\\n  !*** ./src/commands/echo.js ***!\n  \\******************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_355124__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_355124__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _environmentVariables = __nested_webpack_require_355124__(/*! emulator-state/environment-variables */ \"./src/emulator-state/environment-variables.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            /**\n * Prints arguments to text output\n * Usage: echo 'hello world'\n */ var VARIABLE_GROUP_REGEX = /\\$(\\w+)/g;\n            var DOUBLE_SPACE_REGEX = /\\s\\s+/g;\n            var substituteEnvVariables = function substituteEnvVariables(environmentVariables, inputStr) {\n                return inputStr.replace(VARIABLE_GROUP_REGEX, function(match, varName) {\n                    return (0, _environmentVariables.getEnvironmentVariable)(environmentVariables, varName) || \"\";\n                });\n            };\n            var optDef = {};\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var input = commandOptions.join(\" \");\n                var outputStr = substituteEnvVariables(state.getEnvVariables(), input);\n                var cleanStr = outputStr.trim().replace(DOUBLE_SPACE_REGEX, \" \");\n                return {\n                    output: OutputFactory.makeTextOutput(cleanStr)\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/head.js\": /*!******************************!*\\\n  !*** ./src/commands/head.js ***!\n  \\******************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_359201__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_359201__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_359201__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _head_tail_util = __nested_webpack_require_359201__(/*! commands/util/_head_tail_util.js */ \"./src/commands/util/_head_tail_util.js\");\n            var _util = __nested_webpack_require_359201__(/*! emulator-state/util */ \"./src/emulator-state/util.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Prints the first n lines of a file\n * Usage: head -n 5 file.txt\n */ var optDef = {\n                \"-n, --lines\": \"<count>\"\n            };\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), argv = _parseOptions.argv, options = _parseOptions.options;\n                if (argv.length === 0) {\n                    return {};\n                }\n                var filePath = (0, _util.resolvePath)(state, argv[0]);\n                var headTrimmingFn = function headTrimmingFn(lines, lineCount) {\n                    return lines.slice(0, lineCount);\n                };\n                var _trimFileContent = (0, _head_tail_util.trimFileContent)(state.getFileSystem(), filePath, options, headTrimmingFn), content = _trimFileContent.content, err = _trimFileContent.err;\n                if (err) {\n                    return {\n                        output: OutputFactory.makeErrorOutput(err)\n                    };\n                }\n                return {\n                    output: OutputFactory.makeTextOutput(content)\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/history.js\": /*!*********************************!*\\\n  !*** ./src/commands/history.js ***!\n  \\*********************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_363906__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_363906__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_363906__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _history = __nested_webpack_require_363906__(/*! emulator-state/history */ \"./src/emulator-state/history.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Lists or clears commands executed in the terminal\n * Usage: history -c\n */ var clearStateHistory = function clearStateHistory(state) {\n                return state.setHistory((0, _history.create)());\n            };\n            var stringifyStateHistory = function stringifyStateHistory(state) {\n                return state.getHistory().join(\"\\n\");\n            };\n            var optDef = {\n                \"-c, --clear\": \"\" // remove history entries\n            };\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), options = _parseOptions.options;\n                if (options.clear) {\n                    return {\n                        state: clearStateHistory(state)\n                    };\n                }\n                ;\n                return {\n                    output: OutputFactory.makeTextOutput(stringifyStateHistory(state))\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/index.js\": /*!*******************************!*\\\n  !*** ./src/commands/index.js ***!\n  \\*******************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_368299__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.commandNames = void 0;\n            function ownKeys(object, enumerableOnly) {\n                var keys = Object.keys(object);\n                if (Object.getOwnPropertySymbols) {\n                    var symbols = Object.getOwnPropertySymbols(object);\n                    if (enumerableOnly) symbols = symbols.filter(function(sym) {\n                        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n                    });\n                    keys.push.apply(keys, symbols);\n                }\n                return keys;\n            }\n            function _objectSpread(target) {\n                for(var i = 1; i < arguments.length; i++){\n                    var source = arguments[i] != null ? arguments[i] : {};\n                    if (i % 2) {\n                        ownKeys(Object(source), true).forEach(function(key) {\n                            _defineProperty(target, key, source[key]);\n                        });\n                    } else if (Object.getOwnPropertyDescriptors) {\n                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n                    } else {\n                        ownKeys(Object(source)).forEach(function(key) {\n                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n                        });\n                    }\n                }\n                return target;\n            }\n            function _defineProperty(obj, key, value) {\n                if (key in obj) {\n                    Object.defineProperty(obj, key, {\n                        value: value,\n                        enumerable: true,\n                        configurable: true,\n                        writable: true\n                    });\n                } else {\n                    obj[key] = value;\n                }\n                return obj;\n            }\n            var commandNames = [\n                \"cat\",\n                \"cd\",\n                \"clear\",\n                \"cp\",\n                \"echo\",\n                \"head\",\n                \"history\",\n                \"ls\",\n                \"mkdir\",\n                \"printenv\",\n                \"pwd\",\n                \"rm\",\n                \"rmdir\",\n                \"tail\",\n                \"touch\",\n                \"whoami\"\n            ];\n            exports1.commandNames = commandNames;\n            var _default = commandNames.reduce(function(mapping, commandName) {\n                return _objectSpread({}, mapping, _defineProperty({}, commandName, {\n                    \"function\": __nested_webpack_require_368299__(\"./src/commands sync recursive ^\\\\.\\\\/.*$\")(\"./\".concat(commandName))[\"default\"],\n                    optDef: __nested_webpack_require_368299__(\"./src/commands sync recursive ^\\\\.\\\\/.*$\")(\"./\".concat(commandName)).optDef\n                }));\n            }, {});\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/ls.js\": /*!****************************!*\\\n  !*** ./src/commands/ls.js ***!\n  \\****************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_371598__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_371598__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var DirectoryOp = _interopRequireWildcard(__nested_webpack_require_371598__(/*! fs/operations-with-permissions/directory-operations */ \"./src/fs/operations-with-permissions/directory-operations.js\"));\n            var EnvVariableUtil = _interopRequireWildcard(__nested_webpack_require_371598__(/*! emulator-state/environment-variables */ \"./src/emulator-state/environment-variables.js\"));\n            var PathUtil = _interopRequireWildcard(__nested_webpack_require_371598__(/*! fs/util/path-util */ \"./src/fs/util/path-util.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_371598__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _immutable = __nested_webpack_require_371598__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Lists the contents of a directory\n * Usage: ls /folderName\n */ var IMPLIED_DIRECTORY_ENTRIES = (0, _immutable.Seq)([\n                \".\",\n                \"..\"\n            ]); // . = listed folder, .. = parent folder\n            /**\n * Finds the directory path to list entries in.\n *\n * If ls has an argument passed in (example: ls /home/user/directory-to-list),\n * use the first argument as the directory to list.\n *\n * If ls is used without any path arguments (example: ls), the cwd (current\n * working directory) should be listed by ls.\n * @param  {Map}    envVariables  environment variables\n * @param  {array}  argv          argument vector\n * @return {string}               directory path to list\n */ var resolveDirectoryToList = function resolveDirectoryToList(envVariables, argv) {\n                var cwd = EnvVariableUtil.getEnvironmentVariable(envVariables, \"cwd\");\n                if (argv.length > 0) {\n                    return PathUtil.toAbsolutePath(argv[0], cwd);\n                }\n                return cwd;\n            };\n            /**\n * Alphabetically sorts the ls listing for display to the user\n * @param  {array}  listing list of files/directories to present to the user\n * @return {object}         return object of ls\n */ var makeSortedReturn = function makeSortedReturn(listing) {\n                var sortedListing = listing.sort();\n                return {\n                    output: OutputFactory.makeTextOutput(sortedListing.join(\" \"))\n                };\n            };\n            var removeHiddenFilesFilter = function removeHiddenFilesFilter(record) {\n                return !record.startsWith(\".\");\n            };\n            var optDef = {\n                \"-a, --all\": \"\",\n                // Include hidden directory entries starting with .\n                \"-A, --almost-all\": \"\" // Do not include . and .. as implied directory entries\n            };\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), options = _parseOptions.options, argv = _parseOptions.argv;\n                var dirPath = resolveDirectoryToList(state.getEnvVariables(), argv);\n                var _DirectoryOp$listDire = DirectoryOp.listDirectory(state.getFileSystem(), dirPath), err = _DirectoryOp$listDire.err, dirList = _DirectoryOp$listDire.list;\n                if (err) {\n                    return {\n                        output: OutputFactory.makeErrorOutput(err)\n                    };\n                }\n                if (options.all) {\n                    return makeSortedReturn(IMPLIED_DIRECTORY_ENTRIES.concat(dirList));\n                } else if (options.almostAll) {\n                    return makeSortedReturn(dirList);\n                }\n                return makeSortedReturn(dirList.filter(removeHiddenFilesFilter));\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/mkdir.js\": /*!*******************************!*\\\n  !*** ./src/commands/mkdir.js ***!\n  \\*******************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_378380__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_378380__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var DirOp = _interopRequireWildcard(__nested_webpack_require_378380__(/*! fs/operations-with-permissions/directory-operations */ \"./src/fs/operations-with-permissions/directory-operations.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_378380__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var FileUtil = _interopRequireWildcard(__nested_webpack_require_378380__(/*! fs/util/file-util */ \"./src/fs/util/file-util.js\"));\n            var _util = __nested_webpack_require_378380__(/*! emulator-state/util */ \"./src/emulator-state/util.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Creates an empty directory\n * Usage: mkdir /newDir\n */ var EMPTY_DIR = FileUtil.makeDirectory();\n            var optDef = {};\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), argv = _parseOptions.argv;\n                if (argv.length === 0) {\n                    return {}; // do nothing if no arguments are given\n                }\n                var newFolderPath = (0, _util.resolvePath)(state, argv[0]);\n                var _DirOp$addDirectory = DirOp.addDirectory(state.getFileSystem(), newFolderPath, EMPTY_DIR, false), fs = _DirOp$addDirectory.fs, err = _DirOp$addDirectory.err;\n                if (err) {\n                    return {\n                        output: OutputFactory.makeErrorOutput(err)\n                    };\n                }\n                return {\n                    state: state.setFileSystem(fs)\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/printenv.js\": /*!**********************************!*\\\n  !*** ./src/commands/printenv.js ***!\n  \\**********************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_383082__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_383082__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_383082__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _environmentVariables = __nested_webpack_require_383082__(/*! emulator-state/environment-variables */ \"./src/emulator-state/environment-variables.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            function _toConsumableArray(arr) {\n                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n            }\n            function _nonIterableSpread() {\n                throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n            }\n            function _unsupportedIterableToArray(o, minLen) {\n                if (!o) return;\n                if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n                var n = Object.prototype.toString.call(o).slice(8, -1);\n                if (n === \"Object\" && o.constructor) n = o.constructor.name;\n                if (n === \"Map\" || n === \"Set\") return Array.from(n);\n                if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n            }\n            function _iterableToArray(iter) {\n                if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n            }\n            function _arrayWithoutHoles(arr) {\n                if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n            }\n            function _arrayLikeToArray(arr, len) {\n                if (len == null || len > arr.length) len = arr.length;\n                for(var i = 0, arr2 = new Array(len); i < len; i++){\n                    arr2[i] = arr[i];\n                }\n                return arr2;\n            }\n            // Converts all key-value pairs of the environment variables to a printable format\n            var stringifyEnvVariables = function stringifyEnvVariables(envVariables) {\n                var outputs = envVariables.reduce(function(outputs, varVal, varKey) {\n                    return [].concat(_toConsumableArray(outputs), [\n                        \"\".concat(varKey, \"=\").concat(varVal)\n                    ]);\n                }, []);\n                return outputs.join(\"\\n\");\n            };\n            var optDef = {};\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), argv = _parseOptions.argv;\n                var envVariables = state.getEnvVariables();\n                if (argv.length === 0) {\n                    return {\n                        output: OutputFactory.makeTextOutput(stringifyEnvVariables(envVariables))\n                    };\n                } // An argument has been passed to printenv; printenv will only print the first\n                // argument provided\n                var varValue = (0, _environmentVariables.getEnvironmentVariable)(envVariables, argv[0]);\n                if (varValue) {\n                    return {\n                        output: OutputFactory.makeTextOutput(varValue)\n                    };\n                }\n                return {};\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/pwd.js\": /*!*****************************!*\\\n  !*** ./src/commands/pwd.js ***!\n  \\*****************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_389483__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_389483__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _environmentVariables = __nested_webpack_require_389483__(/*! emulator-state/environment-variables */ \"./src/emulator-state/environment-variables.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            /**\n * Prints out the current working directory (cwd).\n * Usage: pwd\n */ var optDef = {};\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                return {\n                    output: OutputFactory.makeTextOutput((0, _environmentVariables.getEnvironmentVariable)(state.getEnvVariables(), \"cwd\"))\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/rm.js\": /*!****************************!*\\\n  !*** ./src/commands/rm.js ***!\n  \\****************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_392958__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_392958__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var FileOp = _interopRequireWildcard(__nested_webpack_require_392958__(/*! fs/operations-with-permissions/file-operations */ \"./src/fs/operations-with-permissions/file-operations.js\"));\n            var DirOp = _interopRequireWildcard(__nested_webpack_require_392958__(/*! fs/operations-with-permissions/directory-operations */ \"./src/fs/operations-with-permissions/directory-operations.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_392958__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _util = __nested_webpack_require_392958__(/*! emulator-state/util */ \"./src/emulator-state/util.js\");\n            var _fsError = __nested_webpack_require_392958__(/*! fs/fs-error */ \"./src/fs/fs-error.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Removes a directory or a file\n * Usage: rm /existingDir\n */ var optDef = {\n                \"--no-preserve-root, --noPreserveRoot\": \"\",\n                \"-r, --recursive\": \"\"\n            };\n            exports1.optDef = optDef;\n            var makeNoPathErrorOutput = function makeNoPathErrorOutput() {\n                var noSuchFileOrDirError = (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_FILE_OR_DIRECTORY);\n                return {\n                    output: OutputFactory.makeErrorOutput(noSuchFileOrDirError)\n                };\n            };\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), argv = _parseOptions.argv, options = _parseOptions.options;\n                if (argv.length === 0) {\n                    return {}; // do nothing if no arguments are given\n                }\n                var deletionPath = (0, _util.resolvePath)(state, argv[0]);\n                var fs = state.getFileSystem();\n                if (deletionPath === \"/\" && options.noPreserveRoot !== true) {\n                    return {}; // do nothing as cannot safely delete the root\n                }\n                if (!fs.has(deletionPath)) {\n                    return makeNoPathErrorOutput();\n                }\n                var _ref = options.recursive === true ? DirOp.deleteDirectory(fs, deletionPath, true) : FileOp.deleteFile(fs, deletionPath), deletedPathFS = _ref.fs, err = _ref.err;\n                if (err) {\n                    return {\n                        output: OutputFactory.makeErrorOutput(err)\n                    };\n                }\n                return {\n                    state: state.setFileSystem(deletedPathFS)\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/rmdir.js\": /*!*******************************!*\\\n  !*** ./src/commands/rmdir.js ***!\n  \\*******************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_398572__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_398572__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var DirOp = _interopRequireWildcard(__nested_webpack_require_398572__(/*! fs/operations-with-permissions/directory-operations */ \"./src/fs/operations-with-permissions/directory-operations.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_398572__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _util = __nested_webpack_require_398572__(/*! emulator-state/util */ \"./src/emulator-state/util.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Removes an empty directory\n * Usage: rmdir /emptyDir\n */ var optDef = {};\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), argv = _parseOptions.argv;\n                if (argv.length === 0) {\n                    return {}; // do nothing if no arguments are given\n                }\n                var pathToDelete = (0, _util.resolvePath)(state, argv[0]);\n                var _DirOp$deleteDirector = DirOp.deleteDirectory(state.getFileSystem(), pathToDelete, false), fs = _DirOp$deleteDirector.fs, err = _DirOp$deleteDirector.err;\n                if (err) {\n                    return {\n                        output: OutputFactory.makeErrorOutput(err)\n                    };\n                }\n                return {\n                    state: state.setFileSystem(fs)\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/tail.js\": /*!******************************!*\\\n  !*** ./src/commands/tail.js ***!\n  \\******************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_403074__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_403074__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_403074__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _head_tail_util = __nested_webpack_require_403074__(/*! commands/util/_head_tail_util.js */ \"./src/commands/util/_head_tail_util.js\");\n            var _util = __nested_webpack_require_403074__(/*! emulator-state/util */ \"./src/emulator-state/util.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Prints the last n lines of a file\n * Usage: tail -n 5 file.txt\n */ var optDef = {\n                \"-n, --lines\": \"<count>\"\n            };\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), argv = _parseOptions.argv, options = _parseOptions.options;\n                if (argv.length === 0) {\n                    return {};\n                }\n                var filePath = (0, _util.resolvePath)(state, argv[0]);\n                var tailTrimmingFn = function tailTrimmingFn(lines, lineCount) {\n                    return lines.slice(-1 * lineCount);\n                };\n                var _trimFileContent = (0, _head_tail_util.trimFileContent)(state.getFileSystem(), filePath, options, tailTrimmingFn), content = _trimFileContent.content, err = _trimFileContent.err;\n                if (err) {\n                    return {\n                        output: OutputFactory.makeErrorOutput(err)\n                    };\n                }\n                return {\n                    output: OutputFactory.makeTextOutput(content)\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/touch.js\": /*!*******************************!*\\\n  !*** ./src/commands/touch.js ***!\n  \\*******************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_407772__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var _optionParser = _interopRequireDefault(__nested_webpack_require_407772__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            var FileOp = _interopRequireWildcard(__nested_webpack_require_407772__(/*! fs/operations-with-permissions/file-operations */ \"./src/fs/operations-with-permissions/file-operations.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_407772__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var FileUtil = _interopRequireWildcard(__nested_webpack_require_407772__(/*! fs/util/file-util */ \"./src/fs/util/file-util.js\"));\n            var _util = __nested_webpack_require_407772__(/*! emulator-state/util */ \"./src/emulator-state/util.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Creates an empty file.\n * Usage: touch new_file.txt\n */ var EMPTY_FILE = FileUtil.makeFile();\n            var optDef = {};\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                var _parseOptions = (0, _optionParser[\"default\"])(commandOptions, optDef), argv = _parseOptions.argv;\n                if (argv.length === 0) {\n                    return {}; // do nothing if no arguments are given\n                }\n                var filePath = (0, _util.resolvePath)(state, argv[0]);\n                if (state.getFileSystem().has(filePath)) {\n                    return {}; // do nothing if already has a file at the provided path\n                }\n                var _FileOp$writeFile = FileOp.writeFile(state.getFileSystem(), filePath, EMPTY_FILE), fs = _FileOp$writeFile.fs, err = _FileOp$writeFile.err;\n                if (err) {\n                    return {\n                        output: OutputFactory.makeErrorOutput(err)\n                    };\n                }\n                return {\n                    state: state.setFileSystem(fs)\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/commands/util/_head_tail_util.js\": /*!**********************************************!*\\\n  !*** ./src/commands/util/_head_tail_util.js ***!\n  \\**********************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_412651__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.trimFileContent = void 0;\n            var FileOp = _interopRequireWildcard(__nested_webpack_require_412651__(/*! fs/operations-with-permissions/file-operations */ \"./src/fs/operations-with-permissions/file-operations.js\"));\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_412651__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            var DEFAULT_LINE_COUNT = 10;\n            var trimFileContent = function trimFileContent(fs, filePath, options, trimmingFn) {\n                var _FileOp$readFile = FileOp.readFile(fs, filePath), file = _FileOp$readFile.file, err = _FileOp$readFile.err;\n                if (err) {\n                    return {\n                        err: OutputFactory.makeErrorOutput(err)\n                    };\n                }\n                ;\n                var linesCount = options.lines ? Number(options.lines) : DEFAULT_LINE_COUNT;\n                var trimmedLines = trimmingFn(file.get(\"content\").split(\"\\n\"), linesCount);\n                return {\n                    content: trimmedLines.join(\"\\n\")\n                };\n            };\n            exports1.trimFileContent = trimFileContent;\n        /***/ },\n        /***/ \"./src/commands/whoami.js\": /*!********************************!*\\\n  !*** ./src/commands/whoami.js ***!\n  \\********************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_416503__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.optDef = void 0;\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_416503__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var _environmentVariables = __nested_webpack_require_416503__(/*! emulator-state/environment-variables */ \"./src/emulator-state/environment-variables.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            /**\n * Prints the username of the logged in user\n * Usage: whoami\n */ var FALLBACK_USERNAME = \"root\";\n            var optDef = {};\n            exports1.optDef = optDef;\n            var _default = function _default(state, commandOptions) {\n                return {\n                    output: OutputFactory.makeTextOutput((0, _environmentVariables.getEnvironmentVariable)(state.getEnvVariables(), \"user\") || FALLBACK_USERNAME)\n                };\n            };\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/emulator-output/index.js\": /*!**************************************!*\\\n  !*** ./src/emulator-output/index.js ***!\n  \\**************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_420081__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = void 0;\n            var OutputFactory = _interopRequireWildcard(__nested_webpack_require_420081__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\"));\n            var OutputType = _interopRequireWildcard(__nested_webpack_require_420081__(/*! emulator-output/output-type */ \"./src/emulator-output/output-type.js\"));\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            var _default = {\n                OutputFactory: OutputFactory,\n                OutputType: OutputType\n            };\n            exports1[\"default\"] = _default;\n            module1.exports = exports1.default;\n        /***/ },\n        /***/ \"./src/emulator-output/output-factory.js\": /*!***********************************************!*\\\n  !*** ./src/emulator-output/output-factory.js ***!\n  \\***********************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_423378__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.makeErrorOutput = exports1.makeTextOutput = exports1.makeHeaderOutput = exports1.OutputRecord = void 0;\n            var _immutable = __nested_webpack_require_423378__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\n            var _outputType = __nested_webpack_require_423378__(/*! emulator-output/output-type */ \"./src/emulator-output/output-type.js\");\n            /**\n * Output from a command or emulator used for display to the user\n * @type {OutputRecord}\n */ var OutputRecord = (0, _immutable.Record)({\n                type: undefined,\n                content: undefined\n            });\n            /**\n * A terminal header containing metadata\n * @param  {string} cwd   the current working directory path\n * @return {OutputRecord} output record\n */ exports1.OutputRecord = OutputRecord;\n            var makeHeaderOutput = function makeHeaderOutput(cwd, command) {\n                return new OutputRecord({\n                    type: _outputType.HEADER_OUTPUT_TYPE,\n                    content: {\n                        cwd: cwd,\n                        command: command\n                    }\n                });\n            };\n            /**\n * Unstyled text output\n * @param  {string} content plain string output from a command or the emulator\n * @return {OutputRecord}   output record\n */ exports1.makeHeaderOutput = makeHeaderOutput;\n            var makeTextOutput = function makeTextOutput(content) {\n                return new OutputRecord({\n                    type: _outputType.TEXT_OUTPUT_TYPE,\n                    content: content\n                });\n            };\n            /**\n * Error text output\n * @param  {object} err internal error object\n * @return {OutputRecord}   output record\n */ exports1.makeTextOutput = makeTextOutput;\n            var makeErrorOutput = function makeErrorOutput(err) {\n                return new OutputRecord({\n                    type: _outputType.TEXT_ERROR_OUTPUT_TYPE,\n                    content: \"\".concat(err.source, \": \").concat(err.type)\n                });\n            };\n            exports1.makeErrorOutput = makeErrorOutput;\n        /***/ },\n        /***/ \"./src/emulator-output/output-type.js\": /*!********************************************!*\\\n  !*** ./src/emulator-output/output-type.js ***!\n  \\********************************************/ /*! no static exports found */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.HEADER_OUTPUT_TYPE = exports1.TEXT_ERROR_OUTPUT_TYPE = exports1.TEXT_OUTPUT_TYPE = void 0;\n            /**\n * Types of output which can be used to display content to the user\n * @type {String}\n */ var TEXT_OUTPUT_TYPE = \"TEXT_OUTPUT\";\n            exports1.TEXT_OUTPUT_TYPE = TEXT_OUTPUT_TYPE;\n            var TEXT_ERROR_OUTPUT_TYPE = \"TEXT_ERROR_OUTPUT\";\n            exports1.TEXT_ERROR_OUTPUT_TYPE = TEXT_ERROR_OUTPUT_TYPE;\n            var HEADER_OUTPUT_TYPE = \"HEADER_OUTPUT_TYPE\";\n            exports1.HEADER_OUTPUT_TYPE = HEADER_OUTPUT_TYPE;\n        /***/ },\n        /***/ \"./src/emulator-state/EmulatorState.js\": /*!*********************************************!*\\\n  !*** ./src/emulator-state/EmulatorState.js ***!\n  \\*********************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_426925__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = void 0;\n            var _immutable = __nested_webpack_require_426925__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\n            var _commandMapping = __nested_webpack_require_426925__(/*! emulator-state/command-mapping */ \"./src/emulator-state/command-mapping.js\");\n            var _environmentVariables = __nested_webpack_require_426925__(/*! emulator-state/environment-variables */ \"./src/emulator-state/environment-variables.js\");\n            var _fileSystem = __nested_webpack_require_426925__(/*! emulator-state/file-system */ \"./src/emulator-state/file-system.js\");\n            var _history = __nested_webpack_require_426925__(/*! emulator-state/history */ \"./src/emulator-state/history.js\");\n            var _outputs = __nested_webpack_require_426925__(/*! emulator-state/outputs */ \"./src/emulator-state/outputs.js\");\n            function _defineProperty(obj, key, value) {\n                if (key in obj) {\n                    Object.defineProperty(obj, key, {\n                        value: value,\n                        enumerable: true,\n                        configurable: true,\n                        writable: true\n                    });\n                } else {\n                    obj[key] = value;\n                }\n                return obj;\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _defineProperties(target, props) {\n                for(var i = 0; i < props.length; i++){\n                    var descriptor = props[i];\n                    descriptor.enumerable = descriptor.enumerable || false;\n                    descriptor.configurable = true;\n                    if (\"value\" in descriptor) descriptor.writable = true;\n                    Object.defineProperty(target, descriptor.key, descriptor);\n                }\n            }\n            function _createClass(Constructor, protoProps, staticProps) {\n                if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) _defineProperties(Constructor, staticProps);\n                return Constructor;\n            }\n            var FS_KEY = \"fs\";\n            var ENVIRONMENT_VARIABLES_KEY = \"environmentVariables\";\n            var HISTORY_KEY = \"history\";\n            var OUTPUTS_KEY = \"outputs\";\n            var COMMAND_MAPPING_KEY = \"commandMapping\";\n            var EmulatorState = /*#__PURE__*/ function() {\n                function EmulatorState(immutable) {\n                    _classCallCheck(this, EmulatorState);\n                    if (!immutable || !(immutable instanceof _immutable.Map)) {\n                        throw new Error(\"Do not use the constructor directly. Use the static create method.\");\n                    }\n                    this._immutable = immutable;\n                }\n                /**\n   * Creates emulator state with defaults\n   * @return {EmulatorState} default emulator state\n   */ _createClass(EmulatorState, [\n                    {\n                        key: \"getFileSystem\",\n                        value: function getFileSystem() {\n                            return this.getImmutable().get(FS_KEY);\n                        }\n                    },\n                    {\n                        key: \"setFileSystem\",\n                        value: function setFileSystem(newFileSystem) {\n                            return new EmulatorState(this.getImmutable().set(FS_KEY, newFileSystem));\n                        }\n                    },\n                    {\n                        key: \"getEnvVariables\",\n                        value: function getEnvVariables() {\n                            return this.getImmutable().get(ENVIRONMENT_VARIABLES_KEY);\n                        }\n                    },\n                    {\n                        key: \"setEnvVariables\",\n                        value: function setEnvVariables(newEnvVariables) {\n                            return new EmulatorState(this.getImmutable().set(ENVIRONMENT_VARIABLES_KEY, newEnvVariables));\n                        }\n                    },\n                    {\n                        key: \"getHistory\",\n                        value: function getHistory() {\n                            return this.getImmutable().get(HISTORY_KEY);\n                        }\n                    },\n                    {\n                        key: \"setHistory\",\n                        value: function setHistory(newHistory) {\n                            return new EmulatorState(this.getImmutable().set(HISTORY_KEY, newHistory));\n                        }\n                    },\n                    {\n                        key: \"getOutputs\",\n                        value: function getOutputs() {\n                            return this.getImmutable().get(OUTPUTS_KEY);\n                        }\n                    },\n                    {\n                        key: \"setOutputs\",\n                        value: function setOutputs(newOutputs) {\n                            return new EmulatorState(this.getImmutable().set(OUTPUTS_KEY, newOutputs));\n                        }\n                    },\n                    {\n                        key: \"getCommandMapping\",\n                        value: function getCommandMapping() {\n                            return this.getImmutable().get(COMMAND_MAPPING_KEY);\n                        }\n                    },\n                    {\n                        key: \"setCommandMapping\",\n                        value: function setCommandMapping(newCommandMapping) {\n                            return new EmulatorState(this.getImmutable().set(COMMAND_MAPPING_KEY, newCommandMapping));\n                        }\n                    },\n                    {\n                        key: \"getImmutable\",\n                        value: function getImmutable() {\n                            return this._immutable;\n                        }\n                    },\n                    {\n                        key: \"toJS\",\n                        value: function toJS() {\n                            return this._immutable.toJS();\n                        }\n                    }\n                ], [\n                    {\n                        key: \"createEmpty\",\n                        value: function createEmpty() {\n                            return EmulatorState.create({});\n                        }\n                    },\n                    {\n                        key: \"create\",\n                        value: function create(_ref) {\n                            var _Map;\n                            var _ref$fs = _ref.fs, fs = _ref$fs === void 0 ? (0, _fileSystem.create)() : _ref$fs, _ref$environmentVaria = _ref.environmentVariables, environmentVariables = _ref$environmentVaria === void 0 ? (0, _environmentVariables.create)() : _ref$environmentVaria, _ref$history = _ref.history, history = _ref$history === void 0 ? (0, _history.create)() : _ref$history, _ref$outputs = _ref.outputs, outputs = _ref$outputs === void 0 ? (0, _outputs.create)() : _ref$outputs, _ref$commandMapping = _ref.commandMapping, commandMapping = _ref$commandMapping === void 0 ? (0, _commandMapping.create)() : _ref$commandMapping;\n                            var stateMap = new _immutable.Map((_Map = {}, _defineProperty(_Map, FS_KEY, fs), _defineProperty(_Map, ENVIRONMENT_VARIABLES_KEY, environmentVariables), _defineProperty(_Map, HISTORY_KEY, history), _defineProperty(_Map, OUTPUTS_KEY, outputs), _defineProperty(_Map, COMMAND_MAPPING_KEY, commandMapping), _Map));\n                            return new EmulatorState(stateMap);\n                        }\n                    }\n                ]);\n                return EmulatorState;\n            }();\n            exports1[\"default\"] = EmulatorState;\n            module1.exports = exports1.default;\n        /***/ },\n        /***/ \"./src/emulator-state/command-mapping.js\": /*!***********************************************!*\\\n  !*** ./src/emulator-state/command-mapping.js ***!\n  \\***********************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_435310__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.getCommandNames = exports1.getCommandOptDef = exports1.getCommandFn = exports1.unsetCommand = exports1.setCommand = exports1.isCommandSet = exports1.create = void 0;\n            var _immutable = __nested_webpack_require_435310__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\n            var _commands = _interopRequireDefault(__nested_webpack_require_435310__(/*! commands */ \"./src/commands/index.js\"));\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Links a command name to a function\n * @param  {Object} [commandMapping={}] default command map\n * @return {Map}                        command mapping\n */ var create = function create() {\n                var commandMapping = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _commands[\"default\"];\n                for(var _i = 0, _Object$keys = Object.keys(commandMapping); _i < _Object$keys.length; _i++){\n                    var commandName = _Object$keys[_i];\n                    var command = commandMapping[commandName];\n                    if (!command.hasOwnProperty(\"function\")) {\n                        throw new Error(\"Failed to create command mapping: missing command function for \".concat(commandName));\n                    }\n                    if (!command.hasOwnProperty(\"optDef\")) {\n                        throw new Error(\"Failed to create command mapping: missing option definition (optDef) for \".concat(commandName));\n                    }\n                }\n                return (0, _immutable.fromJS)(commandMapping);\n            };\n            /**\n * Checks if a comand has been defined with a function in the command mapping\n * @param  {Map}     commandMapping command mapping\n * @param  {string}  commandName    command name to check if available\n * @return {Boolean}                true, if the command is available\n */ exports1.create = create;\n            var isCommandSet = function isCommandSet(commandMapping, commandName) {\n                return commandMapping.has(commandName);\n            };\n            /**\n * Set a command function with a key of the command name into the command mapping\n * @param  {Map}      commandMapping command mapping\n * @param  {string}   commandName    name of the function\n * @param  {function} commandFn      command function\n * @param  {object}   optDef         option definition (optional)\n * @return {Map}                     command mapping\n */ exports1.isCommandSet = isCommandSet;\n            var setCommand = function setCommand(commandMapping, commandName, commandFn, optDef) {\n                if (commandFn === undefined) {\n                    throw new Error(\"Cannot set \".concat(commandName, \" command without function\"));\n                }\n                if (optDef === undefined) {\n                    throw new Error(\"Cannot set \".concat(commandName, \" command without optDef (pass in {} if the command takes no options)\"));\n                }\n                return commandMapping.set(commandName, (0, _immutable.fromJS)({\n                    \"function\": commandFn,\n                    \"optDef\": optDef\n                }));\n            };\n            /**\n * Removes a command name and its function from a command mapping\n * @param  {Map}    commandMapping command mapping\n * @param  {string} commandName    name of command to remove\n * @return {Map}                   command mapping\n */ exports1.setCommand = setCommand;\n            var unsetCommand = function unsetCommand(commandMapping, commandName) {\n                return commandMapping[\"delete\"](commandName);\n            };\n            /**\n * Gets the function of a command based on its command name (the key) from the\n * command mapping\n * @param  {Map}      commandMapping command mapping\n * @param  {string}   commandName    name of command\n * @return {function}                command function\n */ exports1.unsetCommand = unsetCommand;\n            var getCommandFn = function getCommandFn(commandMapping, commandName) {\n                if (commandMapping.has(commandName)) {\n                    return commandMapping.get(commandName).get(\"function\");\n                }\n                return undefined;\n            };\n            /**\n * Gets the option definition of a command based on its command name\n * @param  {Map}      commandMapping command mapping\n * @param  {string}   commandName    name of command\n * @return {Map}                     option definition\n */ exports1.getCommandFn = getCommandFn;\n            var getCommandOptDef = function getCommandOptDef(commandMapping, commandName) {\n                if (commandMapping.has(commandName)) {\n                    return commandMapping.get(commandName).get(\"optDef\");\n                }\n                return undefined;\n            };\n            /**\n * Gets command names\n * @param  {Map}      commandMapping command mapping\n * @return {Seq}                     sequence of command names\n */ exports1.getCommandOptDef = getCommandOptDef;\n            var getCommandNames = function getCommandNames(commandMapping) {\n                return commandMapping.keySeq();\n            };\n            exports1.getCommandNames = getCommandNames;\n        /***/ },\n        /***/ \"./src/emulator-state/environment-variables.js\": /*!*****************************************************!*\\\n  !*** ./src/emulator-state/environment-variables.js ***!\n  \\*****************************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_441050__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.unsetEnvironmentVariable = exports1.setEnvironmentVariable = exports1.getEnvironmentVariable = exports1.create = void 0;\n            var _immutable = __nested_webpack_require_441050__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\n            function ownKeys(object, enumerableOnly) {\n                var keys = Object.keys(object);\n                if (Object.getOwnPropertySymbols) {\n                    var symbols = Object.getOwnPropertySymbols(object);\n                    if (enumerableOnly) symbols = symbols.filter(function(sym) {\n                        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n                    });\n                    keys.push.apply(keys, symbols);\n                }\n                return keys;\n            }\n            function _objectSpread(target) {\n                for(var i = 1; i < arguments.length; i++){\n                    var source = arguments[i] != null ? arguments[i] : {};\n                    if (i % 2) {\n                        ownKeys(Object(source), true).forEach(function(key) {\n                            _defineProperty(target, key, source[key]);\n                        });\n                    } else if (Object.getOwnPropertyDescriptors) {\n                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n                    } else {\n                        ownKeys(Object(source)).forEach(function(key) {\n                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n                        });\n                    }\n                }\n                return target;\n            }\n            function _defineProperty(obj, key, value) {\n                if (key in obj) {\n                    Object.defineProperty(obj, key, {\n                        value: value,\n                        enumerable: true,\n                        configurable: true,\n                        writable: true\n                    });\n                } else {\n                    obj[key] = value;\n                }\n                return obj;\n            }\n            /**\n * Environment variable mapping containing arbitary data accessed by any\n * command or the emulator as a key-value pair\n * @param  {Object} [defaultVariables={}] default environment variables\n * @return {Map}                          environment variables\n */ var create = function create() {\n                var defaultVariables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                var cwd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"/\";\n                if (!cwd && !defaultVariables.hasOwnProperty(\"cwd\")) {\n                    throw new Error(\"Failed to create environment variables. Missing 'cwd' (current working directory).\");\n                }\n                return (0, _immutable.Map)(_objectSpread({\n                    \"cwd\": cwd\n                }, defaultVariables));\n            };\n            /**\n * Gets the value of an environment variable\n * @param  {Map} environmentVariables environment variables\n * @param  {string} key               name of the environment variable\n * @return {T}                        the value stored in the environment variable\n */ exports1.create = create;\n            var getEnvironmentVariable = function getEnvironmentVariable(environmentVariables, key) {\n                return environmentVariables.get(key);\n            };\n            /**\n * Sets the value of an environment variable\n * @param {Map} environmentVariables environment variables\n * @param {string} key               name of the environment variable\n * @param {T} val                    value to store in the environment variable\n * @return {Map}                     environment variables\n */ exports1.getEnvironmentVariable = getEnvironmentVariable;\n            var setEnvironmentVariable = function setEnvironmentVariable(environmentVariables, key, val) {\n                return environmentVariables.set(key, val);\n            };\n            /**\n * Removes an environment variable\n * @param {Map} environmentVariables environment variables\n * @param {string} key               name of the environment variable\n * @return {Map}                     environment variables\n */ exports1.setEnvironmentVariable = setEnvironmentVariable;\n            var unsetEnvironmentVariable = function unsetEnvironmentVariable(environmentVariables, key) {\n                return environmentVariables[\"delete\"](key);\n            };\n            exports1.unsetEnvironmentVariable = unsetEnvironmentVariable;\n        /***/ },\n        /***/ \"./src/emulator-state/file-system.js\": /*!*******************************************!*\\\n  !*** ./src/emulator-state/file-system.js ***!\n  \\*******************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_446087__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.create = void 0;\n            var FileUtil = _interopRequireWildcard(__nested_webpack_require_446087__(/*! fs/util/file-util */ \"./src/fs/util/file-util.js\"));\n            var DirOp = _interopRequireWildcard(__nested_webpack_require_446087__(/*! fs/operations/directory-operations */ \"./src/fs/operations/directory-operations.js\"));\n            var _immutable = __nested_webpack_require_446087__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            var DEFAULT_FILE_SYSTEM = {\n                \"/\": FileUtil.makeDirectory()\n            };\n            /**\n * Creates an immutable data structure for a file system\n * @param  {object} jsFs a file system in a simple JavaScript object\n * @return {Map}         an immutable file system\n */ var create = function create() {\n                var jsFs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_FILE_SYSTEM;\n                return DirOp.fillGaps((0, _immutable.fromJS)(jsFs));\n            };\n            exports1.create = create;\n        /***/ },\n        /***/ \"./src/emulator-state/history.js\": /*!***************************************!*\\\n  !*** ./src/emulator-state/history.js ***!\n  \\***************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_449789__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.recordCommand = exports1.create = void 0;\n            var _immutable = __nested_webpack_require_449789__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\n            function _toConsumableArray(arr) {\n                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n            }\n            function _nonIterableSpread() {\n                throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n            }\n            function _unsupportedIterableToArray(o, minLen) {\n                if (!o) return;\n                if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n                var n = Object.prototype.toString.call(o).slice(8, -1);\n                if (n === \"Object\" && o.constructor) n = o.constructor.name;\n                if (n === \"Map\" || n === \"Set\") return Array.from(n);\n                if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n            }\n            function _iterableToArray(iter) {\n                if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n            }\n            function _arrayWithoutHoles(arr) {\n                if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n            }\n            function _arrayLikeToArray(arr, len) {\n                if (len == null || len > arr.length) len = arr.length;\n                for(var i = 0, arr2 = new Array(len); i < len; i++){\n                    arr2[i] = arr[i];\n                }\n                return arr2;\n            }\n            /**\n * Creates a new history stack of previous commands that have been run in the\n * emulator\n * @param  {array}  [entries=[]] commands which have already been run (if any)\n * @return {Stack}               history list\n */ var create = function create() {\n                var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n                return _immutable.Stack.of.apply(_immutable.Stack, _toConsumableArray(entries));\n            };\n            /**\n * Stores a command in history in a stack (i.e., the latest command is on top of\n * the history stack)\n * @param  {Stack} history     history\n * @param  {string} commandRun the command to store\n * @return {Stack}             history\n */ exports1.create = create;\n            var recordCommand = function recordCommand(history, commandRun) {\n                return history.push(commandRun);\n            };\n            exports1.recordCommand = recordCommand;\n        /***/ },\n        /***/ \"./src/emulator-state/index.js\": /*!*************************************!*\\\n  !*** ./src/emulator-state/index.js ***!\n  \\*************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_452888__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = void 0;\n            var CommandMapping = _interopRequireWildcard(__nested_webpack_require_452888__(/*! emulator-state/command-mapping */ \"./src/emulator-state/command-mapping.js\"));\n            var EnvironmentVariables = _interopRequireWildcard(__nested_webpack_require_452888__(/*! emulator-state/environment-variables */ \"./src/emulator-state/environment-variables.js\"));\n            var FileSystem = _interopRequireWildcard(__nested_webpack_require_452888__(/*! emulator-state/file-system */ \"./src/emulator-state/file-system.js\"));\n            var History = _interopRequireWildcard(__nested_webpack_require_452888__(/*! emulator-state/history */ \"./src/emulator-state/history.js\"));\n            var Outputs = _interopRequireWildcard(__nested_webpack_require_452888__(/*! emulator-state/outputs */ \"./src/emulator-state/outputs.js\"));\n            var _EmulatorState = _interopRequireDefault(__nested_webpack_require_452888__(/*! emulator-state/EmulatorState */ \"./src/emulator-state/EmulatorState.js\"));\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            var _default = {\n                EmulatorState: _EmulatorState[\"default\"],\n                CommandMapping: CommandMapping,\n                EnvironmentVariables: EnvironmentVariables,\n                FileSystem: FileSystem,\n                History: History,\n                Outputs: Outputs\n            };\n            exports1[\"default\"] = _default;\n            module1.exports = exports1.default;\n        /***/ },\n        /***/ \"./src/emulator-state/outputs.js\": /*!***************************************!*\\\n  !*** ./src/emulator-state/outputs.js ***!\n  \\***************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_457121__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.addRecord = exports1.create = void 0;\n            var _immutable = __nested_webpack_require_457121__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\n            /**\n * Stores outputs from the emulator (e.g. text to display after running a command)\n * @param  {Array}  [outputs=[]] Previous outputs\n * @return {List}               List of outputs objects\n */ var create = function create() {\n                var outputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n                return (0, _immutable.List)(outputs);\n            };\n            /**\n * Adds a new output record\n * @param {List}         outputs      outputs list\n * @param {OutputRecord} outputRecord record conforming to output schema\n */ exports1.create = create;\n            var addRecord = function addRecord(outputs, outputRecord) {\n                if (!_immutable.Record.isRecord(outputRecord)) {\n                    throw new Error(\"Only records of type OutputRecord can be added to outputs\");\n                }\n                if (!outputRecord.has(\"type\")) {\n                    throw new Error(\"Output record must include a type\");\n                }\n                if (!outputRecord.has(\"content\")) {\n                    throw new Error(\"Output record must include content\");\n                }\n                return outputs.push(outputRecord);\n            };\n            exports1.addRecord = addRecord;\n        /***/ },\n        /***/ \"./src/emulator-state/util.js\": /*!************************************!*\\\n  !*** ./src/emulator-state/util.js ***!\n  \\************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_458962__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.resolvePath = void 0;\n            var EnvVariableUtil = _interopRequireWildcard(__nested_webpack_require_458962__(/*! emulator-state/environment-variables */ \"./src/emulator-state/environment-variables.js\"));\n            var PathUtil = _interopRequireWildcard(__nested_webpack_require_458962__(/*! fs/util/path-util */ \"./src/fs/util/path-util.js\"));\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            /**\n * Converts a given path to an absolute path using the\n * current working directory\n * @param  {EmulatorState} state emulator state\n * @param  {string} path         path (relative or absolute)\n * @return {string}              absolute path\n */ var resolvePath = function resolvePath(state, path) {\n                var cwd = EnvVariableUtil.getEnvironmentVariable(state.getEnvVariables(), \"cwd\");\n                return PathUtil.toAbsolutePath(path, cwd);\n            };\n            exports1.resolvePath = resolvePath;\n        /***/ },\n        /***/ \"./src/emulator/auto-complete.js\": /*!***************************************!*\\\n  !*** ./src/emulator/auto-complete.js ***!\n  \\***************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_462533__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.suggestFileSystemNames = exports1.suggestCommandOptions = exports1.suggestCommands = void 0;\n            var PathUtil = _interopRequireWildcard(__nested_webpack_require_462533__(/*! fs/util/path-util */ \"./src/fs/util/path-util.js\"));\n            var GlobUtil = _interopRequireWildcard(__nested_webpack_require_462533__(/*! fs/util/glob-util */ \"./src/fs/util/glob-util.js\"));\n            var _commandMapping = __nested_webpack_require_462533__(/*! emulator-state/command-mapping */ \"./src/emulator-state/command-mapping.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _toConsumableArray(arr) {\n                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n            }\n            function _nonIterableSpread() {\n                throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n            }\n            function _unsupportedIterableToArray(o, minLen) {\n                if (!o) return;\n                if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n                var n = Object.prototype.toString.call(o).slice(8, -1);\n                if (n === \"Object\" && o.constructor) n = o.constructor.name;\n                if (n === \"Map\" || n === \"Set\") return Array.from(n);\n                if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n            }\n            function _iterableToArray(iter) {\n                if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n            }\n            function _arrayWithoutHoles(arr) {\n                if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n            }\n            function _arrayLikeToArray(arr, len) {\n                if (len == null || len > arr.length) len = arr.length;\n                for(var i = 0, arr2 = new Array(len); i < len; i++){\n                    arr2[i] = arr[i];\n                }\n                return arr2;\n            }\n            /**\n * Suggest command names\n * @param  {Map}    cmdMapping     command mapping\n * @param  {string} partialStr     partial user input of a command\n * @return {array}                 list of possible text suggestions\n */ var suggestCommands = function suggestCommands(cmdMapping, partialStr) {\n                var commandNameSeq = (0, _commandMapping.getCommandNames)(cmdMapping);\n                return _toConsumableArray(GlobUtil.globSeq(commandNameSeq, \"\".concat(partialStr, \"*\")));\n            };\n            /**\n * Suggest command options\n * @param  {Map}    cmdMapping     command mapping\n * @param  {string} commandName    name of the command user is running\n * @param  {string} partialStr     partial user input of a command (excluding the command name)\n * @return {array}                 list of possible text suggestions\n */ exports1.suggestCommands = suggestCommands;\n            var suggestCommandOptions = function suggestCommandOptions(cmdMapping, commandName, partialStr) {\n                if (!(0, _commandMapping.isCommandSet)(cmdMapping, commandName)) {\n                    return [];\n                }\n                var optDefSeq = (0, _commandMapping.getCommandOptDef)(cmdMapping, commandName).keySeq().flatMap(function(opts) {\n                    return opts.split(\",\").map(function(opt) {\n                        return opt.trim();\n                    });\n                });\n                return _toConsumableArray(GlobUtil.globSeq(optDefSeq, \"\".concat(partialStr, \"*\")));\n            };\n            /**\n * Suggest file and folder names from partially completed user input\n * @param  {Map}    fileSystem file system\n * @param  {string} cwd        current working directory\n * @param  {string} partialStr partial string to base suggestions on (excluding the command name)\n * @return {array}             list of possible text suggestions\n */ exports1.suggestCommandOptions = suggestCommandOptions;\n            var suggestFileSystemNames = function suggestFileSystemNames(fileSystem, cwd, partialStr) {\n                var path = PathUtil.toAbsolutePath(partialStr, cwd); // complete name of a folder or file\n                var completeNamePattern = \"\".concat(path, \"*\"); // complete child folder name\n                var completeSubfolderPattern = path === \"/\" ? \"/*\" : \"\".concat(path, \"*/*\"); // only complete child folders when the path ends with / (which marks a directory path)\n                var globPattern = partialStr.endsWith(\"/\") ? completeSubfolderPattern : completeNamePattern;\n                var childPaths = GlobUtil.globPaths(fileSystem, globPattern);\n                if (PathUtil.isAbsPath(partialStr)) {\n                    return _toConsumableArray(childPaths); // absolute paths\n                }\n                return _toConsumableArray(childPaths.map(function(path) {\n                    var pathPartsWithoutTail = PathUtil.toPathParts(partialStr).slice(0, -1);\n                    var newTail = PathUtil.getLastPathPart(path);\n                    return PathUtil.toPath(pathPartsWithoutTail.concat(newTail));\n                })); // relative paths\n            };\n            exports1.suggestFileSystemNames = suggestFileSystemNames;\n        /***/ },\n        /***/ \"./src/emulator/command-runner.js\": /*!****************************************!*\\\n  !*** ./src/emulator/command-runner.js ***!\n  \\****************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_470486__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.run = exports1.makeRunnerErrorOutput = void 0;\n            var _emulatorError = __nested_webpack_require_470486__(/*! emulator/emulator-error */ \"./src/emulator/emulator-error.js\");\n            var _outputFactory = __nested_webpack_require_470486__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\");\n            var CommandMappingUtil = _interopRequireWildcard(__nested_webpack_require_470486__(/*! emulator-state/command-mapping */ \"./src/emulator-state/command-mapping.js\"));\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _toConsumableArray(arr) {\n                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n            }\n            function _nonIterableSpread() {\n                throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n            }\n            function _unsupportedIterableToArray(o, minLen) {\n                if (!o) return;\n                if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n                var n = Object.prototype.toString.call(o).slice(8, -1);\n                if (n === \"Object\" && o.constructor) n = o.constructor.name;\n                if (n === \"Map\" || n === \"Set\") return Array.from(n);\n                if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n            }\n            function _iterableToArray(iter) {\n                if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n            }\n            function _arrayWithoutHoles(arr) {\n                if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n            }\n            function _arrayLikeToArray(arr, len) {\n                if (len == null || len > arr.length) len = arr.length;\n                for(var i = 0, arr2 = new Array(len); i < len; i++){\n                    arr2[i] = arr[i];\n                }\n                return arr2;\n            }\n            /**\n * Makes an internal emulator error for emulator output. Error output may be\n * visible to the user.\n * @param  {string} errorType type of emulator error\n * @return {object}           error output object\n */ var makeRunnerErrorOutput = function makeRunnerErrorOutput(errorType) {\n                return (0, _outputFactory.makeErrorOutput)((0, _emulatorError.makeError)(errorType));\n            };\n            /**\n * Runs a command and returns an object containing either:\n * - outputs from running the command, or\n * - new emulator state after running the command, or\n * - new emulator state and output after running the command\n *\n * The form of the object from this function is as follows:\n * {\n *   outputs: [optional array of output records]\n *   output: [optional single output record]\n *   state: [optional Map]\n * }\n * @param  {Map}    commandMapping command mapping from emulator state\n * @param  {string} commandName    name of command to run\n * @param  {array}  commandArgs    commands to provide to the command function\n * @param  {string}  errorStr      a default string to be displayed if no command is found\n * @return {object}                outputs and/or new state of the emulator\n */ exports1.makeRunnerErrorOutput = makeRunnerErrorOutput;\n            var run = function run(commandMapping, commandName, commandArgs) {\n                var errorStr = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _emulatorError.emulatorErrorType.COMMAND_NOT_FOUND;\n                var notFoundCallback = function notFoundCallback() {\n                    return {\n                        output: makeRunnerErrorOutput(errorStr)\n                    };\n                };\n                if (!CommandMappingUtil.isCommandSet(commandMapping, commandName)) {\n                    return notFoundCallback.apply(void 0, _toConsumableArray(commandArgs));\n                }\n                var command = CommandMappingUtil.getCommandFn(commandMapping, commandName);\n                try {\n                    return command.apply(void 0, _toConsumableArray(commandArgs)); // run extracted command from the mapping\n                } catch (fatalCommandError) {\n                    return {\n                        output: makeRunnerErrorOutput(_emulatorError.emulatorErrorType.UNEXPECTED_COMMAND_FAILURE)\n                    };\n                }\n            };\n            exports1.run = run;\n        /***/ },\n        /***/ \"./src/emulator/emulator-error.js\": /*!****************************************!*\\\n  !*** ./src/emulator/emulator-error.js ***!\n  \\****************************************/ /*! no static exports found */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.makeError = exports1.emulatorErrorType = void 0;\n            /**\n * Emulator error type\n * @type {Object}\n */ var emulatorErrorType = {\n                COMMAND_NOT_FOUND: \"Command not found\",\n                UNEXPECTED_COMMAND_FAILURE: \"Unhandled command error\"\n            };\n            /**\n * Creates an error to display to the user originating from the emulator\n * @param  {string} emulatorErrorType  file system error type\n * @param  {string} [message='']       optional metadata for developers about the error\n * @return {object}                    internal error object\n */ exports1.emulatorErrorType = emulatorErrorType;\n            var makeError = function makeError(emulatorErrorType) {\n                var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n                return {\n                    source: \"emulator\",\n                    type: emulatorErrorType,\n                    message: message\n                };\n            };\n            exports1.makeError = makeError;\n        /***/ },\n        /***/ \"./src/emulator/index.js\": /*!*******************************!*\\\n  !*** ./src/emulator/index.js ***!\n  \\*******************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_479077__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = void 0;\n            var CommandRunner = _interopRequireWildcard(__nested_webpack_require_479077__(/*! emulator/command-runner */ \"./src/emulator/command-runner.js\"));\n            var _commandParser = _interopRequireDefault(__nested_webpack_require_479077__(/*! parser/command-parser */ \"./src/parser/command-parser.js\"));\n            var _outputFactory = __nested_webpack_require_479077__(/*! emulator-output/output-factory */ \"./src/emulator-output/output-factory.js\");\n            var _history = __nested_webpack_require_479077__(/*! emulator-state/history */ \"./src/emulator-state/history.js\");\n            var _environmentVariables = __nested_webpack_require_479077__(/*! emulator-state/environment-variables */ \"./src/emulator-state/environment-variables.js\");\n            var _autoComplete = __nested_webpack_require_479077__(/*! emulator/auto-complete */ \"./src/emulator/auto-complete.js\");\n            var _immutable = __nested_webpack_require_479077__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _createForOfIteratorHelper(o) {\n                if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n                    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n                        var i = 0;\n                        var F = function F() {};\n                        return {\n                            s: F,\n                            n: function n() {\n                                if (i >= o.length) return {\n                                    done: true\n                                };\n                                return {\n                                    done: false,\n                                    value: o[i++]\n                                };\n                            },\n                            e: function e(_e) {\n                                throw _e;\n                            },\n                            f: F\n                        };\n                    }\n                    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n                }\n                var it, normalCompletion = true, didErr = false, err;\n                return {\n                    s: function s() {\n                        it = o[Symbol.iterator]();\n                    },\n                    n: function n() {\n                        var step = it.next();\n                        normalCompletion = step.done;\n                        return step;\n                    },\n                    e: function e(_e2) {\n                        didErr = true;\n                        err = _e2;\n                    },\n                    f: function f() {\n                        try {\n                            if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n                        } finally{\n                            if (didErr) throw err;\n                        }\n                    }\n                };\n            }\n            function _toConsumableArray(arr) {\n                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n            }\n            function _nonIterableSpread() {\n                throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n            }\n            function _unsupportedIterableToArray(o, minLen) {\n                if (!o) return;\n                if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n                var n = Object.prototype.toString.call(o).slice(8, -1);\n                if (n === \"Object\" && o.constructor) n = o.constructor.name;\n                if (n === \"Map\" || n === \"Set\") return Array.from(n);\n                if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n            }\n            function _iterableToArray(iter) {\n                if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n            }\n            function _arrayWithoutHoles(arr) {\n                if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n            }\n            function _arrayLikeToArray(arr, len) {\n                if (len == null || len > arr.length) len = arr.length;\n                for(var i = 0, arr2 = new Array(len); i < len; i++){\n                    arr2[i] = arr[i];\n                }\n                return arr2;\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _defineProperties(target, props) {\n                for(var i = 0; i < props.length; i++){\n                    var descriptor = props[i];\n                    descriptor.enumerable = descriptor.enumerable || false;\n                    descriptor.configurable = true;\n                    if (\"value\" in descriptor) descriptor.writable = true;\n                    Object.defineProperty(target, descriptor.key, descriptor);\n                }\n            }\n            function _createClass(Constructor, protoProps, staticProps) {\n                if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) _defineProperties(Constructor, staticProps);\n                return Constructor;\n            }\n            var Emulator = /*#__PURE__*/ function() {\n                function Emulator() {\n                    _classCallCheck(this, Emulator);\n                }\n                _createClass(Emulator, [\n                    {\n                        key: \"autocomplete\",\n                        /**\n     * Completes user input if there is one, and only one, suggestion.\n     *\n     * If there are no suggestions or more than one suggestion, the original\n     * user input will be returned.\n     * @param  {EmulatorState} state      emulator state\n     * @param  {string}        partialStr partial user input to the emulator\n     * @return {string}                   completed user input when one suggest (or, otherwsie, the original input)\n     */ value: function autocomplete(state, partialStr) {\n                            var suggestions = this.suggest(state, partialStr);\n                            if (suggestions.length !== 1) {\n                                return partialStr;\n                            }\n                            var strParts = new _immutable.List(partialStr.split(\" \"));\n                            var autocompletedText = suggestions[0];\n                            return strParts.update(-1, function(lastVal) {\n                                return autocompletedText;\n                            }).join(\" \");\n                        }\n                    },\n                    {\n                        key: \"suggest\",\n                        /**\n     * Suggest what the user will type next\n     * @param  {EmulatorState} state      emulator state\n     * @param  {string}        partialStr partial user input of a command\n     * @return {array}                    list of possible text suggestions\n     */ value: function suggest(state, partialStr) {\n                            partialStr = this._trimLeadingSpace(partialStr);\n                            var lastPartialChar = partialStr.slice(-1);\n                            var isTypingNewPart = lastPartialChar === \" \";\n                            var strParts = partialStr.trim().split(\" \");\n                            var _this$_getBoundaryWor = this._getBoundaryWords(strParts), cmdName = _this$_getBoundaryWor.start, lastTextEntered = _this$_getBoundaryWor.end;\n                            if (!isTypingNewPart && strParts.length === 1) {\n                                return (0, _autoComplete.suggestCommands)(state.getCommandMapping(), cmdName);\n                            }\n                            var strToComplete = isTypingNewPart ? \"\" : lastTextEntered;\n                            var cwd = (0, _environmentVariables.getEnvironmentVariable)(state.getEnvVariables(), \"cwd\");\n                            return [].concat(_toConsumableArray((0, _autoComplete.suggestCommandOptions)(state.getCommandMapping(), cmdName, strToComplete)), _toConsumableArray((0, _autoComplete.suggestFileSystemNames)(state.getFileSystem(), cwd, strToComplete)));\n                        }\n                    },\n                    {\n                        key: \"_trimLeadingSpace\",\n                        value: function _trimLeadingSpace(str) {\n                            return str.replace(/^\\s+/g, \"\");\n                        }\n                    },\n                    {\n                        key: \"_getBoundaryWords\",\n                        value: function _getBoundaryWords(strParts) {\n                            return {\n                                start: strParts[0],\n                                end: strParts[strParts.length - 1]\n                            };\n                        }\n                    },\n                    {\n                        key: \"execute\",\n                        /**\n     * Runs emulator command\n     * @param  {EmulatorState}  state                   emulator state before running command\n     * @param  {string}         str                     command string to execute\n     * @param  {Array}          [executionListeners=[]] list of plugins to notify while running the command\n     * @param  {string}         errorStr                string to display on unrecognized command\n     * @return {EmulatorState}                          updated emulator state after running command\n     */ value: function execute(state, str) {\n                            var executionListeners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n                            var errorStr = arguments.length > 3 ? arguments[3] : undefined;\n                            var _iterator = _createForOfIteratorHelper(executionListeners), _step;\n                            try {\n                                for(_iterator.s(); !(_step = _iterator.n()).done;){\n                                    var executionListener = _step.value;\n                                    executionListener.onExecuteStarted(state, str);\n                                }\n                            } catch (err) {\n                                _iterator.e(err);\n                            } finally{\n                                _iterator.f();\n                            }\n                            state = this._addHeaderOutput(state, str);\n                            if (str.trim() === \"\") {\n                                // empty command string\n                                state = this._addCommandOutputs(state, [\n                                    (0, _outputFactory.makeTextOutput)(\"\")\n                                ]);\n                            } else {\n                                state = this._addCommandToHistory(state, str);\n                                state = this._updateStateByExecution(state, str, errorStr);\n                            }\n                            var _iterator2 = _createForOfIteratorHelper(executionListeners), _step2;\n                            try {\n                                for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                                    var _executionListener = _step2.value;\n                                    _executionListener.onExecuteCompleted(state);\n                                }\n                            } catch (err) {\n                                _iterator2.e(err);\n                            } finally{\n                                _iterator2.f();\n                            }\n                            return state;\n                        }\n                    },\n                    {\n                        key: \"_updateStateByExecution\",\n                        value: function _updateStateByExecution(state, commandStrToExecute, errorStr) {\n                            var _iterator3 = _createForOfIteratorHelper((0, _commandParser[\"default\"])(commandStrToExecute)), _step3;\n                            try {\n                                for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){\n                                    var _step3$value = _step3.value, commandName = _step3$value.commandName, commandOptions = _step3$value.commandOptions;\n                                    var commandMapping = state.getCommandMapping();\n                                    var commandArgs = [\n                                        state,\n                                        commandOptions\n                                    ];\n                                    var _CommandRunner$run = CommandRunner.run(commandMapping, commandName, commandArgs, errorStr), nextState = _CommandRunner$run.state, output = _CommandRunner$run.output, outputs = _CommandRunner$run.outputs;\n                                    if (nextState) {\n                                        state = nextState;\n                                    }\n                                    if (output) {\n                                        state = this._addCommandOutputs(state, [\n                                            output\n                                        ]);\n                                    } else if (outputs) {\n                                        state = this._addCommandOutputs(state, outputs);\n                                    }\n                                }\n                            } catch (err) {\n                                _iterator3.e(err);\n                            } finally{\n                                _iterator3.f();\n                            }\n                            return state;\n                        }\n                    },\n                    {\n                        key: \"_addCommandToHistory\",\n                        value: function _addCommandToHistory(state, command) {\n                            var history = state.getHistory();\n                            return state.setHistory((0, _history.recordCommand)(history, command));\n                        }\n                    },\n                    {\n                        key: \"_addHeaderOutput\",\n                        value: function _addHeaderOutput(state, commandStr) {\n                            var envVariables = state.getEnvVariables();\n                            var cwd = (0, _environmentVariables.getEnvironmentVariable)(envVariables, \"cwd\");\n                            return this._addCommandOutputs(state, [\n                                (0, _outputFactory.makeHeaderOutput)(cwd, commandStr)\n                            ]);\n                        }\n                    },\n                    {\n                        key: \"_addCommandOutputs\",\n                        value: function _addCommandOutputs(state, outputs) {\n                            var _iterator4 = _createForOfIteratorHelper(outputs), _step4;\n                            try {\n                                for(_iterator4.s(); !(_step4 = _iterator4.n()).done;){\n                                    var output = _step4.value;\n                                    var _outputs = state.getOutputs();\n                                    state = state.setOutputs(_outputs.push(output));\n                                }\n                            } catch (err) {\n                                _iterator4.e(err);\n                            } finally{\n                                _iterator4.f();\n                            }\n                            return state;\n                        }\n                    }\n                ]);\n                return Emulator;\n            }();\n            exports1[\"default\"] = Emulator;\n            module1.exports = exports1.default;\n        /***/ },\n        /***/ \"./src/emulator/plugins/BoundedHistoryIterator.js\": /*!********************************************************!*\\\n  !*** ./src/emulator/plugins/BoundedHistoryIterator.js ***!\n  \\********************************************************/ /*! no static exports found */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = void 0;\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _defineProperties(target, props) {\n                for(var i = 0; i < props.length; i++){\n                    var descriptor = props[i];\n                    descriptor.enumerable = descriptor.enumerable || false;\n                    descriptor.configurable = true;\n                    if (\"value\" in descriptor) descriptor.writable = true;\n                    Object.defineProperty(target, descriptor.key, descriptor);\n                }\n            }\n            function _createClass(Constructor, protoProps, staticProps) {\n                if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) _defineProperties(Constructor, staticProps);\n                return Constructor;\n            }\n            /**\n * Makes a stack iterator for a point in history.\n *\n * Can go backwards and forwards through the history and is bounded by\n * the size of the stack.\n */ var BoundedHistoryIterator = /*#__PURE__*/ function() {\n                function BoundedHistoryIterator(historyStack) {\n                    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                    _classCallCheck(this, BoundedHistoryIterator);\n                    this.historyStack = historyStack.push(\"\");\n                    this.index = index;\n                }\n                _createClass(BoundedHistoryIterator, [\n                    {\n                        key: \"hasUp\",\n                        value: function hasUp() {\n                            return this.index + 1 < this.historyStack.size;\n                        }\n                    },\n                    {\n                        key: \"up\",\n                        value: function up() {\n                            if (this.hasUp()) {\n                                this.index++;\n                            }\n                            return this.historyStack.get(this.index);\n                        }\n                    },\n                    {\n                        key: \"hasDown\",\n                        value: function hasDown() {\n                            return this.index - 1 >= 0;\n                        }\n                    },\n                    {\n                        key: \"down\",\n                        value: function down() {\n                            if (this.hasDown()) {\n                                this.index--;\n                            }\n                            return this.historyStack.get(this.index);\n                        }\n                    }\n                ]);\n                return BoundedHistoryIterator;\n            }();\n            exports1[\"default\"] = BoundedHistoryIterator;\n            ;\n            module1.exports = exports1.default;\n        /***/ },\n        /***/ \"./src/emulator/plugins/HistoryKeyboardPlugin.js\": /*!*******************************************************!*\\\n  !*** ./src/emulator/plugins/HistoryKeyboardPlugin.js ***!\n  \\*******************************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_501514__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = void 0;\n            var _BoundedHistoryIterator = _interopRequireDefault(__nested_webpack_require_501514__(/*! emulator/plugins/BoundedHistoryIterator */ \"./src/emulator/plugins/BoundedHistoryIterator.js\"));\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n            function _defineProperties(target, props) {\n                for(var i = 0; i < props.length; i++){\n                    var descriptor = props[i];\n                    descriptor.enumerable = descriptor.enumerable || false;\n                    descriptor.configurable = true;\n                    if (\"value\" in descriptor) descriptor.writable = true;\n                    Object.defineProperty(target, descriptor.key, descriptor);\n                }\n            }\n            function _createClass(Constructor, protoProps, staticProps) {\n                if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) _defineProperties(Constructor, staticProps);\n                return Constructor;\n            }\n            var HistoryKeyboardPlugin = /*#__PURE__*/ function() {\n                function HistoryKeyboardPlugin(state) {\n                    _classCallCheck(this, HistoryKeyboardPlugin);\n                    this._nullableHistoryIterator = null;\n                    this.historyStack = state.getHistory();\n                } // Plugin contract\n                _createClass(HistoryKeyboardPlugin, [\n                    {\n                        key: \"onExecuteStarted\",\n                        value: function onExecuteStarted(state, str) {} // no-op\n                    },\n                    {\n                        key: \"onExecuteCompleted\",\n                        value: function onExecuteCompleted(state) {\n                            this._nullableHistoryIterator = null;\n                            this.historyStack = state.getHistory();\n                        } // Plugin API\n                    },\n                    {\n                        key: \"completeUp\",\n                        value: function completeUp() {\n                            this.createHistoryIteratorIfNull();\n                            return this._nullableHistoryIterator.up();\n                        }\n                    },\n                    {\n                        key: \"completeDown\",\n                        value: function completeDown() {\n                            this.createHistoryIteratorIfNull();\n                            return this._nullableHistoryIterator.down();\n                        } // Private methods\n                    },\n                    {\n                        key: \"createHistoryIteratorIfNull\",\n                        value: function createHistoryIteratorIfNull() {\n                            if (!this._nullableHistoryIterator) {\n                                this._nullableHistoryIterator = new _BoundedHistoryIterator[\"default\"](this.historyStack);\n                            }\n                        }\n                    }\n                ]);\n                return HistoryKeyboardPlugin;\n            }();\n            exports1[\"default\"] = HistoryKeyboardPlugin;\n            module1.exports = exports1.default;\n        /***/ },\n        /***/ \"./src/fs/fs-error.js\": /*!****************************!*\\\n  !*** ./src/fs/fs-error.js ***!\n  \\****************************/ /*! no static exports found */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.makeError = exports1.fsErrorType = void 0;\n            /**\n * File system error types\n * @type {Object}\n */ var fsErrorType = {\n                FILE_EXISTS: \"File exists\",\n                DIRECTORY_EXISTS: \"Directory exists\",\n                DIRECTORY_NOT_EMPTY: \"Directory not empty\",\n                NO_SUCH_FILE_OR_DIRECTORY: \"No such file or directory\",\n                NO_SUCH_FILE: \"No such file\",\n                NO_SUCH_DIRECTORY: \"No such directory\",\n                FILE_OR_DIRECTORY_EXISTS: \"File or directory exists\",\n                IS_A_DIRECTORY: \"Is a directory\",\n                NOT_A_DIRECTORY: \"Not a directory\",\n                PERMISSION_DENIED: \"Permission denied\",\n                OTHER: \"Other\"\n            };\n            /**\n * Create a non-fatal file system error object\n *\n * For fatal errors do not use this. Throw an error instead.\n * @param  {string} fsErrorType  file system error type\n * @param  {string} [message=''] optional metadata for developers about the error\n * @return {object}              internal error object\n */ exports1.fsErrorType = fsErrorType;\n            var makeError = function makeError(fsErrorType) {\n                var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n                return {\n                    source: \"fs\",\n                    type: fsErrorType,\n                    message: message\n                };\n            };\n            exports1.makeError = makeError;\n        /***/ },\n        /***/ \"./src/fs/index.js\": /*!*************************!*\\\n  !*** ./src/fs/index.js ***!\n  \\*************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_507287__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = void 0;\n            var DirOp = _interopRequireWildcard(__nested_webpack_require_507287__(/*! ./operations-with-permissions/directory-operations */ \"./src/fs/operations-with-permissions/directory-operations.js\"));\n            var FileOp = _interopRequireWildcard(__nested_webpack_require_507287__(/*! ./operations-with-permissions/file-operations */ \"./src/fs/operations-with-permissions/file-operations.js\"));\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            var _default = {\n                DirOp: DirOp,\n                FileOp: FileOp\n            };\n            exports1[\"default\"] = _default;\n            module1.exports = exports1.default;\n        /***/ },\n        /***/ \"./src/fs/operations-with-permissions/directory-operations.js\": /*!********************************************************************!*\\\n  !*** ./src/fs/operations-with-permissions/directory-operations.js ***!\n  \\********************************************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_510710__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.renameDirectory = exports1.deleteDirectory = exports1.copyDirectory = exports1.addDirectory = exports1.listDirectoryFolders = exports1.listDirectoryFiles = exports1.listDirectory = exports1.hasDirectory = void 0;\n            var DirectoryOperations = _interopRequireWildcard(__nested_webpack_require_510710__(/*! fs/operations/directory-operations */ \"./src/fs/operations/directory-operations.js\"));\n            var PermissionUtil = _interopRequireWildcard(__nested_webpack_require_510710__(/*! fs/util/permission-util */ \"./src/fs/util/permission-util.js\"));\n            var _fsError = __nested_webpack_require_510710__(/*! fs/fs-error */ \"./src/fs/fs-error.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            /**\n * Adds modification permissions to directory operations by wrapping\n * directory operations\n */ var makeDirectoryOperationPermissionError = function makeDirectoryOperationPermissionError() {\n                var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Cannot modify directory\";\n                return {\n                    err: (0, _fsError.makeError)(_fsError.fsErrorType.PERMISSION_DENIED, message)\n                };\n            };\n            var hasDirectory = function hasDirectory() {\n                return DirectoryOperations.hasDirectory.apply(DirectoryOperations, arguments);\n            };\n            exports1.hasDirectory = hasDirectory;\n            var listDirectory = function listDirectory() {\n                return DirectoryOperations.listDirectory.apply(DirectoryOperations, arguments);\n            };\n            exports1.listDirectory = listDirectory;\n            var listDirectoryFiles = function listDirectoryFiles() {\n                return DirectoryOperations.listDirectoryFiles.apply(DirectoryOperations, arguments);\n            };\n            exports1.listDirectoryFiles = listDirectoryFiles;\n            var listDirectoryFolders = function listDirectoryFolders() {\n                return DirectoryOperations.listDirectoryFolders.apply(DirectoryOperations, arguments);\n            };\n            exports1.listDirectoryFolders = listDirectoryFolders;\n            var addDirectory = function addDirectory(fs, path) {\n                if (!PermissionUtil.canModifyPath(fs, path)) {\n                    return makeDirectoryOperationPermissionError();\n                }\n                for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n                    args[_key - 2] = arguments[_key];\n                }\n                return DirectoryOperations.addDirectory.apply(DirectoryOperations, [\n                    fs,\n                    path\n                ].concat(args));\n            };\n            exports1.addDirectory = addDirectory;\n            var copyDirectory = function copyDirectory(fs, srcPath, destPath) {\n                if (!PermissionUtil.canModifyPath(fs, srcPath)) {\n                    return makeDirectoryOperationPermissionError(\"Cannot modify source directory\");\n                }\n                if (!PermissionUtil.canModifyPath(fs, destPath)) {\n                    return makeDirectoryOperationPermissionError(\"Cannot modify dest directory\");\n                }\n                for(var _len2 = arguments.length, args = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++){\n                    args[_key2 - 3] = arguments[_key2];\n                }\n                return DirectoryOperations.copyDirectory.apply(DirectoryOperations, [\n                    fs,\n                    srcPath,\n                    destPath\n                ].concat(args));\n            };\n            exports1.copyDirectory = copyDirectory;\n            var deleteDirectory = function deleteDirectory(fs, path) {\n                if (!PermissionUtil.canModifyPath(fs, path)) {\n                    return makeDirectoryOperationPermissionError();\n                }\n                for(var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++){\n                    args[_key3 - 2] = arguments[_key3];\n                }\n                return DirectoryOperations.deleteDirectory.apply(DirectoryOperations, [\n                    fs,\n                    path\n                ].concat(args));\n            };\n            exports1.deleteDirectory = deleteDirectory;\n            var renameDirectory = function renameDirectory(fs, currentPath, newPath) {\n                if (!PermissionUtil.canModifyPath(fs, currentPath)) {\n                    return makeDirectoryOperationPermissionError(\"Cannot modify current path\");\n                }\n                if (!PermissionUtil.canModifyPath(fs, newPath)) {\n                    return makeDirectoryOperationPermissionError(\"Cannot modify renamed path\");\n                }\n                return DirectoryOperations.renameDirectory(fs, currentPath, newPath);\n            };\n            exports1.renameDirectory = renameDirectory;\n        /***/ },\n        /***/ \"./src/fs/operations-with-permissions/file-operations.js\": /*!***************************************************************!*\\\n  !*** ./src/fs/operations-with-permissions/file-operations.js ***!\n  \\***************************************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_518412__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.deleteFile = exports1.copyFile = exports1.writeFile = exports1.readFile = exports1.hasFile = void 0;\n            var PermissionUtil = _interopRequireWildcard(__nested_webpack_require_518412__(/*! fs/util/permission-util */ \"./src/fs/util/permission-util.js\"));\n            var FileOperations = _interopRequireWildcard(__nested_webpack_require_518412__(/*! fs/operations/file-operations */ \"./src/fs/operations/file-operations.js\"));\n            var _fsError = __nested_webpack_require_518412__(/*! fs/fs-error */ \"./src/fs/fs-error.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            /**\n * Adds modification permissions to file operations by wrapping\n * file operations\n */ var makeFileOperationPermissionError = function makeFileOperationPermissionError() {\n                var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Cannot modify file\";\n                return {\n                    err: (0, _fsError.makeError)(_fsError.fsErrorType.PERMISSION_DENIED, message)\n                };\n            };\n            var hasFile = function hasFile() {\n                return FileOperations.hasFile.apply(FileOperations, arguments);\n            };\n            exports1.hasFile = hasFile;\n            var readFile = function readFile() {\n                return FileOperations.readFile.apply(FileOperations, arguments);\n            };\n            exports1.readFile = readFile;\n            var writeFile = function writeFile(fs, filePath) {\n                if (!PermissionUtil.canModifyPath(fs, filePath)) {\n                    return makeFileOperationPermissionError();\n                }\n                for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n                    args[_key - 2] = arguments[_key];\n                }\n                return FileOperations.writeFile.apply(FileOperations, [\n                    fs,\n                    filePath\n                ].concat(args));\n            };\n            exports1.writeFile = writeFile;\n            var copyFile = function copyFile(fs, sourcePath, destPath) {\n                if (!PermissionUtil.canModifyPath(fs, sourcePath)) {\n                    return makeFileOperationPermissionError(\"Cannot modify source file\");\n                }\n                if (!PermissionUtil.canModifyPath(fs, destPath)) {\n                    return makeFileOperationPermissionError(\"Cannot modify destination file\");\n                }\n                return FileOperations.copyFile(fs, sourcePath, destPath);\n            };\n            exports1.copyFile = copyFile;\n            var deleteFile = function deleteFile(fs, filePath) {\n                if (!PermissionUtil.canModifyPath(fs, filePath)) {\n                    return makeFileOperationPermissionError();\n                }\n                return FileOperations.deleteFile(fs, filePath);\n            };\n            exports1.deleteFile = deleteFile;\n        /***/ },\n        /***/ \"./src/fs/operations/base-operations.js\": /*!**********************************************!*\\\n  !*** ./src/fs/operations/base-operations.js ***!\n  \\**********************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_524007__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.remove = exports1.add = void 0;\n            var GlobUtil = _interopRequireWildcard(__nested_webpack_require_524007__(/*! fs/util/glob-util */ \"./src/fs/util/glob-util.js\"));\n            var DirOp = _interopRequireWildcard(__nested_webpack_require_524007__(/*! fs/operations/directory-operations */ \"./src/fs/operations/directory-operations.js\"));\n            var FileOp = _interopRequireWildcard(__nested_webpack_require_524007__(/*! fs/operations/file-operations */ \"./src/fs/operations/file-operations.js\"));\n            var PathUtil = _interopRequireWildcard(__nested_webpack_require_524007__(/*! fs/util/path-util */ \"./src/fs/util/path-util.js\"));\n            var _fsError = __nested_webpack_require_524007__(/*! fs/fs-error */ \"./src/fs/fs-error.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _createForOfIteratorHelper(o) {\n                if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n                    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n                        var i = 0;\n                        var F = function F() {};\n                        return {\n                            s: F,\n                            n: function n() {\n                                if (i >= o.length) return {\n                                    done: true\n                                };\n                                return {\n                                    done: false,\n                                    value: o[i++]\n                                };\n                            },\n                            e: function e(_e) {\n                                throw _e;\n                            },\n                            f: F\n                        };\n                    }\n                    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n                }\n                var it, normalCompletion = true, didErr = false, err;\n                return {\n                    s: function s() {\n                        it = o[Symbol.iterator]();\n                    },\n                    n: function n() {\n                        var step = it.next();\n                        normalCompletion = step.done;\n                        return step;\n                    },\n                    e: function e(_e2) {\n                        didErr = true;\n                        err = _e2;\n                    },\n                    f: function f() {\n                        try {\n                            if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n                        } finally{\n                            if (didErr) throw err;\n                        }\n                    }\n                };\n            }\n            function _unsupportedIterableToArray(o, minLen) {\n                if (!o) return;\n                if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n                var n = Object.prototype.toString.call(o).slice(8, -1);\n                if (n === \"Object\" && o.constructor) n = o.constructor.name;\n                if (n === \"Map\" || n === \"Set\") return Array.from(n);\n                if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n            }\n            function _arrayLikeToArray(arr, len) {\n                if (len == null || len > arr.length) len = arr.length;\n                for(var i = 0, arr2 = new Array(len); i < len; i++){\n                    arr2[i] = arr[i];\n                }\n                return arr2;\n            }\n            /**\n * Adds a file or directory to a path\n * @param {Map}     fs                     file system\n * @param {string}  pathToAdd              path to add the file or directory to\n * @param {string}  fsElementToAdd         file or directory map\n * @param {Boolean} [addParentPaths=false] true, if path parent directories should\n *                                         be made (if they don't exist)\n * @return {object}                        file system or error\n */ var add = function add(fs, pathToAdd, fsElementToAdd) {\n                var addParentPaths = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n                if (fs.has(pathToAdd)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.FILE_OR_DIRECTORY_EXISTS)\n                    };\n                }\n                var parentPaths = PathUtil.getPathBreadCrumbs(pathToAdd).slice(0, -1);\n                var _iterator = _createForOfIteratorHelper(parentPaths), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var parentPath = _step.value;\n                        if (FileOp.hasFile(fs, parentPath)) {\n                            return {\n                                err: (0, _fsError.makeError)(_fsError.fsErrorType.NOT_A_DIRECTORY, \"Cannot add path to a file: \".concat(parentPath))\n                            };\n                        }\n                        if (!fs.has(parentPath) && !addParentPaths) {\n                            return {\n                                err: (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_DIRECTORY, \"Parent directory does not exist: \".concat(parentPath))\n                            };\n                        }\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n                var addedDirectoryFs = fs.set(pathToAdd, fsElementToAdd);\n                return {\n                    fs: addParentPaths ? DirOp.fillGaps(addedDirectoryFs) : addedDirectoryFs\n                };\n            };\n            /**\n * Removes a file or directory from a path\n * @param  {Map}     fs                                  file system\n * @param  {string}  pathToRemove                        removes the path\n * @param  {Boolean} [isNonEmptyDirectoryRemovable=true] true if non-empty paths can be removed\n * @return {object}                                      file system or error\n */ exports1.add = add;\n            var remove = function remove(fs, pathToRemove) {\n                var isNonEmptyDirectoryRemovable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n                if (!fs.has(pathToRemove)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_FILE_OR_DIRECTORY)\n                    };\n                }\n                var childPathPattern = pathToRemove === \"/\" ? \"/**\" : \"\".concat(pathToRemove, \"/**\");\n                var childPaths = GlobUtil.globPaths(fs, childPathPattern);\n                if (!isNonEmptyDirectoryRemovable && !childPaths.isEmpty()) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.DIRECTORY_NOT_EMPTY)\n                    };\n                }\n                return {\n                    fs: fs.removeAll(childPaths.concat(pathToRemove))\n                };\n            };\n            exports1.remove = remove;\n        /***/ },\n        /***/ \"./src/fs/operations/directory-operations.js\": /*!***************************************************!*\\\n  !*** ./src/fs/operations/directory-operations.js ***!\n  \\***************************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_533902__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.renameDirectory = exports1.deleteDirectory = exports1.copyDirectory = exports1.addDirectory = exports1.listDirectory = exports1.listDirectoryFolders = exports1.listDirectoryFiles = exports1.hasDirectory = exports1.fillGaps = void 0;\n            var FileUtil = _interopRequireWildcard(__nested_webpack_require_533902__(/*! fs/util/file-util */ \"./src/fs/util/file-util.js\"));\n            var GlobUtil = _interopRequireWildcard(__nested_webpack_require_533902__(/*! fs/util/glob-util */ \"./src/fs/util/glob-util.js\"));\n            var PathUtil = _interopRequireWildcard(__nested_webpack_require_533902__(/*! fs/util/path-util */ \"./src/fs/util/path-util.js\"));\n            var BaseOp = _interopRequireWildcard(__nested_webpack_require_533902__(/*! fs/operations/base-operations */ \"./src/fs/operations/base-operations.js\"));\n            var _fsError = __nested_webpack_require_533902__(/*! fs/fs-error */ \"./src/fs/fs-error.js\");\n            var _fileOperations = __nested_webpack_require_533902__(/*! fs/operations/file-operations */ \"./src/fs/operations/file-operations.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _slicedToArray(arr, i) {\n                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n            }\n            function _nonIterableRest() {\n                throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n            }\n            function _iterableToArrayLimit(arr, i) {\n                if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n                var _arr = [];\n                var _n = true;\n                var _d = false;\n                var _e = undefined;\n                try {\n                    for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                        _arr.push(_s.value);\n                        if (i && _arr.length === i) break;\n                    }\n                } catch (err) {\n                    _d = true;\n                    _e = err;\n                } finally{\n                    try {\n                        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n                    } finally{\n                        if (_d) throw _e;\n                    }\n                }\n                return _arr;\n            }\n            function _arrayWithHoles(arr) {\n                if (Array.isArray(arr)) return arr;\n            }\n            function _createForOfIteratorHelper(o) {\n                if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n                    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n                        var i = 0;\n                        var F = function F() {};\n                        return {\n                            s: F,\n                            n: function n() {\n                                if (i >= o.length) return {\n                                    done: true\n                                };\n                                return {\n                                    done: false,\n                                    value: o[i++]\n                                };\n                            },\n                            e: function e(_e2) {\n                                throw _e2;\n                            },\n                            f: F\n                        };\n                    }\n                    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n                }\n                var it, normalCompletion = true, didErr = false, err;\n                return {\n                    s: function s() {\n                        it = o[Symbol.iterator]();\n                    },\n                    n: function n() {\n                        var step = it.next();\n                        normalCompletion = step.done;\n                        return step;\n                    },\n                    e: function e(_e3) {\n                        didErr = true;\n                        err = _e3;\n                    },\n                    f: function f() {\n                        try {\n                            if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n                        } finally{\n                            if (didErr) throw err;\n                        }\n                    }\n                };\n            }\n            function _unsupportedIterableToArray(o, minLen) {\n                if (!o) return;\n                if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n                var n = Object.prototype.toString.call(o).slice(8, -1);\n                if (n === \"Object\" && o.constructor) n = o.constructor.name;\n                if (n === \"Map\" || n === \"Set\") return Array.from(n);\n                if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n            }\n            function _arrayLikeToArray(arr, len) {\n                if (len == null || len > arr.length) len = arr.length;\n                for(var i = 0, arr2 = new Array(len); i < len; i++){\n                    arr2[i] = arr[i];\n                }\n                return arr2;\n            }\n            var onlyFilesFilter = function onlyFilesFilter(fs) {\n                return function(path) {\n                    return FileUtil.isFile(fs.get(path));\n                };\n            };\n            var onlyDirectoriesFilter = function onlyDirectoriesFilter(fs) {\n                return function(path) {\n                    return FileUtil.isDirectory(fs.get(path));\n                };\n            };\n            /**\n * Fill file system gaps with empty directories.\n *\n * EXPLANATION:\n * A file system can be left in a state where there the directory structure\n * is incomplete and there may be illogical gaps in the structure after\n * manually creating or editing the file system.\n *\n * For example, we might have a file system that looks like this after manually\n * adding a directory of '/a/b/c':\n *\n * {\n *  '/': {..}\n *  '/a/b/c': {..}\n * }\n *\n * As a result of the operation, we're missing directories of '/a' and '/a/b'.\n * We can fill these missing directory gaps to get a properly formed directory\n * structure:\n *\n * {\n *  '/': {..}\n *  '/a': {..}\n *  '/a/b': {..}\n *  '/a/b/c': {..}\n * }\n * @param  {Map}    fs   file system with gaps in directory structure\n * @return {Map}         file system without directory gaps\n */ var fillGaps = function fillGaps(fs) {\n                var emptyDirectory = FileUtil.makeDirectory();\n                var directoryGapPaths = fs.keySeq() // sequence of paths\n                .flatMap(function(path) {\n                    return PathUtil.getPathBreadCrumbs(path);\n                }).filter(function(path) {\n                    return !fs.has(path);\n                });\n                return fs.withMutations(function(fs) {\n                    var _iterator = _createForOfIteratorHelper(directoryGapPaths), _step;\n                    try {\n                        for(_iterator.s(); !(_step = _iterator.n()).done;){\n                            var directoryGapPath = _step.value;\n                            fs.set(directoryGapPath, emptyDirectory);\n                        }\n                    } catch (err) {\n                        _iterator.e(err);\n                    } finally{\n                        _iterator.f();\n                    }\n                });\n            };\n            /**\n * Check if a directory exists in the file system\n * @param  {Map}     fs   file system\n * @param  {string}  path path to check if is a directory\n * @return {boolean}      true, if the directory exists\n */ exports1.fillGaps = fillGaps;\n            var hasDirectory = function hasDirectory(fs, path) {\n                return fs.has(path) && FileUtil.isDirectory(fs.get(path));\n            };\n            /**\n * Creates a list of file names\n * @param  {Map}    fs   file system\n * @param  {string} path directory path to list files in\n * @return {object}      list of file names or an error\n */ exports1.hasDirectory = hasDirectory;\n            var listDirectoryFiles = function listDirectoryFiles(fs, path) {\n                if ((0, _fileOperations.hasFile)(fs, path)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.FILE_EXISTS, \"File exists at path\")\n                    };\n                }\n                if (!hasDirectory(fs, path)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_DIRECTORY, \"Cannot list files in non-existent directory\")\n                    };\n                }\n                ;\n                var filesPattern = path === \"/\" ? \"/*\" : \"\".concat(path, \"/*\");\n                return {\n                    list: GlobUtil.captureGlobPaths(fs, filesPattern, onlyFilesFilter(fs))\n                };\n            };\n            /**\n * Creates a list of folder names inside the current directory.\n * @param  {Map}    fs   file system\n * @param  {string} path path to list directories in\n * @return {object}      list of directories or an error\n */ exports1.listDirectoryFiles = listDirectoryFiles;\n            var listDirectoryFolders = function listDirectoryFolders(fs, path) {\n                var isTrailingSlashAppended = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n                if ((0, _fileOperations.hasFile)(fs, path)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.FILE_EXISTS, \"File exists at path\")\n                    };\n                }\n                if (!hasDirectory(fs, path)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_DIRECTORY, \"Cannot list folders in non-existent directory\")\n                    };\n                }\n                ;\n                var foldersPattern = path === \"/\" ? \"/*\" : \"\".concat(path, \"/*\");\n                var folderNames = GlobUtil.captureGlobPaths(fs, foldersPattern, onlyDirectoriesFilter(fs));\n                if (isTrailingSlashAppended) {\n                    return {\n                        list: folderNames.map(function(folderName) {\n                            return \"\".concat(folderName, \"/\");\n                        })\n                    };\n                }\n                return {\n                    list: folderNames\n                };\n            };\n            /**\n * Lists files and folders in a directory\n * @param  {Map}     fs                                      file system\n * @param  {string}  path                                    directory path to list files and folders in\n * @param  {boolean} [addTrailingSlash=true]                 add a / to the end of folder names\n * @return {object}                                          file system or an error\n */ exports1.listDirectoryFolders = listDirectoryFolders;\n            var listDirectory = function listDirectory(fs, path) {\n                var addTrailingSlash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n                var _listDirectoryFiles = listDirectoryFiles(fs, path), listFileErr = _listDirectoryFiles.err, fileList = _listDirectoryFiles.list;\n                var _listDirectoryFolders = listDirectoryFolders(fs, path, addTrailingSlash), listFolderErr = _listDirectoryFolders.err, folderList = _listDirectoryFolders.list;\n                if (listFileErr || listFolderErr) {\n                    return {\n                        err: listFileErr ? listFileErr : listFolderErr\n                    };\n                }\n                ;\n                return {\n                    list: fileList.concat(folderList)\n                };\n            };\n            /**\n * Adds a directory to the file system\n * @param {Map}     fs                           file system\n * @param {string}  path                         path to add a directory to\n * @param {Map}     dir                          directory\n * @param {boolean} [isReplaceExistingDir=false] whether a directory can be overwritten if it already exists\n * @return {object}                              file system or an error\n */ exports1.listDirectory = listDirectory;\n            var addDirectory = function addDirectory(fs, path, dir) {\n                var addParentPaths = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n                if ((0, _fileOperations.hasFile)(fs, PathUtil.getPathParent(path))) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.FILE_EXISTS, \"File exists at path\")\n                    };\n                }\n                return BaseOp.add(fs, path, dir, addParentPaths);\n            };\n            /**\n * Private helper function implementing rules for replacing a source path (the path\n * we're copying from) with a destination path (the path we're copying to). Note\n * that in our file system:\n * - A file cannot overwrite a directory,\n * - a directory cannot overwrite a file, and\n * - a file/directory can overwrite a file/directory.\n * @param  {Map}       fs      file system\n * @param  {Sequence}  pathSeq sequence of source and destination paths\n * @return {Boolean}           true, if a source path can replace a destination path\n */ exports1.addDirectory = addDirectory;\n            var isPathTypeMatching = function isPathTypeMatching(fs, pathSeq) {\n                var _iterator2 = _createForOfIteratorHelper(pathSeq), _step2;\n                try {\n                    for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){\n                        var _step2$value = _slicedToArray(_step2.value, 2), srcPath = _step2$value[0], destPath = _step2$value[1];\n                        if (fs.has(destPath)) {\n                            if ((0, _fileOperations.hasFile)(fs, srcPath) && hasDirectory(fs, destPath)) {\n                                // Cannot overwrite a file with a directory\n                                return false;\n                            } else if (hasDirectory(fs, srcPath) && (0, _fileOperations.hasFile)(fs, destPath)) {\n                                // Cannot overwrite a directory with a file\n                                return false;\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _iterator2.e(err);\n                } finally{\n                    _iterator2.f();\n                }\n                return true;\n            };\n            /**\n * Copies a directory (and all directories included inside that directory)\n * from a source directory to a destination directory\n *\n * If the destination doesn't exist, it can be created.\n *\n * The source and destination must be a directory and not a file.\n * @param  {Map}     fs                             file system\n * @param  {string}  srcPath                        directory path to copy from\n * @param  {string}  destPath                       directory path to copy to\n * @return {object}                                 file system or an error\n */ var copyDirectory = function copyDirectory(fs, srcPath, destPath) {\n                var overwrite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n                if (!hasDirectory(fs, srcPath)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_DIRECTORY, \"Source directory does not exist\")\n                    };\n                }\n                ;\n                if (!hasDirectory(fs, destPath)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_DIRECTORY, \"Destination directory does not exist\")\n                    };\n                }\n                ;\n                var srcChildPattern = srcPath === \"/\" ? \"/**\" : \"\".concat(srcPath, \"/**\");\n                var srcPaths = GlobUtil.globPaths(fs, srcChildPattern);\n                var srcSubPaths = GlobUtil.captureGlobPaths(fs, srcChildPattern);\n                var destPaths = srcSubPaths.map(function(path) {\n                    return path === \"/\" ? destPath : \"\".concat(destPath, \"/\").concat(path);\n                });\n                if (!isPathTypeMatching(fs, srcPaths.zip(destPaths))) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.OTHER, \"Cannot overwrite a directory with file OR a file with directory\")\n                    };\n                }\n                return {\n                    fs: fs.withMutations(function(newFs) {\n                        var _iterator3 = _createForOfIteratorHelper(srcPaths.zip(destPaths)), _step3;\n                        try {\n                            for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){\n                                var _step3$value = _slicedToArray(_step3.value, 2), _srcPath = _step3$value[0], _destPath = _step3$value[1];\n                                if (!fs.has(_destPath) || overwrite) {\n                                    newFs.set(_destPath, fs.get(_srcPath));\n                                }\n                            }\n                        } catch (err) {\n                            _iterator3.e(err);\n                        } finally{\n                            _iterator3.f();\n                        }\n                    })\n                };\n            };\n            /**\n * Remove a directory from a file system\n * @param  {Map}     fs                                   file system\n * @param  {string}  pathToDelete                         directory path to delete\n * @param  {Boolean} [isNonEmptyDirectoryRemovable=false] whether directories with files in them can be removed\n * @return {object}                                       file system or an error\n */ exports1.copyDirectory = copyDirectory;\n            var deleteDirectory = function deleteDirectory(fs, pathToDelete) {\n                var isNonEmptyDirectoryRemovable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                if ((0, _fileOperations.hasFile)(fs, pathToDelete)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.FILE_EXISTS, \"File exists at path\")\n                    };\n                }\n                if (!hasDirectory(fs, pathToDelete)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_DIRECTORY, \"No such directory: \".concat(pathToDelete))\n                    };\n                }\n                ;\n                return BaseOp.remove(fs, pathToDelete, isNonEmptyDirectoryRemovable);\n            };\n            /**\n * Rename a directory\n * @param  {Map}    fs          file system\n * @param  {string} currentPath directory path to rename (and hence remove)\n * @param  {string} newPath     path to place the renamed directory\n * @return {object}             file system or an error\n */ exports1.deleteDirectory = deleteDirectory;\n            var renameDirectory = function renameDirectory(fs, currentPath, newPath) {\n                var _copyDirectory = copyDirectory(fs, currentPath, newPath, true), err = _copyDirectory.err, copiedFS = _copyDirectory.fs;\n                if (err) {\n                    return {\n                        err: err\n                    };\n                }\n                return deleteDirectory(copiedFS, currentPath, true);\n            };\n            exports1.renameDirectory = renameDirectory;\n        /***/ },\n        /***/ \"./src/fs/operations/file-operations.js\": /*!**********************************************!*\\\n  !*** ./src/fs/operations/file-operations.js ***!\n  \\**********************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_556307__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.deleteFile = exports1.copyFile = exports1.writeFile = exports1.readFile = exports1.hasFile = void 0;\n            var PathUtil = _interopRequireWildcard(__nested_webpack_require_556307__(/*! fs/util/path-util */ \"./src/fs/util/path-util.js\"));\n            var BaseOp = _interopRequireWildcard(__nested_webpack_require_556307__(/*! fs/operations/base-operations */ \"./src/fs/operations/base-operations.js\"));\n            var _fileUtil = __nested_webpack_require_556307__(/*! fs/util/file-util */ \"./src/fs/util/file-util.js\");\n            var _directoryOperations = __nested_webpack_require_556307__(/*! fs/operations/directory-operations */ \"./src/fs/operations/directory-operations.js\");\n            var _fsError = __nested_webpack_require_556307__(/*! fs/fs-error */ \"./src/fs/fs-error.js\");\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            /**\n * Checks whether a file exists\n * @param  {Map}     fs       file system\n * @param  {string}  dirPath  directory of the file to check for existence\n * @param  {string}  fileName file name to check for existence\n * @return {Boolean}          true, if the file exists\n */ var hasFile = function hasFile(fs, filePath) {\n                if (fs.has(filePath)) {\n                    var possibleFile = fs.get(filePath);\n                    return (0, _fileUtil.isFile)(possibleFile);\n                }\n                return false;\n            };\n            /**\n * Get a file from the file system\n * @param  {Map}    fs       file system\n * @param  {string} filePath path to file to read\n * @return {object}          file system or an error\n */ exports1.hasFile = hasFile;\n            var readFile = function readFile(fs, filePath) {\n                if ((0, _directoryOperations.hasDirectory)(fs, filePath)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.IS_A_DIRECTORY)\n                    };\n                }\n                if (!hasFile(fs, filePath)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_FILE)\n                    };\n                }\n                return {\n                    file: fs.get(filePath)\n                };\n            };\n            /**\n * Write a new file to the file system\n * @param  {Map}     fs                            file system\n * @param  {string}  filePath                      path to new file\n * @param  {Map}     file                          the new file\n * @return {object}                                file system or an error\n */ exports1.readFile = readFile;\n            var writeFile = function writeFile(fs, filePath, file) {\n                return BaseOp.add(fs, filePath, file);\n            };\n            /**\n * Copies a file from a source directory to a destination directory\n * @param  {Map}    fs           file system\n * @param  {string} sourcePath   path to source file (to copy from)\n * @param  {string} destPath     path to destination file (to copy to)\n * @return {object}              file system or an error\n */ exports1.writeFile = writeFile;\n            var copyFile = function copyFile(fs, sourcePath, destPath) {\n                if (!hasFile(fs, sourcePath)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_FILE, \"Source file does not exist\")\n                    };\n                }\n                var pathParent = PathUtil.getPathParent(destPath);\n                if (!(0, _directoryOperations.hasDirectory)(fs, pathParent)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_DIRECTORY, \"Destination directory does not exist\")\n                    };\n                }\n                if ((0, _directoryOperations.hasDirectory)(fs, destPath)) {\n                    // Copying file to directory without specifying the filename explicitly\n                    var sourceFileName = PathUtil.getLastPathPart(sourcePath);\n                    destPath = destPath === \"/\" ? \"/\".concat(sourceFileName) : \"\".concat(destPath, \"/\").concat(sourceFileName);\n                }\n                return {\n                    fs: fs.set(destPath, fs.get(sourcePath))\n                };\n            };\n            /**\n * Removes a file from the file system\n * @param  {Map}    fs       file system\n * @param  {string} filePath path to the file to delete\n * @return {object}          file system or an error\n */ exports1.copyFile = copyFile;\n            var deleteFile = function deleteFile(fs, filePath) {\n                if ((0, _directoryOperations.hasDirectory)(fs, filePath)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.IS_A_DIRECTORY)\n                    };\n                }\n                if (!hasFile(fs, filePath)) {\n                    return {\n                        err: (0, _fsError.makeError)(_fsError.fsErrorType.NO_SUCH_FILE)\n                    };\n                }\n                return BaseOp.remove(fs, filePath);\n            };\n            exports1.deleteFile = deleteFile;\n        /***/ },\n        /***/ \"./src/fs/util/file-util.js\": /*!**********************************!*\\\n  !*** ./src/fs/util/file-util.js ***!\n  \\**********************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_563999__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.makeDirectory = exports1.makeFile = exports1.isDirectory = exports1.isFile = void 0;\n            var _immutable = __nested_webpack_require_563999__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\n            function ownKeys(object, enumerableOnly) {\n                var keys = Object.keys(object);\n                if (Object.getOwnPropertySymbols) {\n                    var symbols = Object.getOwnPropertySymbols(object);\n                    if (enumerableOnly) symbols = symbols.filter(function(sym) {\n                        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n                    });\n                    keys.push.apply(keys, symbols);\n                }\n                return keys;\n            }\n            function _objectSpread(target) {\n                for(var i = 1; i < arguments.length; i++){\n                    var source = arguments[i] != null ? arguments[i] : {};\n                    if (i % 2) {\n                        ownKeys(Object(source), true).forEach(function(key) {\n                            _defineProperty(target, key, source[key]);\n                        });\n                    } else if (Object.getOwnPropertyDescriptors) {\n                        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n                    } else {\n                        ownKeys(Object(source)).forEach(function(key) {\n                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n                        });\n                    }\n                }\n                return target;\n            }\n            function _defineProperty(obj, key, value) {\n                if (key in obj) {\n                    Object.defineProperty(obj, key, {\n                        value: value,\n                        enumerable: true,\n                        configurable: true,\n                        writable: true\n                    });\n                } else {\n                    obj[key] = value;\n                }\n                return obj;\n            }\n            /**\n * Checks if a JavaScript object is a file object\n * @param  {object}  json potential file\n * @return {boolean}      whether the object conforms to the file schema\n */ var isFile = function isFile(map) {\n                return map.has(\"content\");\n            };\n            /**\n * Checks if a JavaScript object is a directory object\n * @param  {object}  json potential directory\n * @return {boolean}      whether the object conforms to the directory schema\n */ exports1.isFile = isFile;\n            var isDirectory = function isDirectory(map) {\n                return !map.has(\"content\");\n            };\n            /**\n * Makes an file conforming to the file schema\n * @param  {object} content  content of the file\n * @return {object}          new file\n */ exports1.isDirectory = isDirectory;\n            var makeFile = function makeFile() {\n                var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n                var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                return (0, _immutable.fromJS)(_objectSpread({\n                    content: content\n                }, metadata));\n            };\n            /**\n * Makes an directory conforming to the directory schema\n * @param  {object} children child directories or files\n * @return {object}          new directory\n */ exports1.makeFile = makeFile;\n            var makeDirectory = function makeDirectory() {\n                var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                return (0, _immutable.fromJS)(_objectSpread({}, metadata));\n            };\n            exports1.makeDirectory = makeDirectory;\n        /***/ },\n        /***/ \"./src/fs/util/glob-util.js\": /*!**********************************!*\\\n  !*** ./src/fs/util/glob-util.js ***!\n  \\**********************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_568205__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.captureGlobPaths = exports1.globPaths = exports1.globSeq = exports1.glob = void 0;\n            var _minimatch = _interopRequireDefault(__nested_webpack_require_568205__(/*! minimatch */ \"./node_modules/minimatch/minimatch.js\"));\n            var _minimatchCapture = _interopRequireDefault(__nested_webpack_require_568205__(/*! minimatch-capture */ \"./node_modules/minimatch-capture/index.js\"));\n            var _immutable = __nested_webpack_require_568205__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            var GLOB_OPTIONS = {\n                dot: true\n            };\n            var glob = function glob(str, globPattern) {\n                return (0, _minimatch[\"default\"])(str, globPattern, GLOB_OPTIONS);\n            };\n            exports1.glob = glob;\n            var globSeq = function globSeq(seq, globPattern) {\n                return seq.filter(function(path) {\n                    return (0, _minimatch[\"default\"])(path, globPattern, GLOB_OPTIONS);\n                });\n            };\n            exports1.globSeq = globSeq;\n            var globPaths = function globPaths(fs, globPattern) {\n                return globSeq(fs.keySeq(), globPattern);\n            };\n            exports1.globPaths = globPaths;\n            var captureGlobPaths = function captureGlobPaths(fs, globPattern) {\n                var filterCondition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function(path) {\n                    return true;\n                };\n                return fs.keySeq().reduce(function(captures, path) {\n                    if (filterCondition(path)) {\n                        var pathCaptures = (0, _minimatchCapture[\"default\"])(path, globPattern, GLOB_OPTIONS);\n                        if (pathCaptures) {\n                            return captures.concat(pathCaptures);\n                        }\n                    }\n                    return captures;\n                }, (0, _immutable.List)());\n            };\n            exports1.captureGlobPaths = captureGlobPaths;\n        /***/ },\n        /***/ \"./src/fs/util/path-util.js\": /*!**********************************!*\\\n  !*** ./src/fs/util/path-util.js ***!\n  \\**********************************/ /*! no static exports found */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.toAbsolutePath = exports1.splitFilePath = exports1.getLastPathPart = exports1.getPathParent = exports1.getPathBreadCrumbs = exports1.toPath = exports1.toPathParts = exports1.isAbsPath = exports1.removeTrailingSeparator = exports1.isTrailingPath = void 0;\n            function _createForOfIteratorHelper(o) {\n                if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n                    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n                        var i = 0;\n                        var F = function F() {};\n                        return {\n                            s: F,\n                            n: function n() {\n                                if (i >= o.length) return {\n                                    done: true\n                                };\n                                return {\n                                    done: false,\n                                    value: o[i++]\n                                };\n                            },\n                            e: function e(_e) {\n                                throw _e;\n                            },\n                            f: F\n                        };\n                    }\n                    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n                }\n                var it, normalCompletion = true, didErr = false, err;\n                return {\n                    s: function s() {\n                        it = o[Symbol.iterator]();\n                    },\n                    n: function n() {\n                        var step = it.next();\n                        normalCompletion = step.done;\n                        return step;\n                    },\n                    e: function e(_e2) {\n                        didErr = true;\n                        err = _e2;\n                    },\n                    f: function f() {\n                        try {\n                            if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n                        } finally{\n                            if (didErr) throw err;\n                        }\n                    }\n                };\n            }\n            function _toConsumableArray(arr) {\n                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n            }\n            function _nonIterableSpread() {\n                throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n            }\n            function _arrayWithoutHoles(arr) {\n                if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n            }\n            function _toArray(arr) {\n                return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();\n            }\n            function _nonIterableRest() {\n                throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n            }\n            function _unsupportedIterableToArray(o, minLen) {\n                if (!o) return;\n                if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n                var n = Object.prototype.toString.call(o).slice(8, -1);\n                if (n === \"Object\" && o.constructor) n = o.constructor.name;\n                if (n === \"Map\" || n === \"Set\") return Array.from(n);\n                if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n            }\n            function _arrayLikeToArray(arr, len) {\n                if (len == null || len > arr.length) len = arr.length;\n                for(var i = 0, arr2 = new Array(len); i < len; i++){\n                    arr2[i] = arr[i];\n                }\n                return arr2;\n            }\n            function _iterableToArray(iter) {\n                if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n            }\n            function _arrayWithHoles(arr) {\n                if (Array.isArray(arr)) return arr;\n            }\n            /**\n * Tests if a path is a trailing path.\n *\n * A trailing path ends with a trailing slash (/) and excludes the root\n * directory (/).\n * @param  {string}  path path with or without a trailing slash\n * @return {Boolean}      true, if the path is a trailing path\n */ var isTrailingPath = function isTrailingPath(path) {\n                return path.endsWith(\"/\") && path !== \"/\";\n            };\n            /**\n * Removes a trailing slash (/) from a path\n * @param  {string} path path with or without a trailing /\n * @return {string}      path without trailing /\n */ exports1.isTrailingPath = isTrailingPath;\n            var removeTrailingSeparator = function removeTrailingSeparator(path) {\n                if (path.endsWith(\"/\") && path !== \"/\") {\n                    return path.slice(0, -1);\n                }\n                return path;\n            };\n            /**\n * Tests if a path is absolute\n * @param  {string}  path\n * @return {boolean}\n */ exports1.removeTrailingSeparator = removeTrailingSeparator;\n            var isAbsPath = function isAbsPath(path) {\n                return path.startsWith(\"/\");\n            };\n            /**\n * Converts a path to an ordered array of folders and files.\n *\n * Example: Parts of '/a/b/c/e.txt' has parts of ['/', 'a', 'b', 'c', 'e.txt']\n *\n * A relative path splits parts at /. An absolute path splits at / and also\n * considers the root directory (/) as a part of the path.\n * @param  {string} path [description]\n * @return {array}       list of path parts\n */ exports1.isAbsPath = isAbsPath;\n            var toPathParts = function toPathParts(path) {\n                if (path === \"/\") {\n                    return [\n                        \"/\"\n                    ];\n                }\n                ;\n                path = removeTrailingSeparator(path);\n                var pathParts = path.split(\"/\");\n                if (isAbsPath(path)) {\n                    var _pathParts = _toArray(pathParts), nonRootPathParts = _pathParts.slice(1);\n                    return [\n                        \"/\"\n                    ].concat(_toConsumableArray(nonRootPathParts));\n                }\n                return pathParts;\n            };\n            /**\n * Converts path parts back to a path\n * @param  {array} pathParts path parts\n * @return {string}          path\n */ exports1.toPathParts = toPathParts;\n            var toPath = function toPath(pathParts) {\n                if (pathParts[0] === \"/\") {\n                    // absolute path\n                    var _pathParts2 = _toArray(pathParts), nonRootPathParts = _pathParts2.slice(1);\n                    return \"/\".concat(nonRootPathParts.join(\"/\"));\n                }\n                return pathParts.join(\"/\");\n            };\n            /**\n * Find breadcrumb paths, i.e. all paths that need to be walked to get to\n * the specified path\n * Example: /a/b/c will have breadcrumb paths of '/', '/a', '/a/b', '/a/b/c'\n * @param  {string} path path to a directory\n * @return {array}       list of paths that lead up to a path\n */ exports1.toPath = toPath;\n            var getPathBreadCrumbs = function getPathBreadCrumbs(path) {\n                var pathParts = toPathParts(path);\n                if (pathParts.length <= 1) {\n                    return [\n                        \"/\"\n                    ];\n                }\n                var _pathParts3 = _toArray(pathParts), secondPathPart = _pathParts3[1], pathPartsWithoutRoot = _pathParts3.slice(2);\n                return pathPartsWithoutRoot.reduce(function(breadCrumbs, pathPart) {\n                    var previousBreadCrumb = breadCrumbs[breadCrumbs.length - 1];\n                    return [].concat(_toConsumableArray(breadCrumbs), [\n                        \"\".concat(previousBreadCrumb, \"/\").concat(pathPart)\n                    ]);\n                }, [\n                    \"/\",\n                    \"/\".concat(secondPathPart)\n                ]);\n            };\n            /**\n * Removes the file name from the end of a file path, returning the path to the\n * directory of the file\n * @param  {string} filePath path which ends with a file name\n * @return {string}          directory path\n */ exports1.getPathBreadCrumbs = getPathBreadCrumbs;\n            var getPathParent = function getPathParent(filePath) {\n                if (filePath === \"/\") {\n                    return \"/\";\n                }\n                var pathParts = toPathParts(filePath); // converts path string to array\n                var pathPartsWithoutFileName = pathParts.slice(0, -1); // removes last element of array\n                return toPath(pathPartsWithoutFileName);\n            };\n            /**\n * Extracts the file name from the end of the file path\n * @param  {string} filePath path which ends with a file name\n * @return {string}          file name from the path\n */ exports1.getPathParent = getPathParent;\n            var getLastPathPart = function getLastPathPart(filePath) {\n                var pathParts = toPathParts(filePath); // converts path string to array\n                return pathParts[pathParts.length - 1];\n            };\n            /**\n * Extracts the file name and directory path from a file path\n * @param  {string} filePath path which ends with a file name\n * @return {object}          object with directory and file name\n */ exports1.getLastPathPart = getLastPathPart;\n            var splitFilePath = function splitFilePath(filePath) {\n                return {\n                    \"dirPath\": getPathParent(filePath),\n                    \"fileName\": getLastPathPart(filePath)\n                };\n            };\n            /**\n * Converts a relative path to an absolute path\n * @param  {string} relativePath\n * @param  {string} cwd          current working directory\n * @return {string}              absolute path\n */ exports1.splitFilePath = splitFilePath;\n            var GO_UP = \"..\";\n            var CURRENT_DIR = \".\";\n            var isStackAtRootDirectory = function isStackAtRootDirectory(stack) {\n                return stack.length === 1 && stack[0] === \"/\";\n            };\n            var toAbsolutePath = function toAbsolutePath(relativePath, cwd) {\n                relativePath = removeTrailingSeparator(relativePath);\n                var pathStack = isAbsPath(relativePath) ? [] : toPathParts(cwd);\n                var _iterator = _createForOfIteratorHelper(toPathParts(relativePath)), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var pathPart = _step.value;\n                        if (pathPart === GO_UP) {\n                            if (!isStackAtRootDirectory(pathStack)) {\n                                pathStack.pop();\n                            }\n                        } else if (pathPart !== CURRENT_DIR) {\n                            pathStack.push(pathPart);\n                        }\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n                return toPath(pathStack);\n            };\n            exports1.toAbsolutePath = toAbsolutePath;\n        /***/ },\n        /***/ \"./src/fs/util/permission-util.js\": /*!****************************************!*\\\n  !*** ./src/fs/util/permission-util.js ***!\n  \\****************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_582771__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1.canModifyPath = void 0;\n            var PathUtil = _interopRequireWildcard(__nested_webpack_require_582771__(/*! fs/util/path-util */ \"./src/fs/util/path-util.js\"));\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            function _createForOfIteratorHelper(o) {\n                if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n                    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n                        var i = 0;\n                        var F = function F() {};\n                        return {\n                            s: F,\n                            n: function n() {\n                                if (i >= o.length) return {\n                                    done: true\n                                };\n                                return {\n                                    done: false,\n                                    value: o[i++]\n                                };\n                            },\n                            e: function e(_e) {\n                                throw _e;\n                            },\n                            f: F\n                        };\n                    }\n                    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n                }\n                var it, normalCompletion = true, didErr = false, err;\n                return {\n                    s: function s() {\n                        it = o[Symbol.iterator]();\n                    },\n                    n: function n() {\n                        var step = it.next();\n                        normalCompletion = step.done;\n                        return step;\n                    },\n                    e: function e(_e2) {\n                        didErr = true;\n                        err = _e2;\n                    },\n                    f: function f() {\n                        try {\n                            if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n                        } finally{\n                            if (didErr) throw err;\n                        }\n                    }\n                };\n            }\n            function _unsupportedIterableToArray(o, minLen) {\n                if (!o) return;\n                if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n                var n = Object.prototype.toString.call(o).slice(8, -1);\n                if (n === \"Object\" && o.constructor) n = o.constructor.name;\n                if (n === \"Map\" || n === \"Set\") return Array.from(n);\n                if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n            }\n            function _arrayLikeToArray(arr, len) {\n                if (len == null || len > arr.length) len = arr.length;\n                for(var i = 0, arr2 = new Array(len); i < len; i++){\n                    arr2[i] = arr[i];\n                }\n                return arr2;\n            }\n            var DEFAULT_PERMISSION = true;\n            /**\n * Checks if a single path can be modified by checking the 'canModify' key held\n * in the path.\n *\n * This does NOT check parents of the path.\n * @param  {Map}     fs   file system\n * @param  {string}  path path to check for modification permission\n * @return {Boolean}      true, if a single path can be modified\n */ var isModificationAllowed = function isModificationAllowed(fs, path) {\n                var directory = fs.get(path, null);\n                if (directory) {\n                    var canModify = directory.get(\"canModify\", DEFAULT_PERMISSION);\n                    if (!canModify) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            /**\n * Checks if a path and its parents can be modified.\n * @param  {Map}     fs   file systems\n * @param  {String}  path path to a directory or file\n * @return {Boolean}      true, if the path and its parents can be modified\n */ var canModifyPath = function canModifyPath(fs, path) {\n                var breadCrumbPaths = PathUtil.getPathBreadCrumbs(path);\n                var _iterator = _createForOfIteratorHelper(breadCrumbPaths), _step;\n                try {\n                    for(_iterator.s(); !(_step = _iterator.n()).done;){\n                        var breadCrumbPath = _step.value;\n                        if (!isModificationAllowed(fs, breadCrumbPath)) {\n                            return false;\n                        }\n                    }\n                } catch (err) {\n                    _iterator.e(err);\n                } finally{\n                    _iterator.f();\n                }\n                return true;\n            };\n            exports1.canModifyPath = canModifyPath;\n        /***/ },\n        /***/ \"./src/index.js\": /*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_590222__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            Object.defineProperty(exports1, \"Emulator\", {\n                enumerable: true,\n                get: function get() {\n                    return _emulator[\"default\"];\n                }\n            });\n            Object.defineProperty(exports1, \"HistoryKeyboardPlugin\", {\n                enumerable: true,\n                get: function get() {\n                    return _HistoryKeyboardPlugin[\"default\"];\n                }\n            });\n            Object.defineProperty(exports1, \"EmulatorState\", {\n                enumerable: true,\n                get: function get() {\n                    return _emulatorState.EmulatorState;\n                }\n            });\n            Object.defineProperty(exports1, \"CommandMapping\", {\n                enumerable: true,\n                get: function get() {\n                    return _emulatorState.CommandMapping;\n                }\n            });\n            Object.defineProperty(exports1, \"EnvironmentVariables\", {\n                enumerable: true,\n                get: function get() {\n                    return _emulatorState.EnvironmentVariables;\n                }\n            });\n            Object.defineProperty(exports1, \"FileSystem\", {\n                enumerable: true,\n                get: function get() {\n                    return _emulatorState.FileSystem;\n                }\n            });\n            Object.defineProperty(exports1, \"History\", {\n                enumerable: true,\n                get: function get() {\n                    return _emulatorState.History;\n                }\n            });\n            Object.defineProperty(exports1, \"Outputs\", {\n                enumerable: true,\n                get: function get() {\n                    return _emulatorState.Outputs;\n                }\n            });\n            Object.defineProperty(exports1, \"OutputFactory\", {\n                enumerable: true,\n                get: function get() {\n                    return _emulatorOutput.OutputFactory;\n                }\n            });\n            Object.defineProperty(exports1, \"OutputType\", {\n                enumerable: true,\n                get: function get() {\n                    return _emulatorOutput.OutputType;\n                }\n            });\n            Object.defineProperty(exports1, \"DirOp\", {\n                enumerable: true,\n                get: function get() {\n                    return _fs.DirOp;\n                }\n            });\n            Object.defineProperty(exports1, \"FileOp\", {\n                enumerable: true,\n                get: function get() {\n                    return _fs.FileOp;\n                }\n            });\n            Object.defineProperty(exports1, \"OptionParser\", {\n                enumerable: true,\n                get: function get() {\n                    return _parser.OptionParser;\n                }\n            });\n            Object.defineProperty(exports1, \"defaultCommandMapping\", {\n                enumerable: true,\n                get: function get() {\n                    return _commands[\"default\"];\n                }\n            });\n            var _emulator = _interopRequireDefault(__nested_webpack_require_590222__(/*! emulator */ \"./src/emulator/index.js\"));\n            var _HistoryKeyboardPlugin = _interopRequireDefault(__nested_webpack_require_590222__(/*! emulator/plugins/HistoryKeyboardPlugin */ \"./src/emulator/plugins/HistoryKeyboardPlugin.js\"));\n            var _emulatorState = __nested_webpack_require_590222__(/*! emulator-state */ \"./src/emulator-state/index.js\");\n            var _emulatorOutput = __nested_webpack_require_590222__(/*! emulator-output */ \"./src/emulator-output/index.js\");\n            var _fs = __nested_webpack_require_590222__(/*! fs */ \"./src/fs/index.js\");\n            var _parser = __nested_webpack_require_590222__(/*! parser */ \"./src/parser/index.js\");\n            var _commands = _interopRequireDefault(__nested_webpack_require_590222__(/*! commands */ \"./src/commands/index.js\"));\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n        /***/ },\n        /***/ \"./src/parser/command-parser.js\": /*!**************************************!*\\\n  !*** ./src/parser/command-parser.js ***!\n  \\**************************************/ /*! no static exports found */ /***/ function(module1, exports1, __webpack_require__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.parseCommands = void 0;\n            function _toArray(arr) {\n                return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();\n            }\n            function _nonIterableRest() {\n                throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n            }\n            function _unsupportedIterableToArray(o, minLen) {\n                if (!o) return;\n                if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n                var n = Object.prototype.toString.call(o).slice(8, -1);\n                if (n === \"Object\" && o.constructor) n = o.constructor.name;\n                if (n === \"Map\" || n === \"Set\") return Array.from(n);\n                if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n            }\n            function _arrayLikeToArray(arr, len) {\n                if (len == null || len > arr.length) len = arr.length;\n                for(var i = 0, arr2 = new Array(len); i < len; i++){\n                    arr2[i] = arr[i];\n                }\n                return arr2;\n            }\n            function _iterableToArray(iter) {\n                if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n            }\n            function _arrayWithHoles(arr) {\n                if (Array.isArray(arr)) return arr;\n            }\n            /**\n * Removes excess whitespace (> 1 space) from edges of string and inside string.\n * @param  {string} str string\n * @return {string}     string without > 1 space of whitespace\n */ var removeExcessWhiteSpace = function removeExcessWhiteSpace(str) {\n                return str.trim().replace(/\\s\\s+/g, \" \");\n            };\n            /**\n * Places the command name and each following argument into a list\n * @param  {string} command sh command\n * @return {array}          command name and arguments (if any)\n */ var toCommandParts = function toCommandParts(command) {\n                return removeExcessWhiteSpace(command).split(/\\s/);\n            };\n            /**\n * Creates a list of commands split into the command name and arguments\n * @param  {string} commands command input\n * @return {array}           list of parsed command\n */ var parseCommands = function parseCommands(commands) {\n                return commands.split(/&&|;/) // split command delimiters: `&&` and `;`\n                .map(function(command) {\n                    return toCommandParts(command);\n                }).map(function(_ref) {\n                    var _ref2 = _toArray(_ref), commandName = _ref2[0], commandOptions = _ref2.slice(1);\n                    return {\n                        commandName: commandName,\n                        commandOptions: commandOptions\n                    };\n                });\n            };\n            exports1.parseCommands = parseCommands;\n            var _default = parseCommands;\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ \"./src/parser/index.js\": /*!*****************************!*\\\n  !*** ./src/parser/index.js ***!\n  \\*****************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_598220__) {\n            \"use strict\";\n            function _typeof(obj) {\n                \"@babel/helpers - typeof\";\n                if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                    _typeof = function _typeof(obj) {\n                        return typeof obj;\n                    };\n                } else {\n                    _typeof = function _typeof(obj) {\n                        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                    };\n                }\n                return _typeof(obj);\n            }\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = void 0;\n            var OptionParser = _interopRequireWildcard(__nested_webpack_require_598220__(/*! parser/option-parser */ \"./src/parser/option-parser.js\"));\n            function _getRequireWildcardCache() {\n                if (typeof WeakMap !== \"function\") return null;\n                var cache = new WeakMap();\n                _getRequireWildcardCache = function _getRequireWildcardCache() {\n                    return cache;\n                };\n                return cache;\n            }\n            function _interopRequireWildcard(obj) {\n                if (obj && obj.__esModule) {\n                    return obj;\n                }\n                if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n                    return {\n                        \"default\": obj\n                    };\n                }\n                var cache = _getRequireWildcardCache();\n                if (cache && cache.has(obj)) {\n                    return cache.get(obj);\n                }\n                var newObj = {};\n                var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                        if (desc && (desc.get || desc.set)) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n                newObj[\"default\"] = obj;\n                if (cache) {\n                    cache.set(obj, newObj);\n                }\n                return newObj;\n            }\n            var _default = {\n                OptionParser: OptionParser\n            };\n            exports1[\"default\"] = _default;\n            module1.exports = exports1.default;\n        /***/ },\n        /***/ \"./src/parser/option-parser.js\": /*!*************************************!*\\\n  !*** ./src/parser/option-parser.js ***!\n  \\*************************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_601264__) {\n            \"use strict\";\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            exports1[\"default\"] = exports1.parseOptions = void 0;\n            var _getOptions = _interopRequireDefault(__nested_webpack_require_601264__(/*! get-options */ \"./node_modules/get-options/index.js\"));\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {\n                    \"default\": obj\n                };\n            }\n            /**\n * Creates an options object with bindings based on optDefs\n * @param  {string} commandOptions string representation of command arguments\n * @param  {object} optDef         see get-options documentation for schema details\n * @return {object}                options object\n */ var parseOptions = function parseOptions(commandOptions, optDef) {\n                return (0, _getOptions[\"default\"])(commandOptions, optDef, {\n                    noAliasPropagation: \"first-only\"\n                });\n            };\n            exports1.parseOptions = parseOptions;\n            var _default = parseOptions;\n            exports1[\"default\"] = _default;\n        /***/ },\n        /***/ 0: /*!****************************!*\\\n  !*** multi ./src/index.js ***!\n  \\****************************/ /*! no static exports found */ /***/ function(module1, exports1, __nested_webpack_require_602649__) {\n            module1.exports = __nested_webpack_require_602649__(/*! /Users/turtle/Documents/Github/javascript-terminal/src/index.js */ \"./src/index.js\");\n        /***/ }\n    });\n}); //# sourceMappingURL=terminal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/javascript-terminal-turtle/lib/terminal.js\n");

/***/ })

};
;